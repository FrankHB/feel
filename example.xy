:> demo 
{ 
    <: 
    { 
        System;
        System.Linq;
        System.Collections.Generic;
        System.Text;
        System.Threading.Tasks;
        System.ComponentModel.DataAnnotations.Schema;
        System.ComponentModel.DataAnnotations;
    }; 

    $ 
    {
        Console.WriteLine(value:"main function");
        i => "128.687"; 
        i += ".890"; 
        b => 12;  
        b = + - b;
        c => false; 
        c = ~~c;
        Console.WriteLine(value:b.ToString().ToString());
        p => App~();
        (x, _) => p.TestFunc(str:"testcall");
        _ = p.class.c(x:1);
        class._TestInterface(x:p.class);

        p.TestSwitch();
        p.TestIf();
        p.TestArray();
        p.TestDictionary();
        p.TestLoop();
        p.TestCheck();
        _ = p.TestFuncTemplate<number,text>(data1: 1, data2: "2");
        p.TestLambda();
        p.TestTypeConvert();

        Console.ReadKey();
    };

    App => #~()
    { 
        ~# Program;

        i => 128.687;  
        b => "12";  
        c => true; 
        arr => [1,1,1,1];
        _PriName => " program ";

        TestTypeConvert => $()~()
        {
            x => App~();
            y => x !:Program;
            Console.WriteLine(value: y ?: Program );
        };

        TestSwitch => $()~()
        {
            x => 3;
            ? x ~ 1
            {
                Console.WriteLine(value:1);
            }
            ~ 2
            {
                Console.WriteLine(value:2);
            }
            ~ 3
            {
                Console.WriteLine(value:3);
            }
            ~ _
            {
                Console.WriteLine(value:"default");
            };
        };

        TestIf => $()~()
        {
            x => 5;
            ? x == 2
            {
                Console.WriteLine(value:2);
            }
            ? x == 3
            {
                Console.WriteLine(value:3);
            }
            ~?
            {
                Console.WriteLine(value:"else");
            };
        };

        TestArray => $()~()
        {
            arrNumber => [1,2,5,6,8,4];
            take => arrNumber[0];
            arrObj => ["123",432,App~()];
            arrArr => [[1,1,1],[1,1,1]];
            arrEmpty => [number]~();
            @ arrNumber ~ item 
            {
                Console.WriteLine(value:item);
            };
        };

        TestDictionary => $()~()
        {
            empty => [text:number]~();
            dicSN => ["k1":1,"k2":"2"];
            Console.WriteLine(value: dicSN["k2"] );
        };

        TestCheck => $()~()
        {
            ! 
            {
                ^.class.c(x:9);
            }
            ~ err 
            {
                ~! err;
            };
        };

        TestLoop => $()~()
        {
            @ 0..2..8 ~ i
            {
                Console.WriteLine(value:i);
            };
            @ 8..-2..0 ~ i
            {
                Console.WriteLine(value:i);
            };
        };

        TestFunc => $(str:text)~(out1:text,out2:number)
        {
            str = str + "test";
            i => 1+1*3*9/8;
            out2 => i + 5 +(i +8);
            // func in func
            InFunc => $()~(out:text)
            {
                -> ("in func");
            };
            Console.WriteLine(value: InFunc() );

            -> (str, i);
        };

        TestAsync => .$()~(x:number,y:number,z:text)
        {
            .$ Task.Delay(time:5000);
            Async1 => .$()~()
            {
                .$ Task.Delay(time:5000);
            };
            -> (1, 2, "123");
        };

        _Result => #~(str:text) 
        {
            data => "";

            ~#
            {
                ^.data = str;
            };
        };

        ~& demo.class
        {
            b => 5;

            c => $(x:number)~(y:number)
            {
                -> (x + ^.class.b);
            };

            d => .$()~(x:number)
            {
                .$ Task.Delay(time:5000);
                -> (3);
            };
        };

        TestFuncTemplate<T1,T2> => $(data1:T1, data2:T2)~(data:T1)
        {
            -> (data1);
        };

        TestPackageTemplate<T> => #~()
        {
            data => ~<T>;
        };

        TestProtocolTemplate<T> => &
        {
            _Test<T> => $(in:T)~(){};

            Test<T> => $(in:T)~(){};
        };

        TestImplementTemplate => #~()
        {
            ~& TestProtocolTemplate<TestImplementTemplate>
            {
                Test<TestImplementTemplate> => $(in:TestImplementTemplate)~(){};
            };
        };

        TestLambda => $()~()
        {
            Test1 => $(fn: $(i1:number, i2:number)~(o1:number, o2:number) )~()
            {
                (o1, o2) => fn(i1:1, i2:2);
            };
            Test1(fn: $(i1,i2)~( -> (i1,i2);));

            Test2 => $(fn: $()~(o1:number) )~()
            {
                o1 => fn();
            };
            Test2(fn: $()~(->(1);));

            Test3 => $(fn: $(i1:number)~() )~()
            {
                fn(i1:1);
            };
            Test3(fn: .$(i1)~( i=>i1; ));
        };
    }; 

    Program => #~()
    {
        Name => "";
    };

    class => &
    {
        b => 0;
        c => $(x:number)~(y:number){};
        d => .$()~(y:number){};

        _a => 12;
        _Test => $(in:number)~(out:number)
        {
            -> (in);
        };

        _TestInterface => $(x:&demo.class)~()
        {
            x.c(x:111);
        };

        _TestAsync => .$()~()
        {
            .$ Task.Delay(time:5000);
        };
    };

    \*Table(name:"test")*\
    TestAnnotation => #~()
    {
        \*Key, Column(name:"id")*\
        Id => "";
        \*Column(name:"nick_name")*\
        NickName => ""; 
        \*Column(name:"profile")*\
        Profile => "";
    };
};