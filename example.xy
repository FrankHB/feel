:> demo 
{ 
    <: 
    { 
        System;
        System.Linq;
        System.Collections.Generic;
        System.Text;
        System.Threading.Tasks;
        System.ComponentModel.DataAnnotations.Schema;
        System.ComponentModel.DataAnnotations;
        .. Other;
    }; 

    $ 
    {
        Console.WriteLine("main function");
        i => "128.687"; 
        i += ".890"; 
        b => 12;  
        b <= + - b;
        b += OtherData;
        c => false; 
        c <= ~~c;
        Console.WriteLine(b.ToString().ToString());

        TestSwitch();
        TestIf();
        TestArray();
        TestDictionary();
        TestLoop();
        (x, _) => TestFunc("testcall");
        TestCheck();
        TestTypeConvert();
        Console.WriteLine(TestDefer().str);
        TestLambda();
        _ <= .$ TestAsync();

        p => App~();

        _ <= p.class.c(1);
        TestInterface(p.class);

        _ <= p.TestFuncTemplate<i32,txt>(1, "2");
        
        Console.ReadKey();
    };

    staticX => 0;
    staticY => "hello";
    constZ == 1024;

    TestTypeConvert => $()~()
    {
        x => App~();
        y => Program!(x);
        Console.WriteLine(Program?(y));
    };

    TestSwitch => $()~()
    {
        x => 3;
        ? x ~ 1
        {
            Console.WriteLine(1);
        }
        ~ 2
        {
            Console.WriteLine(2);
        }
        ~ 3
        {
            Console.WriteLine(3);
        }
        ~ _
        {
            Console.WriteLine("default");
        };
    };

    TestIf => $()~()
    {
        x => 5;
        ? x = 2
        {
            Console.WriteLine(2);
        }
        ? x = 3
        {
            Console.WriteLine(3);
        }
        ~?
        {
            Console.WriteLine("else");
        };
    };

    TestArray => $()~()
    {
        arrSingle => [1];
        arrNumber => [1,2,5,6,8,4];
        take => arrNumber.[0];
        arrObj => ["123",432,App~()];
        arrArr => [[1,1,1],[1,1,1]];
        arrEmpty => []i32~();
        @ arrNumber ~ item 
        {
            Console.WriteLine(item);
        };
    };

    TestDictionary => $()~()
    {
        empty => [txt]i32~();
        dicSN => ["k1":1,"k2":"2"];
        Console.WriteLine(dicSN.["k2"]);
    };

    TestCheck => $()~()
    {
        ! 
        {
            x => 1 * 1;
        }
        ~ err 
        {
            ~! err;
        };
    };

    Defer => #~()
    {
        str => ^ txt;
    };

    TestDefer => $()~(out:Defer)
    {
        x => Defer~();
        .!
        {
            x.str += "defer 2";
        };
        x.str <= "3";
        .!
        {
            x.str += "defer 4";
        };
        x.str += "5";
        @ 0<.3 ~ index
        {
            .!
            {
                x.str += "defer 6";
            };
            x.str += "7";
        };
        -> (x);
    };

    TestLoop => $()~()
    {
        @ 0<.2<.8 ~ i
        {
            Console.WriteLine(i);
        };
        @ 8<.-2<.0 ~ i
        {
            Console.WriteLine(i);
        };
        @
        {
            ~@;
        };
    };

    TestFunc => $(str:txt)~(out1:txt,out2:i32)
    {
        str <= str + "test";
        i => 1+1*3*9/8;
        out2 => i + 5 +(i +8);
        // func in func
        InFunc => $()~()
        {
            -> ();
        };
        InFunc();

        -> (str, i);
    };

    TestAsync => .$()~(x:i32,y:i32,z:txt)
    {
        .$ Task.Delay(5000);
        Async1 => .$()~()
        {
            .$ Task.Delay(5000);
        };
        -> (1, 2, "123");
    };

    TestLambda => $()~()
    {
        Test1 => $(fn: $(i1:i32, i2:i32)~(o1:i32, o2:i32) )~()
        {
            (o1, o2) => fn(1, 2);
        };
        Test1($i1,i2->(i1,i2));

        Test2 => $(fn: $()~(o1:i32) )~()
        {
            o1 => fn();
        };
        Test2($->1);

        Test3 => $(fn: $(i1:i32)~() )~()
        {
            fn(1);
        };
        Test3(.$(i1:i32)~()
        {
            .$ Task.Delay(5000);
            Console.WriteLine(i1);
        });
    };

    TestLinq => $()~()
    {
        numbers =>  [0, 1, 2, 3, 4, 5, 6];
        arr => `from num in numbers
                where (num % 2) = 0
                orderby num descending
                select num`;
    };

    TestInterface => $(in:class)~() {};

    App => #~()
    { 
        ~# Program;

        i => 555;
        d => 128.687;  
        b => "12";  
        c => true; 
        arr => [1,1,1,1];
        _PriName => " program ";

        TestPackage => $()~()
        {
            item => Program~(){
                Name: "new program",
                Running: true
            };
            item2 => #
            {
                Name: "new program",
                Running: true
            };
            item3 => []i32~()[1,2,3,4,5];
            item4 => [txt]i32~()["1":1,"2":2,"3":3];
        };

        _Result => #~(str:txt) 
        {
            data => "";

            ~#
            {
                ^.data <= str;
            };
        };

        ~& class
        {
            b => 5;

            c => $(x:i32)~(y:i32)
            {
                -> (x + ^.class.b);
            };

            d => .$()~(x:i32)
            {
                .$ Task.Delay(5000);
                -> (3);
            };

            e => .$()~()
            {
                .$ Task.Delay(5000);
            };
        };

        TestFuncTemplate<T1,T2> => $(data1:T1, data2:T2)~(data:T1)
        {
            -> (data1);
        };

        TestPackageTemplate<T> => #~()
        {
            data => ~:T;
        };

        TestProtocolTemplate<T> => &
        {
            Test<T> => $(in:T)~(){};
        };

        TestImplementTemplate => #~()
        {
            ~& TestProtocolTemplate<TestImplementTemplate>
            {
                Test<TestImplementTemplate> => $(in:TestImplementTemplate)~(){};
            };
        };
    }; 

    Program => #~()
    {
        Name => ^ txt;
        Running => ^ bool;

        Property => ^ txt
        {
            => { -> (Name); };
            <= { Name <= value; };
        };
    };

    class => &
    {
        b => 0;
        c => $(x:i32)~(y:i32){};
        d => .$()~(y:i32){};
        e => .$()~(){};
    };

    \*Table("test")*\
    TestAnnotation => #~()
    {
        \*Key, Column("id")*\
        Id => "";
        \*Column("nick_name")*\
        NickName => ""; 
        \*Column("profile")*\
        Profile => "";
    };
};

:> Other
{
    <:
    {
        System;
    };

    OtherData == 256; 
};