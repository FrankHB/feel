// Code generated from XsParser.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser // XsParser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 92, 1817,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 3, 2, 6, 2, 302,
	10, 2, 13, 2, 14, 2, 303, 3, 3, 7, 3, 307, 10, 3, 12, 3, 14, 3, 310, 11,
	3, 3, 3, 5, 3, 313, 10, 3, 3, 3, 3, 3, 7, 3, 317, 10, 3, 12, 3, 14, 3,
	320, 11, 3, 3, 3, 7, 3, 323, 10, 3, 12, 3, 14, 3, 326, 11, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 7, 4, 332, 10, 4, 12, 4, 14, 4, 335, 11, 4, 3, 4, 3, 4,
	3, 4, 3, 5, 5, 5, 341, 10, 5, 3, 5, 3, 5, 3, 5, 5, 5, 346, 10, 5, 5, 5,
	348, 10, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 364, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 5, 9, 377, 10, 9, 3, 9, 3, 9, 3, 9,
	7, 9, 382, 10, 9, 12, 9, 14, 9, 385, 11, 9, 3, 9, 3, 9, 3, 9, 7, 9, 390,
	10, 9, 12, 9, 14, 9, 393, 11, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10,
	5, 10, 401, 10, 10, 3, 10, 5, 10, 404, 10, 10, 3, 10, 3, 10, 3, 11, 5,
	11, 409, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11,
	418, 10, 11, 5, 11, 420, 10, 11, 3, 11, 3, 11, 3, 12, 5, 12, 425, 10, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 436,
	10, 12, 5, 12, 438, 10, 12, 3, 12, 3, 12, 6, 12, 442, 10, 12, 13, 12, 14,
	12, 443, 5, 12, 446, 10, 12, 3, 12, 3, 12, 3, 13, 5, 13, 451, 10, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 459, 10, 13, 3, 13, 3, 13,
	3, 13, 3, 14, 5, 14, 465, 10, 14, 3, 14, 3, 14, 5, 14, 469, 10, 14, 3,
	14, 3, 14, 3, 14, 7, 14, 474, 10, 14, 12, 14, 14, 14, 477, 11, 14, 3, 14,
	3, 14, 3, 14, 7, 14, 482, 10, 14, 12, 14, 14, 14, 485, 11, 14, 3, 14, 3,
	14, 3, 14, 3, 15, 5, 15, 491, 10, 15, 3, 15, 3, 15, 5, 15, 495, 10, 15,
	3, 15, 3, 15, 3, 15, 7, 15, 500, 10, 15, 12, 15, 14, 15, 503, 11, 15, 3,
	15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 513, 10, 16,
	3, 17, 3, 17, 3, 17, 3, 18, 5, 18, 519, 10, 18, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 5, 18, 527, 10, 18, 3, 18, 3, 18, 5, 18, 531, 10, 18,
	3, 18, 3, 18, 7, 18, 535, 10, 18, 12, 18, 14, 18, 538, 11, 18, 3, 18, 3,
	18, 3, 19, 5, 19, 543, 10, 19, 3, 19, 3, 19, 5, 19, 547, 10, 19, 3, 19,
	3, 19, 5, 19, 551, 10, 19, 3, 19, 3, 19, 3, 19, 7, 19, 556, 10, 19, 12,
	19, 14, 19, 559, 11, 19, 3, 19, 3, 19, 3, 19, 7, 19, 564, 10, 19, 12, 19,
	14, 19, 567, 11, 19, 3, 19, 3, 19, 3, 19, 3, 20, 5, 20, 573, 10, 20, 3,
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 5, 20, 582, 10, 20, 5, 20,
	584, 10, 20, 3, 20, 3, 20, 3, 21, 5, 21, 589, 10, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 600, 10, 21, 5, 21,
	602, 10, 21, 3, 21, 3, 21, 6, 21, 606, 10, 21, 13, 21, 14, 21, 607, 5,
	21, 610, 10, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 6, 22, 617, 10, 22,
	13, 22, 14, 22, 618, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 24, 5, 24, 632, 10, 24, 3, 24, 3, 24, 5, 24, 636,
	10, 24, 3, 24, 3, 24, 3, 24, 7, 24, 641, 10, 24, 12, 24, 14, 24, 644, 11,
	24, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 653, 10, 25,
	3, 26, 5, 26, 656, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 7, 26, 667, 10, 26, 12, 26, 14, 26, 670, 11, 26, 5, 26,
	672, 10, 26, 3, 26, 3, 26, 3, 27, 3, 27, 3, 28, 5, 28, 679, 10, 28, 3,
	28, 3, 28, 5, 28, 683, 10, 28, 3, 28, 3, 28, 3, 28, 7, 28, 688, 10, 28,
	12, 28, 14, 28, 691, 11, 28, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 5, 29,
	698, 10, 29, 3, 29, 3, 29, 3, 29, 7, 29, 703, 10, 29, 12, 29, 14, 29, 706,
	11, 29, 3, 29, 3, 29, 3, 29, 7, 29, 711, 10, 29, 12, 29, 14, 29, 714, 11,
	29, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 5, 31,
	725, 10, 31, 3, 31, 3, 31, 3, 31, 7, 31, 730, 10, 31, 12, 31, 14, 31, 733,
	11, 31, 3, 31, 3, 31, 3, 32, 3, 32, 5, 32, 739, 10, 32, 3, 32, 3, 32, 3,
	32, 7, 32, 744, 10, 32, 12, 32, 14, 32, 747, 11, 32, 3, 32, 3, 32, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 760, 10,
	33, 3, 34, 5, 34, 763, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34,
	770, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3,
	35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	5, 35, 791, 10, 35, 3, 36, 3, 36, 3, 36, 6, 36, 796, 10, 36, 13, 36, 14,
	36, 797, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 7, 37, 805, 10, 37, 12, 37,
	14, 37, 808, 11, 37, 3, 37, 3, 37, 3, 38, 3, 38, 5, 38, 814, 10, 38, 3,
	38, 3, 38, 5, 38, 818, 10, 38, 3, 38, 3, 38, 7, 38, 822, 10, 38, 12, 38,
	14, 38, 825, 11, 38, 3, 38, 3, 38, 3, 39, 3, 39, 5, 39, 831, 10, 39, 3,
	40, 3, 40, 7, 40, 835, 10, 40, 12, 40, 14, 40, 838, 11, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 7, 40, 845, 10, 40, 12, 40, 14, 40, 848, 11, 40, 3,
	40, 3, 40, 5, 40, 852, 10, 40, 3, 41, 3, 41, 3, 41, 7, 41, 857, 10, 41,
	12, 41, 14, 41, 860, 11, 41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 3, 42,
	7, 42, 868, 10, 42, 12, 42, 14, 42, 871, 11, 42, 3, 42, 3, 42, 3, 43, 3,
	43, 3, 43, 7, 43, 878, 10, 43, 12, 43, 14, 43, 881, 11, 43, 3, 43, 3, 43,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 890, 10, 44, 12, 44, 14, 44,
	893, 11, 44, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 5, 45, 904, 10, 45, 3, 45, 3, 45, 3, 45, 7, 45, 909, 10, 45, 12, 45,
	14, 45, 912, 11, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46, 3, 46, 7,
	46, 921, 10, 46, 12, 46, 14, 46, 924, 11, 46, 3, 46, 3, 46, 3, 46, 3, 47,
	3, 47, 3, 47, 7, 47, 932, 10, 47, 12, 47, 14, 47, 935, 11, 47, 3, 47, 3,
	47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50,
	3, 50, 3, 50, 7, 50, 951, 10, 50, 12, 50, 14, 50, 954, 11, 50, 3, 50, 3,
	50, 7, 50, 958, 10, 50, 12, 50, 14, 50, 961, 11, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 7, 50, 969, 10, 50, 12, 50, 14, 50, 972, 11, 50, 3,
	50, 3, 50, 6, 50, 976, 10, 50, 13, 50, 14, 50, 977, 3, 50, 3, 50, 5, 50,
	982, 10, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 989, 10, 51, 3,
	51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 998, 10, 52, 3, 52,
	3, 52, 7, 52, 1002, 10, 52, 12, 52, 14, 52, 1005, 11, 52, 3, 52, 3, 52,
	3, 53, 3, 53, 3, 53, 7, 53, 1012, 10, 53, 12, 53, 14, 53, 1015, 11, 53,
	3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 5, 54, 1022, 10, 54, 3, 54, 3, 54, 3,
	54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 1041, 10, 55, 3, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 3, 56, 5, 56, 1049, 10, 56, 3, 56, 3, 56, 3, 56, 3, 57, 3, 57,
	3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 61, 3, 61,
	5, 61, 1077, 10, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1085,
	10, 61, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3,
	62, 5, 62, 1107, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3,
	62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 62, 3, 62, 3, 62, 7, 62, 1141, 10, 62, 12, 62, 14, 62, 1144,
	11, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1151, 10, 63, 3, 63,
	3, 63, 3, 63, 5, 63, 1156, 10, 63, 3, 63, 3, 63, 7, 63, 1160, 10, 63, 12,
	63, 14, 63, 1163, 11, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 7, 64, 1170,
	10, 64, 12, 64, 14, 64, 1173, 11, 64, 5, 64, 1175, 10, 64, 3, 64, 3, 64,
	3, 65, 3, 65, 3, 65, 3, 65, 7, 65, 1183, 10, 65, 12, 65, 14, 65, 1186,
	11, 65, 3, 66, 3, 66, 5, 66, 1190, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67,
	5, 67, 1196, 10, 67, 3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 68, 3, 68, 7,
	68, 1205, 10, 68, 12, 68, 14, 68, 1208, 11, 68, 3, 69, 3, 69, 3, 69, 3,
	69, 3, 69, 3, 69, 7, 69, 1216, 10, 69, 12, 69, 14, 69, 1219, 11, 69, 3,
	69, 3, 69, 5, 69, 1223, 10, 69, 3, 70, 3, 70, 3, 70, 5, 70, 1228, 10, 70,
	3, 70, 3, 70, 3, 71, 3, 71, 5, 71, 1234, 10, 71, 3, 71, 3, 71, 5, 71, 1238,
	10, 71, 3, 72, 3, 72, 5, 72, 1242, 10, 72, 3, 72, 3, 72, 3, 72, 3, 72,
	3, 73, 3, 73, 5, 73, 1250, 10, 73, 3, 73, 3, 73, 3, 73, 5, 73, 1255, 10,
	73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 1265,
	10, 74, 3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 1274, 10,
	75, 3, 75, 5, 75, 1277, 10, 75, 3, 75, 5, 75, 1280, 10, 75, 3, 75, 3, 75,
	3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 1289, 10, 76, 3, 76, 3, 76, 3,
	77, 3, 77, 3, 77, 3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 3, 78, 7, 78, 1302,
	10, 78, 12, 78, 14, 78, 1305, 11, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 80,
	3, 80, 3, 80, 3, 80, 7, 80, 1315, 10, 80, 12, 80, 14, 80, 1318, 11, 80,
	3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 7, 81, 1328, 10,
	81, 12, 81, 14, 81, 1331, 11, 81, 3, 82, 3, 82, 3, 82, 3, 82, 7, 82, 1337,
	10, 82, 12, 82, 14, 82, 1340, 11, 82, 3, 83, 3, 83, 3, 83, 3, 84, 3, 84,
	3, 84, 3, 84, 3, 84, 7, 84, 1350, 10, 84, 12, 84, 14, 84, 1353, 11, 84,
	3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3,
	85, 7, 85, 1366, 10, 85, 12, 85, 14, 85, 1369, 11, 85, 3, 85, 3, 85, 3,
	86, 3, 86, 3, 86, 3, 86, 3, 86, 7, 86, 1378, 10, 86, 12, 86, 14, 86, 1381,
	11, 86, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 88, 3, 88,
	3, 88, 5, 88, 1393, 10, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3,
	90, 3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 5, 92, 1408, 10, 92, 7, 92,
	1410, 10, 92, 12, 92, 14, 92, 1413, 11, 92, 3, 92, 3, 92, 3, 93, 3, 93,
	3, 93, 5, 93, 1420, 10, 93, 3, 93, 3, 93, 7, 93, 1424, 10, 93, 12, 93,
	14, 93, 1427, 11, 93, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 7, 94, 1434, 10,
	94, 12, 94, 14, 94, 1437, 11, 94, 3, 94, 3, 94, 3, 95, 3, 95, 3, 95, 5,
	95, 1444, 10, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 7, 96, 1451, 10, 96,
	12, 96, 14, 96, 1454, 11, 96, 3, 96, 3, 96, 3, 97, 3, 97, 5, 97, 1460,
	10, 97, 3, 97, 3, 97, 7, 97, 1464, 10, 97, 12, 97, 14, 97, 1467, 11, 97,
	3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 1474, 10, 97, 3, 97, 3, 97, 7,
	97, 1478, 10, 97, 12, 97, 14, 97, 1481, 11, 97, 3, 97, 7, 97, 1484, 10,
	97, 12, 97, 14, 97, 1487, 11, 97, 3, 97, 3, 97, 5, 97, 1491, 10, 97, 3,
	98, 3, 98, 3, 98, 3, 98, 7, 98, 1497, 10, 98, 12, 98, 14, 98, 1500, 11,
	98, 3, 99, 3, 99, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 7, 100, 1509,
	10, 100, 12, 100, 14, 100, 1512, 11, 100, 3, 100, 3, 100, 3, 101, 3, 101,
	3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 7, 102, 1523, 10, 102, 12, 102,
	14, 102, 1526, 11, 102, 3, 102, 3, 102, 3, 102, 7, 102, 1531, 10, 102,
	12, 102, 14, 102, 1534, 11, 102, 3, 102, 3, 102, 3, 103, 3, 103, 3, 103,
	3, 103, 3, 103, 7, 103, 1543, 10, 103, 12, 103, 14, 103, 1546, 11, 103,
	3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 3, 105, 3, 105, 3, 105, 3, 106,
	3, 106, 5, 106, 1558, 10, 106, 3, 106, 3, 106, 3, 106, 5, 106, 1563, 10,
	106, 3, 106, 6, 106, 1566, 10, 106, 13, 106, 14, 106, 1567, 3, 106, 3,
	106, 5, 106, 1572, 10, 106, 3, 106, 3, 106, 3, 107, 3, 107, 5, 107, 1578,
	10, 107, 3, 107, 3, 107, 5, 107, 1582, 10, 107, 3, 108, 3, 108, 5, 108,
	1586, 10, 108, 3, 109, 3, 109, 3, 110, 3, 110, 3, 111, 3, 111, 6, 111,
	1594, 10, 111, 13, 111, 14, 111, 1595, 3, 112, 3, 112, 3, 112, 3, 113,
	3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 5, 113, 1609, 10,
	113, 3, 114, 3, 114, 3, 114, 3, 114, 3, 115, 6, 115, 1616, 10, 115, 13,
	115, 14, 115, 1617, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3,
	116, 3, 116, 3, 116, 3, 116, 5, 116, 1630, 10, 116, 3, 117, 3, 117, 3,
	117, 5, 117, 1635, 10, 117, 3, 118, 3, 118, 3, 118, 3, 119, 3, 119, 3,
	119, 5, 119, 1643, 10, 119, 3, 120, 3, 120, 3, 120, 3, 120, 3, 120, 6,
	120, 1650, 10, 120, 13, 120, 14, 120, 1651, 3, 120, 3, 120, 3, 121, 3,
	121, 3, 121, 3, 121, 3, 121, 3, 122, 3, 122, 3, 122, 3, 122, 3, 123, 3,
	123, 3, 123, 3, 123, 3, 124, 3, 124, 3, 124, 3, 124, 3, 124, 3, 125, 3,
	125, 3, 125, 3, 125, 3, 125, 3, 126, 3, 126, 5, 126, 1681, 10, 126, 3,
	127, 3, 127, 3, 127, 7, 127, 1686, 10, 127, 12, 127, 14, 127, 1689, 11,
	127, 3, 127, 3, 127, 3, 128, 3, 128, 3, 128, 3, 129, 3, 129, 5, 129, 1698,
	10, 129, 3, 129, 3, 129, 3, 129, 7, 129, 1703, 10, 129, 12, 129, 14, 129,
	1706, 11, 129, 3, 129, 3, 129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130,
	3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130,
	3, 130, 5, 130, 1725, 10, 130, 3, 131, 3, 131, 3, 131, 3, 132, 3, 132,
	5, 132, 1732, 10, 132, 3, 133, 3, 133, 3, 133, 3, 134, 3, 134, 5, 134,
	1739, 10, 134, 3, 135, 3, 135, 5, 135, 1743, 10, 135, 3, 136, 3, 136, 5,
	136, 1747, 10, 136, 3, 137, 3, 137, 5, 137, 1751, 10, 137, 3, 138, 3, 138,
	5, 138, 1755, 10, 138, 3, 139, 3, 139, 5, 139, 1759, 10, 139, 3, 140, 3,
	140, 3, 141, 6, 141, 1764, 10, 141, 13, 141, 14, 141, 1765, 3, 142, 3,
	142, 3, 142, 3, 142, 5, 142, 1772, 10, 142, 3, 143, 3, 143, 3, 144, 3,
	144, 7, 144, 1778, 10, 144, 12, 144, 14, 144, 1781, 11, 144, 3, 145, 3,
	145, 7, 145, 1785, 10, 145, 12, 145, 14, 145, 1788, 11, 145, 3, 146, 7,
	146, 1791, 10, 146, 12, 146, 14, 146, 1794, 11, 146, 3, 146, 3, 146, 3,
	147, 3, 147, 3, 148, 3, 148, 3, 149, 3, 149, 7, 149, 1804, 10, 149, 12,
	149, 14, 149, 1807, 11, 149, 3, 150, 7, 150, 1810, 10, 150, 12, 150, 14,
	150, 1813, 11, 150, 3, 150, 3, 150, 3, 150, 2, 4, 122, 124, 151, 2, 4,
	6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
	44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
	80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
	114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
	144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
	174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
	204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
	234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262,
	264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292,
	294, 296, 298, 2, 14, 4, 2, 36, 36, 38, 38, 4, 2, 28, 29, 41, 42, 3, 2,
	4, 5, 3, 2, 4, 16, 4, 2, 27, 27, 30, 30, 5, 2, 27, 30, 41, 42, 62, 63,
	4, 2, 21, 25, 40, 40, 3, 2, 56, 57, 3, 2, 58, 60, 3, 2, 18, 20, 3, 2, 85,
	86, 4, 2, 43, 43, 91, 91, 2, 1950, 2, 301, 3, 2, 2, 2, 4, 308, 3, 2, 2,
	2, 6, 327, 3, 2, 2, 2, 8, 340, 3, 2, 2, 2, 10, 363, 3, 2, 2, 2, 12, 365,
	3, 2, 2, 2, 14, 370, 3, 2, 2, 2, 16, 376, 3, 2, 2, 2, 18, 397, 3, 2, 2,
	2, 20, 408, 3, 2, 2, 2, 22, 424, 3, 2, 2, 2, 24, 450, 3, 2, 2, 2, 26, 464,
	3, 2, 2, 2, 28, 490, 3, 2, 2, 2, 30, 512, 3, 2, 2, 2, 32, 514, 3, 2, 2,
	2, 34, 518, 3, 2, 2, 2, 36, 542, 3, 2, 2, 2, 38, 572, 3, 2, 2, 2, 40, 588,
	3, 2, 2, 2, 42, 613, 3, 2, 2, 2, 44, 622, 3, 2, 2, 2, 46, 631, 3, 2, 2,
	2, 48, 652, 3, 2, 2, 2, 50, 655, 3, 2, 2, 2, 52, 675, 3, 2, 2, 2, 54, 678,
	3, 2, 2, 2, 56, 695, 3, 2, 2, 2, 58, 718, 3, 2, 2, 2, 60, 722, 3, 2, 2,
	2, 62, 736, 3, 2, 2, 2, 64, 750, 3, 2, 2, 2, 66, 762, 3, 2, 2, 2, 68, 790,
	3, 2, 2, 2, 70, 792, 3, 2, 2, 2, 72, 801, 3, 2, 2, 2, 74, 817, 3, 2, 2,
	2, 76, 830, 3, 2, 2, 2, 78, 851, 3, 2, 2, 2, 80, 853, 3, 2, 2, 2, 82, 863,
	3, 2, 2, 2, 84, 874, 3, 2, 2, 2, 86, 884, 3, 2, 2, 2, 88, 897, 3, 2, 2,
	2, 90, 916, 3, 2, 2, 2, 92, 928, 3, 2, 2, 2, 94, 939, 3, 2, 2, 2, 96, 943,
	3, 2, 2, 2, 98, 981, 3, 2, 2, 2, 100, 983, 3, 2, 2, 2, 102, 997, 3, 2,
	2, 2, 104, 1008, 3, 2, 2, 2, 106, 1018, 3, 2, 2, 2, 108, 1040, 3, 2, 2,
	2, 110, 1042, 3, 2, 2, 2, 112, 1053, 3, 2, 2, 2, 114, 1058, 3, 2, 2, 2,
	116, 1066, 3, 2, 2, 2, 118, 1071, 3, 2, 2, 2, 120, 1084, 3, 2, 2, 2, 122,
	1106, 3, 2, 2, 2, 124, 1150, 3, 2, 2, 2, 126, 1164, 3, 2, 2, 2, 128, 1178,
	3, 2, 2, 2, 130, 1187, 3, 2, 2, 2, 132, 1191, 3, 2, 2, 2, 134, 1200, 3,
	2, 2, 2, 136, 1209, 3, 2, 2, 2, 138, 1227, 3, 2, 2, 2, 140, 1231, 3, 2,
	2, 2, 142, 1239, 3, 2, 2, 2, 144, 1247, 3, 2, 2, 2, 146, 1258, 3, 2, 2,
	2, 148, 1268, 3, 2, 2, 2, 150, 1283, 3, 2, 2, 2, 152, 1292, 3, 2, 2, 2,
	154, 1297, 3, 2, 2, 2, 156, 1306, 3, 2, 2, 2, 158, 1310, 3, 2, 2, 2, 160,
	1319, 3, 2, 2, 2, 162, 1332, 3, 2, 2, 2, 164, 1341, 3, 2, 2, 2, 166, 1344,
	3, 2, 2, 2, 168, 1356, 3, 2, 2, 2, 170, 1372, 3, 2, 2, 2, 172, 1384, 3,
	2, 2, 2, 174, 1392, 3, 2, 2, 2, 176, 1394, 3, 2, 2, 2, 178, 1398, 3, 2,
	2, 2, 180, 1401, 3, 2, 2, 2, 182, 1411, 3, 2, 2, 2, 184, 1416, 3, 2, 2,
	2, 186, 1428, 3, 2, 2, 2, 188, 1440, 3, 2, 2, 2, 190, 1445, 3, 2, 2, 2,
	192, 1490, 3, 2, 2, 2, 194, 1492, 3, 2, 2, 2, 196, 1501, 3, 2, 2, 2, 198,
	1503, 3, 2, 2, 2, 200, 1515, 3, 2, 2, 2, 202, 1519, 3, 2, 2, 2, 204, 1537,
	3, 2, 2, 2, 206, 1549, 3, 2, 2, 2, 208, 1552, 3, 2, 2, 2, 210, 1555, 3,
	2, 2, 2, 212, 1575, 3, 2, 2, 2, 214, 1585, 3, 2, 2, 2, 216, 1587, 3, 2,
	2, 2, 218, 1589, 3, 2, 2, 2, 220, 1591, 3, 2, 2, 2, 222, 1597, 3, 2, 2,
	2, 224, 1608, 3, 2, 2, 2, 226, 1610, 3, 2, 2, 2, 228, 1615, 3, 2, 2, 2,
	230, 1629, 3, 2, 2, 2, 232, 1631, 3, 2, 2, 2, 234, 1636, 3, 2, 2, 2, 236,
	1642, 3, 2, 2, 2, 238, 1644, 3, 2, 2, 2, 240, 1655, 3, 2, 2, 2, 242, 1660,
	3, 2, 2, 2, 244, 1664, 3, 2, 2, 2, 246, 1668, 3, 2, 2, 2, 248, 1673, 3,
	2, 2, 2, 250, 1678, 3, 2, 2, 2, 252, 1682, 3, 2, 2, 2, 254, 1692, 3, 2,
	2, 2, 256, 1695, 3, 2, 2, 2, 258, 1724, 3, 2, 2, 2, 260, 1726, 3, 2, 2,
	2, 262, 1731, 3, 2, 2, 2, 264, 1733, 3, 2, 2, 2, 266, 1736, 3, 2, 2, 2,
	268, 1740, 3, 2, 2, 2, 270, 1744, 3, 2, 2, 2, 272, 1748, 3, 2, 2, 2, 274,
	1752, 3, 2, 2, 2, 276, 1756, 3, 2, 2, 2, 278, 1760, 3, 2, 2, 2, 280, 1763,
	3, 2, 2, 2, 282, 1771, 3, 2, 2, 2, 284, 1773, 3, 2, 2, 2, 286, 1775, 3,
	2, 2, 2, 288, 1782, 3, 2, 2, 2, 290, 1792, 3, 2, 2, 2, 292, 1797, 3, 2,
	2, 2, 294, 1799, 3, 2, 2, 2, 296, 1801, 3, 2, 2, 2, 298, 1811, 3, 2, 2,
	2, 300, 302, 5, 4, 3, 2, 301, 300, 3, 2, 2, 2, 302, 303, 3, 2, 2, 2, 303,
	301, 3, 2, 2, 2, 303, 304, 3, 2, 2, 2, 304, 3, 3, 2, 2, 2, 305, 307, 7,
	91, 2, 2, 306, 305, 3, 2, 2, 2, 307, 310, 3, 2, 2, 2, 308, 306, 3, 2, 2,
	2, 308, 309, 3, 2, 2, 2, 309, 312, 3, 2, 2, 2, 310, 308, 3, 2, 2, 2, 311,
	313, 5, 130, 66, 2, 312, 311, 3, 2, 2, 2, 312, 313, 3, 2, 2, 2, 313, 314,
	3, 2, 2, 2, 314, 318, 5, 6, 4, 2, 315, 317, 7, 91, 2, 2, 316, 315, 3, 2,
	2, 2, 317, 320, 3, 2, 2, 2, 318, 316, 3, 2, 2, 2, 318, 319, 3, 2, 2, 2,
	319, 324, 3, 2, 2, 2, 320, 318, 3, 2, 2, 2, 321, 323, 5, 10, 6, 2, 322,
	321, 3, 2, 2, 2, 323, 326, 3, 2, 2, 2, 324, 322, 3, 2, 2, 2, 324, 325,
	3, 2, 2, 2, 325, 5, 3, 2, 2, 2, 326, 324, 3, 2, 2, 2, 327, 328, 7, 83,
	2, 2, 328, 333, 5, 288, 145, 2, 329, 332, 5, 8, 5, 2, 330, 332, 7, 91,
	2, 2, 331, 329, 3, 2, 2, 2, 331, 330, 3, 2, 2, 2, 332, 335, 3, 2, 2, 2,
	333, 331, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 336, 3, 2, 2, 2, 335,
	333, 3, 2, 2, 2, 336, 337, 5, 290, 146, 2, 337, 338, 5, 284, 143, 2, 338,
	7, 3, 2, 2, 2, 339, 341, 5, 130, 66, 2, 340, 339, 3, 2, 2, 2, 340, 341,
	3, 2, 2, 2, 341, 342, 3, 2, 2, 2, 342, 347, 7, 83, 2, 2, 343, 345, 5, 280,
	141, 2, 344, 346, 5, 276, 139, 2, 345, 344, 3, 2, 2, 2, 345, 346, 3, 2,
	2, 2, 346, 348, 3, 2, 2, 2, 347, 343, 3, 2, 2, 2, 347, 348, 3, 2, 2, 2,
	348, 349, 3, 2, 2, 2, 349, 350, 5, 284, 143, 2, 350, 9, 3, 2, 2, 2, 351,
	364, 5, 20, 11, 2, 352, 364, 5, 22, 12, 2, 353, 364, 5, 26, 14, 2, 354,
	364, 5, 24, 13, 2, 355, 364, 5, 28, 15, 2, 356, 364, 5, 46, 24, 2, 357,
	364, 5, 36, 19, 2, 358, 364, 5, 34, 18, 2, 359, 364, 5, 16, 9, 2, 360,
	364, 5, 12, 7, 2, 361, 364, 5, 14, 8, 2, 362, 364, 7, 91, 2, 2, 363, 351,
	3, 2, 2, 2, 363, 352, 3, 2, 2, 2, 363, 353, 3, 2, 2, 2, 363, 354, 3, 2,
	2, 2, 363, 355, 3, 2, 2, 2, 363, 356, 3, 2, 2, 2, 363, 357, 3, 2, 2, 2,
	363, 358, 3, 2, 2, 2, 363, 359, 3, 2, 2, 2, 363, 360, 3, 2, 2, 2, 363,
	361, 3, 2, 2, 2, 363, 362, 3, 2, 2, 2, 364, 11, 3, 2, 2, 2, 365, 366, 5,
	280, 141, 2, 366, 367, 7, 35, 2, 2, 367, 368, 5, 236, 119, 2, 368, 369,
	5, 284, 143, 2, 369, 13, 3, 2, 2, 2, 370, 371, 5, 280, 141, 2, 371, 372,
	7, 36, 2, 2, 372, 373, 5, 236, 119, 2, 373, 374, 5, 284, 143, 2, 374, 15,
	3, 2, 2, 2, 375, 377, 5, 130, 66, 2, 376, 375, 3, 2, 2, 2, 376, 377, 3,
	2, 2, 2, 377, 378, 3, 2, 2, 2, 378, 379, 5, 280, 141, 2, 379, 383, 7, 36,
	2, 2, 380, 382, 7, 91, 2, 2, 381, 380, 3, 2, 2, 2, 382, 385, 3, 2, 2, 2,
	383, 381, 3, 2, 2, 2, 383, 384, 3, 2, 2, 2, 384, 386, 3, 2, 2, 2, 385,
	383, 3, 2, 2, 2, 386, 387, 5, 236, 119, 2, 387, 391, 5, 296, 149, 2, 388,
	390, 5, 18, 10, 2, 389, 388, 3, 2, 2, 2, 390, 393, 3, 2, 2, 2, 391, 389,
	3, 2, 2, 2, 391, 392, 3, 2, 2, 2, 392, 394, 3, 2, 2, 2, 393, 391, 3, 2,
	2, 2, 394, 395, 5, 298, 150, 2, 395, 396, 5, 284, 143, 2, 396, 17, 3, 2,
	2, 2, 397, 403, 5, 280, 141, 2, 398, 400, 7, 40, 2, 2, 399, 401, 5, 270,
	136, 2, 400, 399, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 402, 3, 2, 2,
	2, 402, 404, 5, 228, 115, 2, 403, 398, 3, 2, 2, 2, 403, 404, 3, 2, 2, 2,
	404, 405, 3, 2, 2, 2, 405, 406, 5, 284, 143, 2, 406, 19, 3, 2, 2, 2, 407,
	409, 5, 130, 66, 2, 408, 407, 3, 2, 2, 2, 408, 409, 3, 2, 2, 2, 409, 410,
	3, 2, 2, 2, 410, 419, 5, 280, 141, 2, 411, 412, 7, 26, 2, 2, 412, 420,
	5, 122, 62, 2, 413, 414, 7, 51, 2, 2, 414, 417, 5, 236, 119, 2, 415, 416,
	7, 40, 2, 2, 416, 418, 5, 122, 62, 2, 417, 415, 3, 2, 2, 2, 417, 418, 3,
	2, 2, 2, 418, 420, 3, 2, 2, 2, 419, 411, 3, 2, 2, 2, 419, 413, 3, 2, 2,
	2, 420, 421, 3, 2, 2, 2, 421, 422, 5, 284, 143, 2, 422, 21, 3, 2, 2, 2,
	423, 425, 5, 130, 66, 2, 424, 423, 3, 2, 2, 2, 424, 425, 3, 2, 2, 2, 425,
	426, 3, 2, 2, 2, 426, 427, 5, 280, 141, 2, 427, 428, 5, 292, 147, 2, 428,
	437, 5, 294, 148, 2, 429, 430, 7, 26, 2, 2, 430, 438, 5, 122, 62, 2, 431,
	432, 7, 51, 2, 2, 432, 435, 5, 236, 119, 2, 433, 434, 7, 40, 2, 2, 434,
	436, 5, 122, 62, 2, 435, 433, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436, 438,
	3, 2, 2, 2, 437, 429, 3, 2, 2, 2, 437, 431, 3, 2, 2, 2, 438, 445, 3, 2,
	2, 2, 439, 441, 7, 36, 2, 2, 440, 442, 5, 42, 22, 2, 441, 440, 3, 2, 2,
	2, 442, 443, 3, 2, 2, 2, 443, 441, 3, 2, 2, 2, 443, 444, 3, 2, 2, 2, 444,
	446, 3, 2, 2, 2, 445, 439, 3, 2, 2, 2, 445, 446, 3, 2, 2, 2, 446, 447,
	3, 2, 2, 2, 447, 448, 5, 284, 143, 2, 448, 23, 3, 2, 2, 2, 449, 451, 5,
	130, 66, 2, 450, 449, 3, 2, 2, 2, 450, 451, 3, 2, 2, 2, 451, 452, 3, 2,
	2, 2, 452, 458, 5, 280, 141, 2, 453, 454, 7, 51, 2, 2, 454, 455, 5, 236,
	119, 2, 455, 456, 7, 51, 2, 2, 456, 459, 3, 2, 2, 2, 457, 459, 7, 50, 2,
	2, 458, 453, 3, 2, 2, 2, 458, 457, 3, 2, 2, 2, 459, 460, 3, 2, 2, 2, 460,
	461, 5, 122, 62, 2, 461, 462, 5, 284, 143, 2, 462, 25, 3, 2, 2, 2, 463,
	465, 5, 130, 66, 2, 464, 463, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466,
	3, 2, 2, 2, 466, 468, 5, 280, 141, 2, 467, 469, 5, 186, 94, 2, 468, 467,
	3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 470, 3, 2, 2, 2, 470, 471, 5, 60,
	31, 2, 471, 475, 9, 2, 2, 2, 472, 474, 7, 91, 2, 2, 473, 472, 3, 2, 2,
	2, 474, 477, 3, 2, 2, 2, 475, 473, 3, 2, 2, 2, 475, 476, 3, 2, 2, 2, 476,
	478, 3, 2, 2, 2, 477, 475, 3, 2, 2, 2, 478, 479, 5, 62, 32, 2, 479, 483,
	5, 288, 145, 2, 480, 482, 5, 68, 35, 2, 481, 480, 3, 2, 2, 2, 482, 485,
	3, 2, 2, 2, 483, 481, 3, 2, 2, 2, 483, 484, 3, 2, 2, 2, 484, 486, 3, 2,
	2, 2, 485, 483, 3, 2, 2, 2, 486, 487, 5, 290, 146, 2, 487, 488, 5, 284,
	143, 2, 488, 27, 3, 2, 2, 2, 489, 491, 5, 130, 66, 2, 490, 489, 3, 2, 2,
	2, 490, 491, 3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 494, 5, 280, 141, 2,
	493, 495, 5, 186, 94, 2, 494, 493, 3, 2, 2, 2, 494, 495, 3, 2, 2, 2, 495,
	496, 3, 2, 2, 2, 496, 497, 7, 36, 2, 2, 497, 501, 5, 288, 145, 2, 498,
	500, 5, 30, 16, 2, 499, 498, 3, 2, 2, 2, 500, 503, 3, 2, 2, 2, 501, 499,
	3, 2, 2, 2, 501, 502, 3, 2, 2, 2, 502, 504, 3, 2, 2, 2, 503, 501, 3, 2,
	2, 2, 504, 505, 5, 290, 146, 2, 505, 506, 5, 284, 143, 2, 506, 29, 3, 2,
	2, 2, 507, 513, 5, 32, 17, 2, 508, 513, 5, 38, 20, 2, 509, 513, 5, 40,
	21, 2, 510, 513, 5, 44, 23, 2, 511, 513, 7, 91, 2, 2, 512, 507, 3, 2, 2,
	2, 512, 508, 3, 2, 2, 2, 512, 509, 3, 2, 2, 2, 512, 510, 3, 2, 2, 2, 512,
	511, 3, 2, 2, 2, 513, 31, 3, 2, 2, 2, 514, 515, 5, 236, 119, 2, 515, 516,
	5, 284, 143, 2, 516, 33, 3, 2, 2, 2, 517, 519, 5, 130, 66, 2, 518, 517,
	3, 2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 520, 3, 2, 2, 2, 520, 521, 5, 64,
	33, 2, 521, 522, 7, 41, 2, 2, 522, 523, 7, 42, 2, 2, 523, 530, 5, 60, 31,
	2, 524, 526, 5, 292, 147, 2, 525, 527, 5, 128, 65, 2, 526, 525, 3, 2, 2,
	2, 526, 527, 3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528, 529, 5, 294, 148, 2,
	529, 531, 3, 2, 2, 2, 530, 524, 3, 2, 2, 2, 530, 531, 3, 2, 2, 2, 531,
	532, 3, 2, 2, 2, 532, 536, 5, 288, 145, 2, 533, 535, 5, 68, 35, 2, 534,
	533, 3, 2, 2, 2, 535, 538, 3, 2, 2, 2, 536, 534, 3, 2, 2, 2, 536, 537,
	3, 2, 2, 2, 537, 539, 3, 2, 2, 2, 538, 536, 3, 2, 2, 2, 539, 540, 5, 290,
	146, 2, 540, 35, 3, 2, 2, 2, 541, 543, 5, 130, 66, 2, 542, 541, 3, 2, 2,
	2, 542, 543, 3, 2, 2, 2, 543, 544, 3, 2, 2, 2, 544, 546, 5, 64, 33, 2,
	545, 547, 7, 87, 2, 2, 546, 545, 3, 2, 2, 2, 546, 547, 3, 2, 2, 2, 547,
	548, 3, 2, 2, 2, 548, 550, 5, 280, 141, 2, 549, 551, 5, 186, 94, 2, 550,
	549, 3, 2, 2, 2, 550, 551, 3, 2, 2, 2, 551, 552, 3, 2, 2, 2, 552, 553,
	5, 60, 31, 2, 553, 557, 9, 2, 2, 2, 554, 556, 7, 91, 2, 2, 555, 554, 3,
	2, 2, 2, 556, 559, 3, 2, 2, 2, 557, 555, 3, 2, 2, 2, 557, 558, 3, 2, 2,
	2, 558, 560, 3, 2, 2, 2, 559, 557, 3, 2, 2, 2, 560, 561, 5, 62, 32, 2,
	561, 565, 5, 288, 145, 2, 562, 564, 5, 68, 35, 2, 563, 562, 3, 2, 2, 2,
	564, 567, 3, 2, 2, 2, 565, 563, 3, 2, 2, 2, 565, 566, 3, 2, 2, 2, 566,
	568, 3, 2, 2, 2, 567, 565, 3, 2, 2, 2, 568, 569, 5, 290, 146, 2, 569, 570,
	5, 284, 143, 2, 570, 37, 3, 2, 2, 2, 571, 573, 5, 130, 66, 2, 572, 571,
	3, 2, 2, 2, 572, 573, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 583, 5, 280,
	141, 2, 575, 576, 7, 26, 2, 2, 576, 584, 5, 122, 62, 2, 577, 578, 7, 51,
	2, 2, 578, 581, 5, 236, 119, 2, 579, 580, 7, 40, 2, 2, 580, 582, 5, 122,
	62, 2, 581, 579, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2, 582, 584, 3, 2, 2, 2,
	583, 575, 3, 2, 2, 2, 583, 577, 3, 2, 2, 2, 584, 585, 3, 2, 2, 2, 585,
	586, 5, 284, 143, 2, 586, 39, 3, 2, 2, 2, 587, 589, 5, 130, 66, 2, 588,
	587, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 590, 3, 2, 2, 2, 590, 591,
	5, 280, 141, 2, 591, 592, 5, 292, 147, 2, 592, 601, 5, 294, 148, 2, 593,
	594, 7, 26, 2, 2, 594, 602, 5, 122, 62, 2, 595, 596, 7, 51, 2, 2, 596,
	599, 5, 236, 119, 2, 597, 598, 7, 40, 2, 2, 598, 600, 5, 122, 62, 2, 599,
	597, 3, 2, 2, 2, 599, 600, 3, 2, 2, 2, 600, 602, 3, 2, 2, 2, 601, 593,
	3, 2, 2, 2, 601, 595, 3, 2, 2, 2, 602, 609, 3, 2, 2, 2, 603, 605, 7, 36,
	2, 2, 604, 606, 5, 42, 22, 2, 605, 604, 3, 2, 2, 2, 606, 607, 3, 2, 2,
	2, 607, 605, 3, 2, 2, 2, 607, 608, 3, 2, 2, 2, 608, 610, 3, 2, 2, 2, 609,
	603, 3, 2, 2, 2, 609, 610, 3, 2, 2, 2, 610, 611, 3, 2, 2, 2, 611, 612,
	5, 284, 143, 2, 612, 41, 3, 2, 2, 2, 613, 614, 5, 280, 141, 2, 614, 616,
	5, 288, 145, 2, 615, 617, 5, 68, 35, 2, 616, 615, 3, 2, 2, 2, 617, 618,
	3, 2, 2, 2, 618, 616, 3, 2, 2, 2, 618, 619, 3, 2, 2, 2, 619, 620, 3, 2,
	2, 2, 620, 621, 5, 290, 146, 2, 621, 43, 3, 2, 2, 2, 622, 623, 5, 280,
	141, 2, 623, 624, 7, 51, 2, 2, 624, 625, 7, 17, 2, 2, 625, 626, 7, 41,
	2, 2, 626, 627, 5, 182, 92, 2, 627, 628, 7, 42, 2, 2, 628, 629, 5, 284,
	143, 2, 629, 45, 3, 2, 2, 2, 630, 632, 5, 130, 66, 2, 631, 630, 3, 2, 2,
	2, 631, 632, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633, 635, 5, 280, 141, 2,
	634, 636, 5, 186, 94, 2, 635, 634, 3, 2, 2, 2, 635, 636, 3, 2, 2, 2, 636,
	637, 3, 2, 2, 2, 637, 638, 7, 37, 2, 2, 638, 642, 5, 288, 145, 2, 639,
	641, 5, 48, 25, 2, 640, 639, 3, 2, 2, 2, 641, 644, 3, 2, 2, 2, 642, 640,
	3, 2, 2, 2, 642, 643, 3, 2, 2, 2, 643, 645, 3, 2, 2, 2, 644, 642, 3, 2,
	2, 2, 645, 646, 5, 290, 146, 2, 646, 647, 5, 284, 143, 2, 647, 47, 3, 2,
	2, 2, 648, 653, 5, 32, 17, 2, 649, 653, 5, 54, 28, 2, 650, 653, 5, 50,
	26, 2, 651, 653, 7, 91, 2, 2, 652, 648, 3, 2, 2, 2, 652, 649, 3, 2, 2,
	2, 652, 650, 3, 2, 2, 2, 652, 651, 3, 2, 2, 2, 653, 49, 3, 2, 2, 2, 654,
	656, 5, 130, 66, 2, 655, 654, 3, 2, 2, 2, 655, 656, 3, 2, 2, 2, 656, 657,
	3, 2, 2, 2, 657, 658, 5, 280, 141, 2, 658, 659, 5, 292, 147, 2, 659, 660,
	5, 294, 148, 2, 660, 661, 7, 51, 2, 2, 661, 671, 5, 236, 119, 2, 662, 663,
	7, 36, 2, 2, 663, 668, 5, 52, 27, 2, 664, 665, 7, 34, 2, 2, 665, 667, 5,
	52, 27, 2, 666, 664, 3, 2, 2, 2, 667, 670, 3, 2, 2, 2, 668, 666, 3, 2,
	2, 2, 668, 669, 3, 2, 2, 2, 669, 672, 3, 2, 2, 2, 670, 668, 3, 2, 2, 2,
	671, 662, 3, 2, 2, 2, 671, 672, 3, 2, 2, 2, 672, 673, 3, 2, 2, 2, 673,
	674, 5, 284, 143, 2, 674, 51, 3, 2, 2, 2, 675, 676, 5, 280, 141, 2, 676,
	53, 3, 2, 2, 2, 677, 679, 5, 130, 66, 2, 678, 677, 3, 2, 2, 2, 678, 679,
	3, 2, 2, 2, 679, 680, 3, 2, 2, 2, 680, 682, 5, 280, 141, 2, 681, 683, 5,
	186, 94, 2, 682, 681, 3, 2, 2, 2, 682, 683, 3, 2, 2, 2, 683, 684, 3, 2,
	2, 2, 684, 685, 5, 60, 31, 2, 685, 689, 9, 2, 2, 2, 686, 688, 7, 91, 2,
	2, 687, 686, 3, 2, 2, 2, 688, 691, 3, 2, 2, 2, 689, 687, 3, 2, 2, 2, 689,
	690, 3, 2, 2, 2, 690, 692, 3, 2, 2, 2, 691, 689, 3, 2, 2, 2, 692, 693,
	5, 62, 32, 2, 693, 694, 5, 284, 143, 2, 694, 55, 3, 2, 2, 2, 695, 697,
	5, 280, 141, 2, 696, 698, 5, 186, 94, 2, 697, 696, 3, 2, 2, 2, 697, 698,
	3, 2, 2, 2, 698, 699, 3, 2, 2, 2, 699, 700, 5, 60, 31, 2, 700, 704, 9,
	2, 2, 2, 701, 703, 7, 91, 2, 2, 702, 701, 3, 2, 2, 2, 703, 706, 3, 2, 2,
	2, 704, 702, 3, 2, 2, 2, 704, 705, 3, 2, 2, 2, 705, 707, 3, 2, 2, 2, 706,
	704, 3, 2, 2, 2, 707, 708, 5, 62, 32, 2, 708, 712, 5, 288, 145, 2, 709,
	711, 5, 68, 35, 2, 710, 709, 3, 2, 2, 2, 711, 714, 3, 2, 2, 2, 712, 710,
	3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 715, 3, 2, 2, 2, 714, 712, 3, 2,
	2, 2, 715, 716, 5, 290, 146, 2, 716, 717, 5, 284, 143, 2, 717, 57, 3, 2,
	2, 2, 718, 719, 7, 37, 2, 2, 719, 720, 5, 126, 64, 2, 720, 721, 5, 284,
	143, 2, 721, 59, 3, 2, 2, 2, 722, 724, 5, 292, 147, 2, 723, 725, 5, 66,
	34, 2, 724, 723, 3, 2, 2, 2, 724, 725, 3, 2, 2, 2, 725, 731, 3, 2, 2, 2,
	726, 727, 5, 286, 144, 2, 727, 728, 5, 66, 34, 2, 728, 730, 3, 2, 2, 2,
	729, 726, 3, 2, 2, 2, 730, 733, 3, 2, 2, 2, 731, 729, 3, 2, 2, 2, 731,
	732, 3, 2, 2, 2, 732, 734, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 734, 735,
	5, 294, 148, 2, 735, 61, 3, 2, 2, 2, 736, 738, 5, 292, 147, 2, 737, 739,
	5, 66, 34, 2, 738, 737, 3, 2, 2, 2, 738, 739, 3, 2, 2, 2, 739, 745, 3,
	2, 2, 2, 740, 741, 5, 286, 144, 2, 741, 742, 5, 66, 34, 2, 742, 744, 3,
	2, 2, 2, 743, 740, 3, 2, 2, 2, 744, 747, 3, 2, 2, 2, 745, 743, 3, 2, 2,
	2, 745, 746, 3, 2, 2, 2, 746, 748, 3, 2, 2, 2, 747, 745, 3, 2, 2, 2, 748,
	749, 5, 294, 148, 2, 749, 63, 3, 2, 2, 2, 750, 751, 5, 292, 147, 2, 751,
	752, 5, 280, 141, 2, 752, 753, 7, 51, 2, 2, 753, 754, 5, 236, 119, 2, 754,
	759, 5, 294, 148, 2, 755, 756, 5, 292, 147, 2, 756, 757, 5, 280, 141, 2,
	757, 758, 5, 294, 148, 2, 758, 760, 3, 2, 2, 2, 759, 755, 3, 2, 2, 2, 759,
	760, 3, 2, 2, 2, 760, 65, 3, 2, 2, 2, 761, 763, 5, 130, 66, 2, 762, 761,
	3, 2, 2, 2, 762, 763, 3, 2, 2, 2, 763, 764, 3, 2, 2, 2, 764, 765, 5, 280,
	141, 2, 765, 766, 7, 51, 2, 2, 766, 769, 5, 236, 119, 2, 767, 768, 7, 40,
	2, 2, 768, 770, 5, 122, 62, 2, 769, 767, 3, 2, 2, 2, 769, 770, 3, 2, 2,
	2, 770, 67, 3, 2, 2, 2, 771, 791, 5, 58, 30, 2, 772, 791, 5, 70, 36, 2,
	773, 791, 5, 78, 40, 2, 774, 791, 5, 86, 44, 2, 775, 791, 5, 88, 45, 2,
	776, 791, 5, 90, 46, 2, 777, 791, 5, 92, 47, 2, 778, 791, 5, 94, 48, 2,
	779, 791, 5, 96, 49, 2, 780, 791, 5, 100, 51, 2, 781, 791, 5, 98, 50, 2,
	782, 791, 5, 106, 54, 2, 783, 791, 5, 56, 29, 2, 784, 791, 5, 110, 56,
	2, 785, 791, 5, 112, 57, 2, 786, 791, 5, 114, 58, 2, 787, 791, 5, 116,
	59, 2, 788, 791, 5, 118, 60, 2, 789, 791, 7, 91, 2, 2, 790, 771, 3, 2,
	2, 2, 790, 772, 3, 2, 2, 2, 790, 773, 3, 2, 2, 2, 790, 774, 3, 2, 2, 2,
	790, 775, 3, 2, 2, 2, 790, 776, 3, 2, 2, 2, 790, 777, 3, 2, 2, 2, 790,
	778, 3, 2, 2, 2, 790, 779, 3, 2, 2, 2, 790, 780, 3, 2, 2, 2, 790, 781,
	3, 2, 2, 2, 790, 782, 3, 2, 2, 2, 790, 783, 3, 2, 2, 2, 790, 784, 3, 2,
	2, 2, 790, 785, 3, 2, 2, 2, 790, 786, 3, 2, 2, 2, 790, 787, 3, 2, 2, 2,
	790, 788, 3, 2, 2, 2, 790, 789, 3, 2, 2, 2, 791, 69, 3, 2, 2, 2, 792, 793,
	5, 122, 62, 2, 793, 795, 7, 52, 2, 2, 794, 796, 5, 76, 39, 2, 795, 794,
	3, 2, 2, 2, 796, 797, 3, 2, 2, 2, 797, 795, 3, 2, 2, 2, 797, 798, 3, 2,
	2, 2, 798, 799, 3, 2, 2, 2, 799, 800, 5, 284, 143, 2, 800, 71, 3, 2, 2,
	2, 801, 802, 7, 87, 2, 2, 802, 806, 5, 288, 145, 2, 803, 805, 5, 68, 35,
	2, 804, 803, 3, 2, 2, 2, 805, 808, 3, 2, 2, 2, 806, 804, 3, 2, 2, 2, 806,
	807, 3, 2, 2, 2, 807, 809, 3, 2, 2, 2, 808, 806, 3, 2, 2, 2, 809, 810,
	5, 290, 146, 2, 810, 73, 3, 2, 2, 2, 811, 818, 5, 122, 62, 2, 812, 814,
	5, 280, 141, 2, 813, 812, 3, 2, 2, 2, 813, 814, 3, 2, 2, 2, 814, 815, 3,
	2, 2, 2, 815, 816, 7, 51, 2, 2, 816, 818, 5, 236, 119, 2, 817, 811, 3,
	2, 2, 2, 817, 813, 3, 2, 2, 2, 818, 819, 3, 2, 2, 2, 819, 823, 5, 288,
	145, 2, 820, 822, 5, 68, 35, 2, 821, 820, 3, 2, 2, 2, 822, 825, 3, 2, 2,
	2, 823, 821, 3, 2, 2, 2, 823, 824, 3, 2, 2, 2, 824, 826, 3, 2, 2, 2, 825,
	823, 3, 2, 2, 2, 826, 827, 5, 290, 146, 2, 827, 75, 3, 2, 2, 2, 828, 831,
	5, 72, 37, 2, 829, 831, 5, 74, 38, 2, 830, 828, 3, 2, 2, 2, 830, 829, 3,
	2, 2, 2, 831, 77, 3, 2, 2, 2, 832, 836, 5, 82, 42, 2, 833, 835, 5, 84,
	43, 2, 834, 833, 3, 2, 2, 2, 835, 838, 3, 2, 2, 2, 836, 834, 3, 2, 2, 2,
	836, 837, 3, 2, 2, 2, 837, 839, 3, 2, 2, 2, 838, 836, 3, 2, 2, 2, 839,
	840, 5, 80, 41, 2, 840, 841, 5, 284, 143, 2, 841, 852, 3, 2, 2, 2, 842,
	846, 5, 82, 42, 2, 843, 845, 5, 84, 43, 2, 844, 843, 3, 2, 2, 2, 845, 848,
	3, 2, 2, 2, 846, 844, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847, 849, 3, 2,
	2, 2, 848, 846, 3, 2, 2, 2, 849, 850, 5, 284, 143, 2, 850, 852, 3, 2, 2,
	2, 851, 832, 3, 2, 2, 2, 851, 842, 3, 2, 2, 2, 852, 79, 3, 2, 2, 2, 853,
	854, 7, 87, 2, 2, 854, 858, 5, 288, 145, 2, 855, 857, 5, 68, 35, 2, 856,
	855, 3, 2, 2, 2, 857, 860, 3, 2, 2, 2, 858, 856, 3, 2, 2, 2, 858, 859,
	3, 2, 2, 2, 859, 861, 3, 2, 2, 2, 860, 858, 3, 2, 2, 2, 861, 862, 5, 290,
	146, 2, 862, 81, 3, 2, 2, 2, 863, 864, 7, 52, 2, 2, 864, 865, 5, 122, 62,
	2, 865, 869, 5, 288, 145, 2, 866, 868, 5, 68, 35, 2, 867, 866, 3, 2, 2,
	2, 868, 871, 3, 2, 2, 2, 869, 867, 3, 2, 2, 2, 869, 870, 3, 2, 2, 2, 870,
	872, 3, 2, 2, 2, 871, 869, 3, 2, 2, 2, 872, 873, 5, 290, 146, 2, 873, 83,
	3, 2, 2, 2, 874, 875, 5, 122, 62, 2, 875, 879, 5, 288, 145, 2, 876, 878,
	5, 68, 35, 2, 877, 876, 3, 2, 2, 2, 878, 881, 3, 2, 2, 2, 879, 877, 3,
	2, 2, 2, 879, 880, 3, 2, 2, 2, 880, 882, 3, 2, 2, 2, 881, 879, 3, 2, 2,
	2, 882, 883, 5, 290, 146, 2, 883, 85, 3, 2, 2, 2, 884, 885, 5, 108, 55,
	2, 885, 886, 7, 53, 2, 2, 886, 887, 5, 280, 141, 2, 887, 891, 5, 288, 145,
	2, 888, 890, 5, 68, 35, 2, 889, 888, 3, 2, 2, 2, 890, 893, 3, 2, 2, 2,
	891, 889, 3, 2, 2, 2, 891, 892, 3, 2, 2, 2, 892, 894, 3, 2, 2, 2, 893,
	891, 3, 2, 2, 2, 894, 895, 5, 290, 146, 2, 895, 896, 5, 284, 143, 2, 896,
	87, 3, 2, 2, 2, 897, 898, 5, 122, 62, 2, 898, 903, 7, 53, 2, 2, 899, 900,
	7, 48, 2, 2, 900, 901, 5, 280, 141, 2, 901, 902, 7, 49, 2, 2, 902, 904,
	3, 2, 2, 2, 903, 899, 3, 2, 2, 2, 903, 904, 3, 2, 2, 2, 904, 905, 3, 2,
	2, 2, 905, 906, 5, 280, 141, 2, 906, 910, 5, 288, 145, 2, 907, 909, 5,
	68, 35, 2, 908, 907, 3, 2, 2, 2, 909, 912, 3, 2, 2, 2, 910, 908, 3, 2,
	2, 2, 910, 911, 3, 2, 2, 2, 911, 913, 3, 2, 2, 2, 912, 910, 3, 2, 2, 2,
	913, 914, 5, 290, 146, 2, 914, 915, 5, 284, 143, 2, 915, 89, 3, 2, 2, 2,
	916, 917, 7, 53, 2, 2, 917, 918, 5, 122, 62, 2, 918, 922, 5, 288, 145,
	2, 919, 921, 5, 68, 35, 2, 920, 919, 3, 2, 2, 2, 921, 924, 3, 2, 2, 2,
	922, 920, 3, 2, 2, 2, 922, 923, 3, 2, 2, 2, 923, 925, 3, 2, 2, 2, 924,
	922, 3, 2, 2, 2, 925, 926, 5, 290, 146, 2, 926, 927, 5, 284, 143, 2, 927,
	91, 3, 2, 2, 2, 928, 929, 7, 53, 2, 2, 929, 933, 5, 288, 145, 2, 930, 932,
	5, 68, 35, 2, 931, 930, 3, 2, 2, 2, 932, 935, 3, 2, 2, 2, 933, 931, 3,
	2, 2, 2, 933, 934, 3, 2, 2, 2, 934, 936, 3, 2, 2, 2, 935, 933, 3, 2, 2,
	2, 936, 937, 5, 290, 146, 2, 937, 938, 5, 284, 143, 2, 938, 93, 3, 2, 2,
	2, 939, 940, 7, 37, 2, 2, 940, 941, 7, 53, 2, 2, 941, 942, 5, 284, 143,
	2, 942, 95, 3, 2, 2, 2, 943, 944, 7, 36, 2, 2, 944, 945, 7, 53, 2, 2, 945,
	946, 5, 284, 143, 2, 946, 97, 3, 2, 2, 2, 947, 948, 7, 54, 2, 2, 948, 952,
	5, 288, 145, 2, 949, 951, 5, 68, 35, 2, 950, 949, 3, 2, 2, 2, 951, 954,
	3, 2, 2, 2, 952, 950, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 955, 3, 2,
	2, 2, 954, 952, 3, 2, 2, 2, 955, 959, 5, 290, 146, 2, 956, 958, 5, 102,
	52, 2, 957, 956, 3, 2, 2, 2, 958, 961, 3, 2, 2, 2, 959, 957, 3, 2, 2, 2,
	959, 960, 3, 2, 2, 2, 960, 962, 3, 2, 2, 2, 961, 959, 3, 2, 2, 2, 962,
	963, 5, 104, 53, 2, 963, 964, 5, 284, 143, 2, 964, 982, 3, 2, 2, 2, 965,
	966, 7, 54, 2, 2, 966, 970, 5, 288, 145, 2, 967, 969, 5, 68, 35, 2, 968,
	967, 3, 2, 2, 2, 969, 972, 3, 2, 2, 2, 970, 968, 3, 2, 2, 2, 970, 971,
	3, 2, 2, 2, 971, 973, 3, 2, 2, 2, 972, 970, 3, 2, 2, 2, 973, 975, 5, 290,
	146, 2, 974, 976, 5, 102, 52, 2, 975, 974, 3, 2, 2, 2, 976, 977, 3, 2,
	2, 2, 977, 975, 3, 2, 2, 2, 977, 978, 3, 2, 2, 2, 978, 979, 3, 2, 2, 2,
	979, 980, 5, 284, 143, 2, 980, 982, 3, 2, 2, 2, 981, 947, 3, 2, 2, 2, 981,
	965, 3, 2, 2, 2, 982, 99, 3, 2, 2, 2, 983, 984, 5, 122, 62, 2, 984, 985,
	7, 54, 2, 2, 985, 988, 5, 122, 62, 2, 986, 987, 7, 51, 2, 2, 987, 989,
	5, 236, 119, 2, 988, 986, 3, 2, 2, 2, 988, 989, 3, 2, 2, 2, 989, 990, 3,
	2, 2, 2, 990, 991, 5, 284, 143, 2, 991, 101, 3, 2, 2, 2, 992, 998, 5, 280,
	141, 2, 993, 994, 5, 280, 141, 2, 994, 995, 7, 51, 2, 2, 995, 996, 5, 236,
	119, 2, 996, 998, 3, 2, 2, 2, 997, 992, 3, 2, 2, 2, 997, 993, 3, 2, 2,
	2, 998, 999, 3, 2, 2, 2, 999, 1003, 5, 288, 145, 2, 1000, 1002, 5, 68,
	35, 2, 1001, 1000, 3, 2, 2, 2, 1002, 1005, 3, 2, 2, 2, 1003, 1001, 3, 2,
	2, 2, 1003, 1004, 3, 2, 2, 2, 1004, 1006, 3, 2, 2, 2, 1005, 1003, 3, 2,
	2, 2, 1006, 1007, 5, 290, 146, 2, 1007, 103, 3, 2, 2, 2, 1008, 1009, 7,
	87, 2, 2, 1009, 1013, 5, 288, 145, 2, 1010, 1012, 5, 68, 35, 2, 1011, 1010,
	3, 2, 2, 2, 1012, 1015, 3, 2, 2, 2, 1013, 1011, 3, 2, 2, 2, 1013, 1014,
	3, 2, 2, 2, 1014, 1016, 3, 2, 2, 2, 1015, 1013, 3, 2, 2, 2, 1016, 1017,
	5, 290, 146, 2, 1017, 105, 3, 2, 2, 2, 1018, 1019, 7, 54, 2, 2, 1019, 1021,
	5, 292, 147, 2, 1020, 1022, 5, 122, 62, 2, 1021, 1020, 3, 2, 2, 2, 1021,
	1022, 3, 2, 2, 2, 1022, 1023, 3, 2, 2, 2, 1023, 1024, 5, 294, 148, 2, 1024,
	1025, 5, 284, 143, 2, 1025, 107, 3, 2, 2, 2, 1026, 1027, 7, 48, 2, 2, 1027,
	1028, 5, 122, 62, 2, 1028, 1029, 9, 3, 2, 2, 1029, 1030, 5, 122, 62, 2,
	1030, 1031, 5, 286, 144, 2, 1031, 1032, 5, 122, 62, 2, 1032, 1033, 7, 49,
	2, 2, 1033, 1041, 3, 2, 2, 2, 1034, 1035, 7, 48, 2, 2, 1035, 1036, 5, 122,
	62, 2, 1036, 1037, 9, 3, 2, 2, 1037, 1038, 5, 122, 62, 2, 1038, 1039, 7,
	49, 2, 2, 1039, 1041, 3, 2, 2, 2, 1040, 1026, 3, 2, 2, 2, 1040, 1034, 3,
	2, 2, 2, 1041, 109, 3, 2, 2, 2, 1042, 1048, 5, 122, 62, 2, 1043, 1049,
	7, 26, 2, 2, 1044, 1045, 7, 51, 2, 2, 1045, 1046, 5, 236, 119, 2, 1046,
	1047, 7, 40, 2, 2, 1047, 1049, 3, 2, 2, 2, 1048, 1043, 3, 2, 2, 2, 1048,
	1044, 3, 2, 2, 2, 1049, 1050, 3, 2, 2, 2, 1050, 1051, 5, 122, 62, 2, 1051,
	1052, 5, 284, 143, 2, 1052, 111, 3, 2, 2, 2, 1053, 1054, 5, 122, 62, 2,
	1054, 1055, 7, 51, 2, 2, 1055, 1056, 5, 236, 119, 2, 1056, 1057, 5, 284,
	143, 2, 1057, 113, 3, 2, 2, 2, 1058, 1059, 5, 122, 62, 2, 1059, 1060, 7,
	48, 2, 2, 1060, 1061, 7, 37, 2, 2, 1061, 1062, 7, 49, 2, 2, 1062, 1063,
	5, 268, 135, 2, 1063, 1064, 5, 122, 62, 2, 1064, 1065, 5, 284, 143, 2,
	1065, 115, 3, 2, 2, 2, 1066, 1067, 5, 122, 62, 2, 1067, 1068, 5, 268, 135,
	2, 1068, 1069, 5, 122, 62, 2, 1069, 1070, 5, 284, 143, 2, 1070, 117, 3,
	2, 2, 2, 1071, 1072, 5, 122, 62, 2, 1072, 1073, 5, 284, 143, 2, 1073, 119,
	3, 2, 2, 2, 1074, 1076, 5, 280, 141, 2, 1075, 1077, 5, 190, 96, 2, 1076,
	1075, 3, 2, 2, 2, 1076, 1077, 3, 2, 2, 2, 1077, 1085, 3, 2, 2, 2, 1078,
	1085, 7, 87, 2, 2, 1079, 1080, 5, 292, 147, 2, 1080, 1081, 5, 122, 62,
	2, 1081, 1082, 5, 294, 148, 2, 1082, 1085, 3, 2, 2, 2, 1083, 1085, 5, 224,
	113, 2, 1084, 1074, 3, 2, 2, 2, 1084, 1078, 3, 2, 2, 2, 1084, 1079, 3,
	2, 2, 2, 1084, 1083, 3, 2, 2, 2, 1085, 121, 3, 2, 2, 2, 1086, 1087, 8,
	62, 1, 2, 1087, 1107, 5, 210, 106, 2, 1088, 1107, 5, 140, 71, 2, 1089,
	1107, 5, 120, 61, 2, 1090, 1107, 5, 142, 72, 2, 1091, 1107, 5, 144, 73,
	2, 1092, 1107, 5, 148, 75, 2, 1093, 1107, 5, 146, 74, 2, 1094, 1107, 5,
	150, 76, 2, 1095, 1107, 5, 164, 83, 2, 1096, 1107, 5, 166, 84, 2, 1097,
	1107, 5, 168, 85, 2, 1098, 1107, 5, 170, 86, 2, 1099, 1107, 5, 192, 97,
	2, 1100, 1107, 5, 202, 102, 2, 1101, 1107, 5, 196, 99, 2, 1102, 1107, 5,
	204, 103, 2, 1103, 1107, 5, 206, 104, 2, 1104, 1107, 5, 208, 105, 2, 1105,
	1107, 5, 220, 111, 2, 1106, 1086, 3, 2, 2, 2, 1106, 1088, 3, 2, 2, 2, 1106,
	1089, 3, 2, 2, 2, 1106, 1090, 3, 2, 2, 2, 1106, 1091, 3, 2, 2, 2, 1106,
	1092, 3, 2, 2, 2, 1106, 1093, 3, 2, 2, 2, 1106, 1094, 3, 2, 2, 2, 1106,
	1095, 3, 2, 2, 2, 1106, 1096, 3, 2, 2, 2, 1106, 1097, 3, 2, 2, 2, 1106,
	1098, 3, 2, 2, 2, 1106, 1099, 3, 2, 2, 2, 1106, 1100, 3, 2, 2, 2, 1106,
	1101, 3, 2, 2, 2, 1106, 1102, 3, 2, 2, 2, 1106, 1103, 3, 2, 2, 2, 1106,
	1104, 3, 2, 2, 2, 1106, 1105, 3, 2, 2, 2, 1107, 1142, 3, 2, 2, 2, 1108,
	1109, 12, 7, 2, 2, 1109, 1110, 5, 266, 134, 2, 1110, 1111, 5, 122, 62,
	8, 1111, 1141, 3, 2, 2, 2, 1112, 1113, 12, 6, 2, 2, 1113, 1114, 5, 270,
	136, 2, 1114, 1115, 5, 122, 62, 7, 1115, 1141, 3, 2, 2, 2, 1116, 1117,
	12, 5, 2, 2, 1117, 1118, 5, 272, 137, 2, 1118, 1119, 5, 122, 62, 6, 1119,
	1141, 3, 2, 2, 2, 1120, 1121, 12, 4, 2, 2, 1121, 1122, 5, 274, 138, 2,
	1122, 1123, 5, 122, 62, 5, 1123, 1141, 3, 2, 2, 2, 1124, 1125, 12, 13,
	2, 2, 1125, 1141, 7, 54, 2, 2, 1126, 1127, 12, 12, 2, 2, 1127, 1141, 7,
	52, 2, 2, 1128, 1129, 12, 11, 2, 2, 1129, 1141, 7, 39, 2, 2, 1130, 1131,
	12, 10, 2, 2, 1131, 1141, 5, 152, 77, 2, 1132, 1133, 12, 9, 2, 2, 1133,
	1134, 5, 276, 139, 2, 1134, 1135, 5, 124, 63, 2, 1135, 1141, 3, 2, 2, 2,
	1136, 1137, 12, 8, 2, 2, 1137, 1138, 5, 264, 133, 2, 1138, 1139, 5, 236,
	119, 2, 1139, 1141, 3, 2, 2, 2, 1140, 1108, 3, 2, 2, 2, 1140, 1112, 3,
	2, 2, 2, 1140, 1116, 3, 2, 2, 2, 1140, 1120, 3, 2, 2, 2, 1140, 1124, 3,
	2, 2, 2, 1140, 1126, 3, 2, 2, 2, 1140, 1128, 3, 2, 2, 2, 1140, 1130, 3,
	2, 2, 2, 1140, 1132, 3, 2, 2, 2, 1140, 1136, 3, 2, 2, 2, 1141, 1144, 3,
	2, 2, 2, 1142, 1140, 3, 2, 2, 2, 1142, 1143, 3, 2, 2, 2, 1143, 123, 3,
	2, 2, 2, 1144, 1142, 3, 2, 2, 2, 1145, 1146, 8, 63, 1, 2, 1146, 1151, 5,
	144, 73, 2, 1147, 1151, 5, 140, 71, 2, 1148, 1151, 5, 146, 74, 2, 1149,
	1151, 5, 280, 141, 2, 1150, 1145, 3, 2, 2, 2, 1150, 1147, 3, 2, 2, 2, 1150,
	1148, 3, 2, 2, 2, 1150, 1149, 3, 2, 2, 2, 1151, 1161, 3, 2, 2, 2, 1152,
	1153, 12, 3, 2, 2, 1153, 1155, 5, 276, 139, 2, 1154, 1156, 7, 91, 2, 2,
	1155, 1154, 3, 2, 2, 2, 1155, 1156, 3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2,
	1157, 1158, 5, 124, 63, 4, 1158, 1160, 3, 2, 2, 2, 1159, 1152, 3, 2, 2,
	2, 1160, 1163, 3, 2, 2, 2, 1161, 1159, 3, 2, 2, 2, 1161, 1162, 3, 2, 2,
	2, 1162, 125, 3, 2, 2, 2, 1163, 1161, 3, 2, 2, 2, 1164, 1174, 5, 292, 147,
	2, 1165, 1171, 5, 122, 62, 2, 1166, 1167, 5, 286, 144, 2, 1167, 1168, 5,
	122, 62, 2, 1168, 1170, 3, 2, 2, 2, 1169, 1166, 3, 2, 2, 2, 1170, 1173,
	3, 2, 2, 2, 1171, 1169, 3, 2, 2, 2, 1171, 1172, 3, 2, 2, 2, 1172, 1175,
	3, 2, 2, 2, 1173, 1171, 3, 2, 2, 2, 1174, 1165, 3, 2, 2, 2, 1174, 1175,
	3, 2, 2, 2, 1175, 1176, 3, 2, 2, 2, 1176, 1177, 5, 294, 148, 2, 1177, 127,
	3, 2, 2, 2, 1178, 1184, 5, 122, 62, 2, 1179, 1180, 5, 286, 144, 2, 1180,
	1181, 5, 122, 62, 2, 1181, 1183, 3, 2, 2, 2, 1182, 1179, 3, 2, 2, 2, 1183,
	1186, 3, 2, 2, 2, 1184, 1182, 3, 2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185,
	129, 3, 2, 2, 2, 1186, 1184, 3, 2, 2, 2, 1187, 1189, 5, 132, 67, 2, 1188,
	1190, 7, 91, 2, 2, 1189, 1188, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190,
	131, 3, 2, 2, 2, 1191, 1195, 7, 48, 2, 2, 1192, 1193, 5, 280, 141, 2, 1193,
	1194, 7, 36, 2, 2, 1194, 1196, 3, 2, 2, 2, 1195, 1192, 3, 2, 2, 2, 1195,
	1196, 3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 1198, 5, 134, 68, 2, 1198,
	1199, 7, 49, 2, 2, 1199, 133, 3, 2, 2, 2, 1200, 1206, 5, 136, 69, 2, 1201,
	1202, 5, 286, 144, 2, 1202, 1203, 5, 136, 69, 2, 1203, 1205, 3, 2, 2, 2,
	1204, 1201, 3, 2, 2, 2, 1205, 1208, 3, 2, 2, 2, 1206, 1204, 3, 2, 2, 2,
	1206, 1207, 3, 2, 2, 2, 1207, 135, 3, 2, 2, 2, 1208, 1206, 3, 2, 2, 2,
	1209, 1222, 5, 280, 141, 2, 1210, 1211, 5, 292, 147, 2, 1211, 1217, 5,
	138, 70, 2, 1212, 1213, 5, 286, 144, 2, 1213, 1214, 5, 138, 70, 2, 1214,
	1216, 3, 2, 2, 2, 1215, 1212, 3, 2, 2, 2, 1216, 1219, 3, 2, 2, 2, 1217,
	1215, 3, 2, 2, 2, 1217, 1218, 3, 2, 2, 2, 1218, 1220, 3, 2, 2, 2, 1219,
	1217, 3, 2, 2, 2, 1220, 1221, 5, 294, 148, 2, 1221, 1223, 3, 2, 2, 2, 1222,
	1210, 3, 2, 2, 2, 1222, 1223, 3, 2, 2, 2, 1223, 137, 3, 2, 2, 2, 1224,
	1225, 5, 280, 141, 2, 1225, 1226, 7, 40, 2, 2, 1226, 1228, 3, 2, 2, 2,
	1227, 1224, 3, 2, 2, 2, 1227, 1228, 3, 2, 2, 2, 1228, 1229, 3, 2, 2, 2,
	1229, 1230, 5, 122, 62, 2, 1230, 139, 3, 2, 2, 2, 1231, 1233, 5, 280, 141,
	2, 1232, 1234, 5, 190, 96, 2, 1233, 1232, 3, 2, 2, 2, 1233, 1234, 3, 2,
	2, 2, 1234, 1237, 3, 2, 2, 2, 1235, 1238, 5, 126, 64, 2, 1236, 1238, 5,
	192, 97, 2, 1237, 1235, 3, 2, 2, 2, 1237, 1236, 3, 2, 2, 2, 1238, 141,
	3, 2, 2, 2, 1239, 1241, 5, 280, 141, 2, 1240, 1242, 7, 52, 2, 2, 1241,
	1240, 3, 2, 2, 2, 1241, 1242, 3, 2, 2, 2, 1242, 1243, 3, 2, 2, 2, 1243,
	1244, 7, 48, 2, 2, 1244, 1245, 7, 37, 2, 2, 1245, 1246, 7, 49, 2, 2, 1246,
	143, 3, 2, 2, 2, 1247, 1249, 5, 280, 141, 2, 1248, 1250, 7, 52, 2, 2, 1249,
	1248, 3, 2, 2, 2, 1249, 1250, 3, 2, 2, 2, 1250, 1251, 3, 2, 2, 2, 1251,
	1254, 7, 48, 2, 2, 1252, 1255, 5, 174, 88, 2, 1253, 1255, 5, 122, 62, 2,
	1254, 1252, 3, 2, 2, 2, 1254, 1253, 3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2,
	1256, 1257, 7, 49, 2, 2, 1257, 145, 3, 2, 2, 2, 1258, 1259, 5, 236, 119,
	2, 1259, 1264, 5, 288, 145, 2, 1260, 1265, 5, 154, 78, 2, 1261, 1265, 5,
	158, 80, 2, 1262, 1265, 5, 160, 81, 2, 1263, 1265, 5, 162, 82, 2, 1264,
	1260, 3, 2, 2, 2, 1264, 1261, 3, 2, 2, 2, 1264, 1262, 3, 2, 2, 2, 1264,
	1263, 3, 2, 2, 2, 1264, 1265, 3, 2, 2, 2, 1265, 1266, 3, 2, 2, 2, 1266,
	1267, 5, 290, 146, 2, 1267, 147, 3, 2, 2, 2, 1268, 1269, 7, 41, 2, 2, 1269,
	1270, 5, 236, 119, 2, 1270, 1271, 7, 42, 2, 2, 1271, 1273, 5, 292, 147,
	2, 1272, 1274, 7, 91, 2, 2, 1273, 1272, 3, 2, 2, 2, 1273, 1274, 3, 2, 2,
	2, 1274, 1276, 3, 2, 2, 2, 1275, 1277, 5, 128, 65, 2, 1276, 1275, 3, 2,
	2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 1279, 3, 2, 2, 2, 1278, 1280, 7, 91,
	2, 2, 1279, 1278, 3, 2, 2, 2, 1279, 1280, 3, 2, 2, 2, 1280, 1281, 3, 2,
	2, 2, 1281, 1282, 5, 294, 148, 2, 1282, 149, 3, 2, 2, 2, 1283, 1284, 7,
	52, 2, 2, 1284, 1288, 5, 292, 147, 2, 1285, 1289, 5, 122, 62, 2, 1286,
	1287, 7, 51, 2, 2, 1287, 1289, 5, 236, 119, 2, 1288, 1285, 3, 2, 2, 2,
	1288, 1286, 3, 2, 2, 2, 1289, 1290, 3, 2, 2, 2, 1290, 1291, 5, 294, 148,
	2, 1291, 151, 3, 2, 2, 2, 1292, 1293, 7, 51, 2, 2, 1293, 1294, 5, 292,
	147, 2, 1294, 1295, 5, 236, 119, 2, 1295, 1296, 5, 294, 148, 2, 1296, 153,
	3, 2, 2, 2, 1297, 1303, 5, 156, 79, 2, 1298, 1299, 5, 286, 144, 2, 1299,
	1300, 5, 156, 79, 2, 1300, 1302, 3, 2, 2, 2, 1301, 1298, 3, 2, 2, 2, 1302,
	1305, 3, 2, 2, 2, 1303, 1301, 3, 2, 2, 2, 1303, 1304, 3, 2, 2, 2, 1304,
	155, 3, 2, 2, 2, 1305, 1303, 3, 2, 2, 2, 1306, 1307, 5, 184, 93, 2, 1307,
	1308, 7, 40, 2, 2, 1308, 1309, 5, 122, 62, 2, 1309, 157, 3, 2, 2, 2, 1310,
	1316, 5, 122, 62, 2, 1311, 1312, 5, 286, 144, 2, 1312, 1313, 5, 122, 62,
	2, 1313, 1315, 3, 2, 2, 2, 1314, 1311, 3, 2, 2, 2, 1315, 1318, 3, 2, 2,
	2, 1316, 1314, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 159, 3, 2, 2,
	2, 1318, 1316, 3, 2, 2, 2, 1319, 1320, 7, 48, 2, 2, 1320, 1321, 5, 122,
	62, 2, 1321, 1329, 7, 49, 2, 2, 1322, 1323, 5, 286, 144, 2, 1323, 1324,
	7, 48, 2, 2, 1324, 1325, 5, 122, 62, 2, 1325, 1326, 7, 49, 2, 2, 1326,
	1328, 3, 2, 2, 2, 1327, 1322, 3, 2, 2, 2, 1328, 1331, 3, 2, 2, 2, 1329,
	1327, 3, 2, 2, 2, 1329, 1330, 3, 2, 2, 2, 1330, 161, 3, 2, 2, 2, 1331,
	1329, 3, 2, 2, 2, 1332, 1338, 5, 172, 87, 2, 1333, 1334, 5, 286, 144, 2,
	1334, 1335, 5, 172, 87, 2, 1335, 1337, 3, 2, 2, 2, 1336, 1333, 3, 2, 2,
	2, 1337, 1340, 3, 2, 2, 2, 1338, 1336, 3, 2, 2, 2, 1338, 1339, 3, 2, 2,
	2, 1339, 163, 3, 2, 2, 2, 1340, 1338, 3, 2, 2, 2, 1341, 1342, 7, 39, 2,
	2, 1342, 1343, 5, 122, 62, 2, 1343, 165, 3, 2, 2, 2, 1344, 1345, 5, 288,
	145, 2, 1345, 1351, 5, 122, 62, 2, 1346, 1347, 5, 286, 144, 2, 1347, 1348,
	5, 122, 62, 2, 1348, 1350, 3, 2, 2, 2, 1349, 1346, 3, 2, 2, 2, 1350, 1353,
	3, 2, 2, 2, 1351, 1349, 3, 2, 2, 2, 1351, 1352, 3, 2, 2, 2, 1352, 1354,
	3, 2, 2, 2, 1353, 1351, 3, 2, 2, 2, 1354, 1355, 5, 290, 146, 2, 1355, 167,
	3, 2, 2, 2, 1356, 1357, 5, 288, 145, 2, 1357, 1358, 7, 48, 2, 2, 1358,
	1359, 5, 122, 62, 2, 1359, 1367, 7, 49, 2, 2, 1360, 1361, 5, 286, 144,
	2, 1361, 1362, 7, 48, 2, 2, 1362, 1363, 5, 122, 62, 2, 1363, 1364, 7, 49,
	2, 2, 1364, 1366, 3, 2, 2, 2, 1365, 1360, 3, 2, 2, 2, 1366, 1369, 3, 2,
	2, 2, 1367, 1365, 3, 2, 2, 2, 1367, 1368, 3, 2, 2, 2, 1368, 1370, 3, 2,
	2, 2, 1369, 1367, 3, 2, 2, 2, 1370, 1371, 5, 290, 146, 2, 1371, 169, 3,
	2, 2, 2, 1372, 1373, 5, 288, 145, 2, 1373, 1379, 5, 172, 87, 2, 1374, 1375,
	5, 286, 144, 2, 1375, 1376, 5, 172, 87, 2, 1376, 1378, 3, 2, 2, 2, 1377,
	1374, 3, 2, 2, 2, 1378, 1381, 3, 2, 2, 2, 1379, 1377, 3, 2, 2, 2, 1379,
	1380, 3, 2, 2, 2, 1380, 1382, 3, 2, 2, 2, 1381, 1379, 3, 2, 2, 2, 1382,
	1383, 5, 290, 146, 2, 1383, 171, 3, 2, 2, 2, 1384, 1385, 7, 48, 2, 2, 1385,
	1386, 5, 122, 62, 2, 1386, 1387, 7, 49, 2, 2, 1387, 1388, 5, 122, 62, 2,
	1388, 173, 3, 2, 2, 2, 1389, 1393, 5, 176, 89, 2, 1390, 1393, 5, 178, 90,
	2, 1391, 1393, 5, 180, 91, 2, 1392, 1389, 3, 2, 2, 2, 1392, 1390, 3, 2,
	2, 2, 1392, 1391, 3, 2, 2, 2, 1393, 175, 3, 2, 2, 2, 1394, 1395, 5, 122,
	62, 2, 1395, 1396, 9, 3, 2, 2, 1396, 1397, 5, 122, 62, 2, 1397, 177, 3,
	2, 2, 2, 1398, 1399, 5, 122, 62, 2, 1399, 1400, 9, 3, 2, 2, 1400, 179,
	3, 2, 2, 2, 1401, 1402, 9, 3, 2, 2, 1402, 1403, 5, 122, 62, 2, 1403, 181,
	3, 2, 2, 2, 1404, 1405, 5, 280, 141, 2, 1405, 1407, 5, 276, 139, 2, 1406,
	1408, 7, 91, 2, 2, 1407, 1406, 3, 2, 2, 2, 1407, 1408, 3, 2, 2, 2, 1408,
	1410, 3, 2, 2, 2, 1409, 1404, 3, 2, 2, 2, 1410, 1413, 3, 2, 2, 2, 1411,
	1409, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412, 1414, 3, 2, 2, 2, 1413,
	1411, 3, 2, 2, 2, 1414, 1415, 5, 280, 141, 2, 1415, 183, 3, 2, 2, 2, 1416,
	1425, 5, 280, 141, 2, 1417, 1419, 5, 276, 139, 2, 1418, 1420, 7, 91, 2,
	2, 1419, 1418, 3, 2, 2, 2, 1419, 1420, 3, 2, 2, 2, 1420, 1421, 3, 2, 2,
	2, 1421, 1422, 5, 280, 141, 2, 1422, 1424, 3, 2, 2, 2, 1423, 1417, 3, 2,
	2, 2, 1424, 1427, 3, 2, 2, 2, 1425, 1423, 3, 2, 2, 2, 1425, 1426, 3, 2,
	2, 2, 1426, 185, 3, 2, 2, 2, 1427, 1425, 3, 2, 2, 2, 1428, 1429, 7, 41,
	2, 2, 1429, 1435, 5, 188, 95, 2, 1430, 1431, 5, 286, 144, 2, 1431, 1432,
	5, 188, 95, 2, 1432, 1434, 3, 2, 2, 2, 1433, 1430, 3, 2, 2, 2, 1434, 1437,
	3, 2, 2, 2, 1435, 1433, 3, 2, 2, 2, 1435, 1436, 3, 2, 2, 2, 1436, 1438,
	3, 2, 2, 2, 1437, 1435, 3, 2, 2, 2, 1438, 1439, 7, 42, 2, 2, 1439, 187,
	3, 2, 2, 2, 1440, 1443, 5, 280, 141, 2, 1441, 1442, 7, 51, 2, 2, 1442,
	1444, 5, 280, 141, 2, 1443, 1441, 3, 2, 2, 2, 1443, 1444, 3, 2, 2, 2, 1444,
	189, 3, 2, 2, 2, 1445, 1446, 7, 41, 2, 2, 1446, 1452, 5, 236, 119, 2, 1447,
	1448, 5, 286, 144, 2, 1448, 1449, 5, 236, 119, 2, 1449, 1451, 3, 2, 2,
	2, 1450, 1447, 3, 2, 2, 2, 1451, 1454, 3, 2, 2, 2, 1452, 1450, 3, 2, 2,
	2, 1452, 1453, 3, 2, 2, 2, 1453, 1455, 3, 2, 2, 2, 1454, 1452, 3, 2, 2,
	2, 1455, 1456, 7, 42, 2, 2, 1456, 191, 3, 2, 2, 2, 1457, 1459, 5, 288,
	145, 2, 1458, 1460, 5, 194, 98, 2, 1459, 1458, 3, 2, 2, 2, 1459, 1460,
	3, 2, 2, 2, 1460, 1461, 3, 2, 2, 2, 1461, 1465, 9, 2, 2, 2, 1462, 1464,
	7, 91, 2, 2, 1463, 1462, 3, 2, 2, 2, 1464, 1467, 3, 2, 2, 2, 1465, 1463,
	3, 2, 2, 2, 1465, 1466, 3, 2, 2, 2, 1466, 1468, 3, 2, 2, 2, 1467, 1465,
	3, 2, 2, 2, 1468, 1469, 5, 128, 65, 2, 1469, 1470, 5, 290, 146, 2, 1470,
	1491, 3, 2, 2, 2, 1471, 1473, 5, 288, 145, 2, 1472, 1474, 5, 194, 98, 2,
	1473, 1472, 3, 2, 2, 2, 1473, 1474, 3, 2, 2, 2, 1474, 1475, 3, 2, 2, 2,
	1475, 1479, 9, 2, 2, 2, 1476, 1478, 7, 91, 2, 2, 1477, 1476, 3, 2, 2, 2,
	1478, 1481, 3, 2, 2, 2, 1479, 1477, 3, 2, 2, 2, 1479, 1480, 3, 2, 2, 2,
	1480, 1485, 3, 2, 2, 2, 1481, 1479, 3, 2, 2, 2, 1482, 1484, 5, 68, 35,
	2, 1483, 1482, 3, 2, 2, 2, 1484, 1487, 3, 2, 2, 2, 1485, 1483, 3, 2, 2,
	2, 1485, 1486, 3, 2, 2, 2, 1486, 1488, 3, 2, 2, 2, 1487, 1485, 3, 2, 2,
	2, 1488, 1489, 5, 290, 146, 2, 1489, 1491, 3, 2, 2, 2, 1490, 1457, 3, 2,
	2, 2, 1490, 1471, 3, 2, 2, 2, 1491, 193, 3, 2, 2, 2, 1492, 1498, 5, 280,
	141, 2, 1493, 1494, 5, 286, 144, 2, 1494, 1495, 5, 280, 141, 2, 1495, 1497,
	3, 2, 2, 2, 1496, 1493, 3, 2, 2, 2, 1497, 1500, 3, 2, 2, 2, 1498, 1496,
	3, 2, 2, 2, 1498, 1499, 3, 2, 2, 2, 1499, 195, 3, 2, 2, 2, 1500, 1498,
	3, 2, 2, 2, 1501, 1502, 5, 198, 100, 2, 1502, 197, 3, 2, 2, 2, 1503, 1504,
	5, 288, 145, 2, 1504, 1510, 5, 200, 101, 2, 1505, 1506, 5, 286, 144, 2,
	1506, 1507, 5, 200, 101, 2, 1507, 1509, 3, 2, 2, 2, 1508, 1505, 3, 2, 2,
	2, 1509, 1512, 3, 2, 2, 2, 1510, 1508, 3, 2, 2, 2, 1510, 1511, 3, 2, 2,
	2, 1511, 1513, 3, 2, 2, 2, 1512, 1510, 3, 2, 2, 2, 1513, 1514, 5, 290,
	146, 2, 1514, 199, 3, 2, 2, 2, 1515, 1516, 5, 184, 93, 2, 1516, 1517, 7,
	40, 2, 2, 1517, 1518, 5, 122, 62, 2, 1518, 201, 3, 2, 2, 2, 1519, 1520,
	5, 60, 31, 2, 1520, 1524, 9, 2, 2, 2, 1521, 1523, 7, 91, 2, 2, 1522, 1521,
	3, 2, 2, 2, 1523, 1526, 3, 2, 2, 2, 1524, 1522, 3, 2, 2, 2, 1524, 1525,
	3, 2, 2, 2, 1525, 1527, 3, 2, 2, 2, 1526, 1524, 3, 2, 2, 2, 1527, 1528,
	5, 62, 32, 2, 1528, 1532, 5, 288, 145, 2, 1529, 1531, 5, 68, 35, 2, 1530,
	1529, 3, 2, 2, 2, 1531, 1534, 3, 2, 2, 2, 1532, 1530, 3, 2, 2, 2, 1532,
	1533, 3, 2, 2, 2, 1533, 1535, 3, 2, 2, 2, 1534, 1532, 3, 2, 2, 2, 1535,
	1536, 5, 290, 146, 2, 1536, 203, 3, 2, 2, 2, 1537, 1538, 5, 292, 147, 2,
	1538, 1544, 5, 122, 62, 2, 1539, 1540, 5, 286, 144, 2, 1540, 1541, 5, 122,
	62, 2, 1541, 1543, 3, 2, 2, 2, 1542, 1539, 3, 2, 2, 2, 1543, 1546, 3, 2,
	2, 2, 1544, 1542, 3, 2, 2, 2, 1544, 1545, 3, 2, 2, 2, 1545, 1547, 3, 2,
	2, 2, 1546, 1544, 3, 2, 2, 2, 1547, 1548, 5, 294, 148, 2, 1548, 205, 3,
	2, 2, 2, 1549, 1550, 5, 270, 136, 2, 1550, 1551, 5, 122, 62, 2, 1551, 207,
	3, 2, 2, 2, 1552, 1553, 5, 278, 140, 2, 1553, 1554, 5, 122, 62, 2, 1554,
	209, 3, 2, 2, 2, 1555, 1557, 5, 216, 109, 2, 1556, 1558, 7, 91, 2, 2, 1557,
	1556, 3, 2, 2, 2, 1557, 1558, 3, 2, 2, 2, 1558, 1559, 3, 2, 2, 2, 1559,
	1560, 5, 122, 62, 2, 1560, 1562, 7, 36, 2, 2, 1561, 1563, 7, 91, 2, 2,
	1562, 1561, 3, 2, 2, 2, 1562, 1563, 3, 2, 2, 2, 1563, 1565, 3, 2, 2, 2,
	1564, 1566, 5, 212, 107, 2, 1565, 1564, 3, 2, 2, 2, 1566, 1567, 3, 2, 2,
	2, 1567, 1565, 3, 2, 2, 2, 1567, 1568, 3, 2, 2, 2, 1568, 1569, 3, 2, 2,
	2, 1569, 1571, 9, 4, 2, 2, 1570, 1572, 7, 91, 2, 2, 1571, 1570, 3, 2, 2,
	2, 1571, 1572, 3, 2, 2, 2, 1572, 1573, 3, 2, 2, 2, 1573, 1574, 5, 122,
	62, 2, 1574, 211, 3, 2, 2, 2, 1575, 1577, 5, 214, 108, 2, 1576, 1578, 5,
	122, 62, 2, 1577, 1576, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578, 1579,
	3, 2, 2, 2, 1579, 1581, 7, 36, 2, 2, 1580, 1582, 7, 91, 2, 2, 1581, 1580,
	3, 2, 2, 2, 1581, 1582, 3, 2, 2, 2, 1582, 213, 3, 2, 2, 2, 1583, 1586,
	5, 216, 109, 2, 1584, 1586, 5, 218, 110, 2, 1585, 1583, 3, 2, 2, 2, 1585,
	1584, 3, 2, 2, 2, 1586, 215, 3, 2, 2, 2, 1587, 1588, 7, 3, 2, 2, 1588,
	217, 3, 2, 2, 2, 1589, 1590, 9, 5, 2, 2, 1590, 219, 3, 2, 2, 2, 1591, 1593,
	7, 83, 2, 2, 1592, 1594, 5, 222, 112, 2, 1593, 1592, 3, 2, 2, 2, 1594,
	1595, 3, 2, 2, 2, 1595, 1593, 3, 2, 2, 2, 1595, 1596, 3, 2, 2, 2, 1596,
	221, 3, 2, 2, 2, 1597, 1598, 5, 122, 62, 2, 1598, 1599, 7, 83, 2, 2, 1599,
	223, 3, 2, 2, 2, 1600, 1609, 5, 226, 114, 2, 1601, 1609, 5, 228, 115, 2,
	1602, 1609, 7, 83, 2, 2, 1603, 1609, 7, 84, 2, 2, 1604, 1609, 7, 79, 2,
	2, 1605, 1609, 7, 80, 2, 2, 1606, 1609, 5, 260, 131, 2, 1607, 1609, 7,
	81, 2, 2, 1608, 1600, 3, 2, 2, 2, 1608, 1601, 3, 2, 2, 2, 1608, 1602, 3,
	2, 2, 2, 1608, 1603, 3, 2, 2, 2, 1608, 1604, 3, 2, 2, 2, 1608, 1605, 3,
	2, 2, 2, 1608, 1606, 3, 2, 2, 2, 1608, 1607, 3, 2, 2, 2, 1609, 225, 3,
	2, 2, 2, 1610, 1611, 5, 228, 115, 2, 1611, 1612, 5, 276, 139, 2, 1612,
	1613, 5, 228, 115, 2, 1613, 227, 3, 2, 2, 2, 1614, 1616, 7, 82, 2, 2, 1615,
	1614, 3, 2, 2, 2, 1616, 1617, 3, 2, 2, 2, 1617, 1615, 3, 2, 2, 2, 1617,
	1618, 3, 2, 2, 2, 1618, 229, 3, 2, 2, 2, 1619, 1630, 5, 238, 120, 2, 1620,
	1630, 5, 240, 121, 2, 1621, 1630, 5, 242, 122, 2, 1622, 1630, 5, 244, 123,
	2, 1623, 1630, 5, 246, 124, 2, 1624, 1630, 5, 248, 125, 2, 1625, 1630,
	5, 258, 130, 2, 1626, 1630, 5, 250, 126, 2, 1627, 1630, 5, 252, 127, 2,
	1628, 1630, 5, 254, 128, 2, 1629, 1619, 3, 2, 2, 2, 1629, 1620, 3, 2, 2,
	2, 1629, 1621, 3, 2, 2, 2, 1629, 1622, 3, 2, 2, 2, 1629, 1623, 3, 2, 2,
	2, 1629, 1624, 3, 2, 2, 2, 1629, 1625, 3, 2, 2, 2, 1629, 1626, 3, 2, 2,
	2, 1629, 1627, 3, 2, 2, 2, 1629, 1628, 3, 2, 2, 2, 1630, 231, 3, 2, 2,
	2, 1631, 1634, 7, 54, 2, 2, 1632, 1635, 5, 230, 116, 2, 1633, 1635, 5,
	234, 118, 2, 1634, 1632, 3, 2, 2, 2, 1634, 1633, 3, 2, 2, 2, 1635, 233,
	3, 2, 2, 2, 1636, 1637, 7, 52, 2, 2, 1637, 1638, 5, 230, 116, 2, 1638,
	235, 3, 2, 2, 2, 1639, 1643, 5, 230, 116, 2, 1640, 1643, 5, 234, 118, 2,
	1641, 1643, 5, 232, 117, 2, 1642, 1639, 3, 2, 2, 2, 1642, 1640, 3, 2, 2,
	2, 1642, 1641, 3, 2, 2, 2, 1643, 237, 3, 2, 2, 2, 1644, 1645, 5, 292, 147,
	2, 1645, 1649, 5, 236, 119, 2, 1646, 1647, 5, 286, 144, 2, 1647, 1648,
	5, 236, 119, 2, 1648, 1650, 3, 2, 2, 2, 1649, 1646, 3, 2, 2, 2, 1650, 1651,
	3, 2, 2, 2, 1651, 1649, 3, 2, 2, 2, 1651, 1652, 3, 2, 2, 2, 1652, 1653,
	3, 2, 2, 2, 1653, 1654, 5, 294, 148, 2, 1654, 239, 3, 2, 2, 2, 1655, 1656,
	7, 48, 2, 2, 1656, 1657, 7, 51, 2, 2, 1657, 1658, 7, 49, 2, 2, 1658, 1659,
	5, 236, 119, 2, 1659, 241, 3, 2, 2, 2, 1660, 1661, 7, 48, 2, 2, 1661, 1662,
	7, 49, 2, 2, 1662, 1663, 5, 236, 119, 2, 1663, 243, 3, 2, 2, 2, 1664, 1665,
	7, 48, 2, 2, 1665, 1666, 5, 236, 119, 2, 1666, 1667, 7, 49, 2, 2, 1667,
	245, 3, 2, 2, 2, 1668, 1669, 7, 48, 2, 2, 1669, 1670, 5, 236, 119, 2, 1670,
	1671, 7, 49, 2, 2, 1671, 1672, 5, 236, 119, 2, 1672, 247, 3, 2, 2, 2, 1673,
	1674, 7, 48, 2, 2, 1674, 1675, 7, 36, 2, 2, 1675, 1676, 7, 49, 2, 2, 1676,
	1677, 5, 236, 119, 2, 1677, 249, 3, 2, 2, 2, 1678, 1680, 5, 182, 92, 2,
	1679, 1681, 5, 190, 96, 2, 1680, 1679, 3, 2, 2, 2, 1680, 1681, 3, 2, 2,
	2, 1681, 251, 3, 2, 2, 2, 1682, 1683, 5, 256, 129, 2, 1683, 1687, 9, 2,
	2, 2, 1684, 1686, 7, 91, 2, 2, 1685, 1684, 3, 2, 2, 2, 1686, 1689, 3, 2,
	2, 2, 1687, 1685, 3, 2, 2, 2, 1687, 1688, 3, 2, 2, 2, 1688, 1690, 3, 2,
	2, 2, 1689, 1687, 3, 2, 2, 2, 1690, 1691, 5, 256, 129, 2, 1691, 253, 3,
	2, 2, 2, 1692, 1693, 5, 288, 145, 2, 1693, 1694, 5, 290, 146, 2, 1694,
	255, 3, 2, 2, 2, 1695, 1697, 5, 292, 147, 2, 1696, 1698, 5, 236, 119, 2,
	1697, 1696, 3, 2, 2, 2, 1697, 1698, 3, 2, 2, 2, 1698, 1704, 3, 2, 2, 2,
	1699, 1700, 5, 286, 144, 2, 1700, 1701, 5, 236, 119, 2, 1701, 1703, 3,
	2, 2, 2, 1702, 1699, 3, 2, 2, 2, 1703, 1706, 3, 2, 2, 2, 1704, 1702, 3,
	2, 2, 2, 1704, 1705, 3, 2, 2, 2, 1705, 1707, 3, 2, 2, 2, 1706, 1704, 3,
	2, 2, 2, 1707, 1708, 5, 294, 148, 2, 1708, 257, 3, 2, 2, 2, 1709, 1725,
	7, 64, 2, 2, 1710, 1725, 7, 65, 2, 2, 1711, 1725, 7, 66, 2, 2, 1712, 1725,
	7, 67, 2, 2, 1713, 1725, 7, 68, 2, 2, 1714, 1725, 7, 69, 2, 2, 1715, 1725,
	7, 70, 2, 2, 1716, 1725, 7, 71, 2, 2, 1717, 1725, 7, 72, 2, 2, 1718, 1725,
	7, 73, 2, 2, 1719, 1725, 7, 74, 2, 2, 1720, 1725, 7, 75, 2, 2, 1721, 1725,
	7, 76, 2, 2, 1722, 1725, 7, 77, 2, 2, 1723, 1725, 7, 78, 2, 2, 1724, 1709,
	3, 2, 2, 2, 1724, 1710, 3, 2, 2, 2, 1724, 1711, 3, 2, 2, 2, 1724, 1712,
	3, 2, 2, 2, 1724, 1713, 3, 2, 2, 2, 1724, 1714, 3, 2, 2, 2, 1724, 1715,
	3, 2, 2, 2, 1724, 1716, 3, 2, 2, 2, 1724, 1717, 3, 2, 2, 2, 1724, 1718,
	3, 2, 2, 2, 1724, 1719, 3, 2, 2, 2, 1724, 1720, 3, 2, 2, 2, 1724, 1721,
	3, 2, 2, 2, 1724, 1722, 3, 2, 2, 2, 1724, 1723, 3, 2, 2, 2, 1725, 259,
	3, 2, 2, 2, 1726, 1727, 5, 292, 147, 2, 1727, 1728, 5, 294, 148, 2, 1728,
	261, 3, 2, 2, 2, 1729, 1732, 7, 79, 2, 2, 1730, 1732, 7, 80, 2, 2, 1731,
	1729, 3, 2, 2, 2, 1731, 1730, 3, 2, 2, 2, 1732, 263, 3, 2, 2, 2, 1733,
	1734, 9, 6, 2, 2, 1734, 1735, 7, 51, 2, 2, 1735, 265, 3, 2, 2, 2, 1736,
	1738, 9, 7, 2, 2, 1737, 1739, 7, 91, 2, 2, 1738, 1737, 3, 2, 2, 2, 1738,
	1739, 3, 2, 2, 2, 1739, 267, 3, 2, 2, 2, 1740, 1742, 9, 8, 2, 2, 1741,
	1743, 7, 91, 2, 2, 1742, 1741, 3, 2, 2, 2, 1742, 1743, 3, 2, 2, 2, 1743,
	269, 3, 2, 2, 2, 1744, 1746, 9, 9, 2, 2, 1745, 1747, 7, 91, 2, 2, 1746,
	1745, 3, 2, 2, 2, 1746, 1747, 3, 2, 2, 2, 1747, 271, 3, 2, 2, 2, 1748,
	1750, 9, 10, 2, 2, 1749, 1751, 7, 91, 2, 2, 1750, 1749, 3, 2, 2, 2, 1750,
	1751, 3, 2, 2, 2, 1751, 273, 3, 2, 2, 2, 1752, 1754, 9, 11, 2, 2, 1753,
	1755, 7, 91, 2, 2, 1754, 1753, 3, 2, 2, 2, 1754, 1755, 3, 2, 2, 2, 1755,
	275, 3, 2, 2, 2, 1756, 1758, 7, 33, 2, 2, 1757, 1759, 7, 91, 2, 2, 1758,
	1757, 3, 2, 2, 2, 1758, 1759, 3, 2, 2, 2, 1759, 277, 3, 2, 2, 2, 1760,
	1761, 7, 55, 2, 2, 1761, 279, 3, 2, 2, 2, 1762, 1764, 5, 282, 142, 2, 1763,
	1762, 3, 2, 2, 2, 1764, 1765, 3, 2, 2, 2, 1765, 1763, 3, 2, 2, 2, 1765,
	1766, 3, 2, 2, 2, 1766, 281, 3, 2, 2, 2, 1767, 1772, 9, 12, 2, 2, 1768,
	1772, 5, 258, 130, 2, 1769, 1772, 5, 214, 108, 2, 1770, 1772, 7, 17, 2,
	2, 1771, 1767, 3, 2, 2, 2, 1771, 1768, 3, 2, 2, 2, 1771, 1769, 3, 2, 2,
	2, 1771, 1770, 3, 2, 2, 2, 1772, 283, 3, 2, 2, 2, 1773, 1774, 9, 13, 2,
	2, 1774, 285, 3, 2, 2, 2, 1775, 1779, 7, 34, 2, 2, 1776, 1778, 7, 91, 2,
	2, 1777, 1776, 3, 2, 2, 2, 1778, 1781, 3, 2, 2, 2, 1779, 1777, 3, 2, 2,
	2, 1779, 1780, 3, 2, 2, 2, 1780, 287, 3, 2, 2, 2, 1781, 1779, 3, 2, 2,
	2, 1782, 1786, 7, 46, 2, 2, 1783, 1785, 7, 91, 2, 2, 1784, 1783, 3, 2,
	2, 2, 1785, 1788, 3, 2, 2, 2, 1786, 1784, 3, 2, 2, 2, 1786, 1787, 3, 2,
	2, 2, 1787, 289, 3, 2, 2, 2, 1788, 1786, 3, 2, 2, 2, 1789, 1791, 7, 91,
	2, 2, 1790, 1789, 3, 2, 2, 2, 1791, 1794, 3, 2, 2, 2, 1792, 1790, 3, 2,
	2, 2, 1792, 1793, 3, 2, 2, 2, 1793, 1795, 3, 2, 2, 2, 1794, 1792, 3, 2,
	2, 2, 1795, 1796, 7, 47, 2, 2, 1796, 291, 3, 2, 2, 2, 1797, 1798, 7, 44,
	2, 2, 1798, 293, 3, 2, 2, 2, 1799, 1800, 7, 45, 2, 2, 1800, 295, 3, 2,
	2, 2, 1801, 1805, 7, 48, 2, 2, 1802, 1804, 7, 91, 2, 2, 1803, 1802, 3,
	2, 2, 2, 1804, 1807, 3, 2, 2, 2, 1805, 1803, 3, 2, 2, 2, 1805, 1806, 3,
	2, 2, 2, 1806, 297, 3, 2, 2, 2, 1807, 1805, 3, 2, 2, 2, 1808, 1810, 7,
	91, 2, 2, 1809, 1808, 3, 2, 2, 2, 1810, 1813, 3, 2, 2, 2, 1811, 1809, 3,
	2, 2, 2, 1811, 1812, 3, 2, 2, 2, 1812, 1814, 3, 2, 2, 2, 1813, 1811, 3,
	2, 2, 2, 1814, 1815, 7, 49, 2, 2, 1815, 299, 3, 2, 2, 2, 190, 303, 308,
	312, 318, 324, 331, 333, 340, 345, 347, 363, 376, 383, 391, 400, 403, 408,
	417, 419, 424, 435, 437, 443, 445, 450, 458, 464, 468, 475, 483, 490, 494,
	501, 512, 518, 526, 530, 536, 542, 546, 550, 557, 565, 572, 581, 583, 588,
	599, 601, 607, 609, 618, 631, 635, 642, 652, 655, 668, 671, 678, 682, 689,
	697, 704, 712, 724, 731, 738, 745, 759, 762, 769, 790, 797, 806, 813, 817,
	823, 830, 836, 846, 851, 858, 869, 879, 891, 903, 910, 922, 933, 952, 959,
	970, 977, 981, 988, 997, 1003, 1013, 1021, 1040, 1048, 1076, 1084, 1106,
	1140, 1142, 1150, 1155, 1161, 1171, 1174, 1184, 1189, 1195, 1206, 1217,
	1222, 1227, 1233, 1237, 1241, 1249, 1254, 1264, 1273, 1276, 1279, 1288,
	1303, 1316, 1329, 1338, 1351, 1367, 1379, 1392, 1407, 1411, 1419, 1425,
	1435, 1443, 1452, 1459, 1465, 1473, 1479, 1485, 1490, 1498, 1510, 1524,
	1532, 1544, 1557, 1562, 1567, 1571, 1577, 1581, 1585, 1595, 1608, 1617,
	1629, 1634, 1642, 1651, 1680, 1687, 1697, 1704, 1724, 1731, 1738, 1742,
	1746, 1750, 1754, 1758, 1765, 1771, 1779, 1786, 1792, 1805, 1811,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'from'", "'by'", "'select'", "'where'", "'group'", "'into'", "'orderby'",
	"'join'", "'let'", "'in'", "'on'", "'equals'", "'ascending'", "'descending'",
	"'Event'", "'**'", "'//'", "'%%'", "'+='", "'-='", "'*='", "'/='", "'%='",
	"':='", "'=='", "'<='", "'>='", "'><'", "'...'", "'..'", "'.'", "','",
	"'=>'", "'->'", "'<-'", "'~>'", "'<~'", "'='", "'<'", "'>'", "';'", "'('",
	"')'", "'{'", "'}'", "'['", "']'", "'::'", "':'", "'?'", "'@'", "'!'",
	"'~'", "'+'", "'-'", "'*'", "'/'", "'%'", "'\\'", "'&'", "'|'", "'I8'",
	"'U8'", "'I16'", "'U16'", "'I32'", "'U32'", "'I64'", "'U64'", "'F32'",
	"'F64'", "'Chr'", "'Str'", "'Bool'", "'Int'", "'Num'", "'True'", "'False'",
	"'Undefined'", "", "", "", "", "", "'_'", "", "", "", "'\n'",
}
var symbolicNames = []string{
	"", "LinqFrom", "LinqBy", "LinqSelect", "LinqWhere", "LinqGroup", "LinqInto",
	"LinqOrderby", "LinqJoin", "LinqLet", "LinqIn", "LinqOn", "LinqEquals",
	"LinqAscending", "LinqDescending", "Event", "Pow", "Root", "Log", "Add_Equal",
	"Sub_Equal", "Mul_Equal", "Div_Equal", "Mod_Equal", "Colon_Equal", "Equal_Equal",
	"Less_Equal", "Greater_Equal", "Not_Equal", "Dot_Dot_Dot", "Dot_Dot", "Dot",
	"Comma", "Equal_Arrow", "Right_Arrow", "Left_Arrow", "Right_Flow", "Left_Flow",
	"Equal", "Less", "Greater", "Semi", "Left_Paren", "Right_Paren", "Left_Brace",
	"Right_Brace", "Left_Brack", "Right_Brack", "Colon_Colon", "Colon", "Question",
	"At", "Bang", "Wave", "Add", "Sub", "Mul", "Div", "Mod", "Slash", "And",
	"Or", "TypeI8", "TypeU8", "TypeI16", "TypeU16", "TypeI32", "TypeU32", "TypeI64",
	"TypeU64", "TypeF32", "TypeF64", "TypeChr", "TypeStr", "TypeBool", "TypeInt",
	"TypeNum", "TrueLiteral", "FalseLiteral", "UndefinedLiteral", "NumberLiteral",
	"TextLiteral", "CharLiteral", "IDPrivate", "IDPublic", "Discard", "Big_Big_Comment",
	"Big_Comment", "Comment", "New_Line", "WS",
}

var ruleNames = []string{
	"program", "statement", "exportStatement", "importStatement", "namespaceSupportStatement",
	"typeAliasStatement", "typeRedefineStatement", "enumStatement", "enumSupportStatement",
	"namespaceVariableStatement", "namespaceControlStatement", "namespaceConstantStatement",
	"namespaceFunctionStatement", "packageStatement", "packageSupportStatement",
	"includeStatement", "packageNewStatement", "packageFunctionStatement",
	"packageVariableStatement", "packageControlStatement", "packageControlSubStatement",
	"packageEventStatement", "protocolStatement", "protocolSupportStatement",
	"protocolControlStatement", "protocolControlSubStatement", "protocolFunctionStatement",
	"functionStatement", "returnStatement", "parameterClauseIn", "parameterClauseOut",
	"parameterClauseSelf", "parameter", "functionSupportStatement", "judgeCaseStatement",
	"caseDefaultStatement", "caseExprStatement", "caseStatement", "judgeStatement",
	"judgeElseStatement", "judgeIfStatement", "judgeElseIfStatement", "loopStatement",
	"loopEachStatement", "loopCaseStatement", "loopInfiniteStatement", "loopJumpStatement",
	"loopContinueStatement", "checkStatement", "usingStatement", "checkErrorStatement",
	"checkFinallyStatment", "reportStatement", "iteratorStatement", "variableStatement",
	"variableDeclaredStatement", "channelAssignStatement", "assignStatement",
	"expressionStatement", "primaryExpression", "expression", "callExpression",
	"tuple", "expressionList", "annotationSupport", "annotation", "annotationList",
	"annotationItem", "annotationAssign", "callFunc", "callChannel", "callElement",
	"callPkg", "callNew", "getType", "typeConversion", "pkgAssign", "pkgAssignElement",
	"listAssign", "setAssign", "dictionaryAssign", "callAwait", "list", "set",
	"dictionary", "dictionaryElement", "slice", "sliceFull", "sliceStart",
	"sliceEnd", "nameSpaceItem", "name", "templateDefine", "templateDefineItem",
	"templateCall", "lambda", "lambdaIn", "pkgAnonymous", "pkgAnonymousAssign",
	"pkgAnonymousAssignElement", "functionExpression", "tupleExpression", "plusMinus",
	"negate", "linq", "linqItem", "linqKeyword", "linqHeadKeyword", "linqBodyKeyword",
	"stringExpression", "stringExpressionElement", "dataStatement", "floatExpr",
	"integerExpr", "typeNotNull", "typeReference", "typeNullable", "typeType",
	"typeTuple", "typeArray", "typeList", "typeSet", "typeDictionary", "typeChannel",
	"typePackage", "typeFunction", "typeAny", "typeFunctionParameterClause",
	"typeBasic", "nilExpr", "boolExpr", "judgeType", "judge", "assign", "add",
	"mul", "pow", "call", "wave", "id", "idItem", "end", "more", "left_brace",
	"right_brace", "left_paren", "right_paren", "left_brack", "right_brack",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type XsParser struct {
	*antlr.BaseParser
}

func NewXsParser(input antlr.TokenStream) *XsParser {
	this := new(XsParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "XsParser.g4"

	return this
}

// XsParser tokens.
const (
	XsParserEOF              = antlr.TokenEOF
	XsParserLinqFrom         = 1
	XsParserLinqBy           = 2
	XsParserLinqSelect       = 3
	XsParserLinqWhere        = 4
	XsParserLinqGroup        = 5
	XsParserLinqInto         = 6
	XsParserLinqOrderby      = 7
	XsParserLinqJoin         = 8
	XsParserLinqLet          = 9
	XsParserLinqIn           = 10
	XsParserLinqOn           = 11
	XsParserLinqEquals       = 12
	XsParserLinqAscending    = 13
	XsParserLinqDescending   = 14
	XsParserEvent            = 15
	XsParserPow              = 16
	XsParserRoot             = 17
	XsParserLog              = 18
	XsParserAdd_Equal        = 19
	XsParserSub_Equal        = 20
	XsParserMul_Equal        = 21
	XsParserDiv_Equal        = 22
	XsParserMod_Equal        = 23
	XsParserColon_Equal      = 24
	XsParserEqual_Equal      = 25
	XsParserLess_Equal       = 26
	XsParserGreater_Equal    = 27
	XsParserNot_Equal        = 28
	XsParserDot_Dot_Dot      = 29
	XsParserDot_Dot          = 30
	XsParserDot              = 31
	XsParserComma            = 32
	XsParserEqual_Arrow      = 33
	XsParserRight_Arrow      = 34
	XsParserLeft_Arrow       = 35
	XsParserRight_Flow       = 36
	XsParserLeft_Flow        = 37
	XsParserEqual            = 38
	XsParserLess             = 39
	XsParserGreater          = 40
	XsParserSemi             = 41
	XsParserLeft_Paren       = 42
	XsParserRight_Paren      = 43
	XsParserLeft_Brace       = 44
	XsParserRight_Brace      = 45
	XsParserLeft_Brack       = 46
	XsParserRight_Brack      = 47
	XsParserColon_Colon      = 48
	XsParserColon            = 49
	XsParserQuestion         = 50
	XsParserAt               = 51
	XsParserBang             = 52
	XsParserWave             = 53
	XsParserAdd              = 54
	XsParserSub              = 55
	XsParserMul              = 56
	XsParserDiv              = 57
	XsParserMod              = 58
	XsParserSlash            = 59
	XsParserAnd              = 60
	XsParserOr               = 61
	XsParserTypeI8           = 62
	XsParserTypeU8           = 63
	XsParserTypeI16          = 64
	XsParserTypeU16          = 65
	XsParserTypeI32          = 66
	XsParserTypeU32          = 67
	XsParserTypeI64          = 68
	XsParserTypeU64          = 69
	XsParserTypeF32          = 70
	XsParserTypeF64          = 71
	XsParserTypeChr          = 72
	XsParserTypeStr          = 73
	XsParserTypeBool         = 74
	XsParserTypeInt          = 75
	XsParserTypeNum          = 76
	XsParserTrueLiteral      = 77
	XsParserFalseLiteral     = 78
	XsParserUndefinedLiteral = 79
	XsParserNumberLiteral    = 80
	XsParserTextLiteral      = 81
	XsParserCharLiteral      = 82
	XsParserIDPrivate        = 83
	XsParserIDPublic         = 84
	XsParserDiscard          = 85
	XsParserBig_Big_Comment  = 86
	XsParserBig_Comment      = 87
	XsParserComment          = 88
	XsParserNew_Line         = 89
	XsParserWS               = 90
)

// XsParser rules.
const (
	XsParserRULE_program                     = 0
	XsParserRULE_statement                   = 1
	XsParserRULE_exportStatement             = 2
	XsParserRULE_importStatement             = 3
	XsParserRULE_namespaceSupportStatement   = 4
	XsParserRULE_typeAliasStatement          = 5
	XsParserRULE_typeRedefineStatement       = 6
	XsParserRULE_enumStatement               = 7
	XsParserRULE_enumSupportStatement        = 8
	XsParserRULE_namespaceVariableStatement  = 9
	XsParserRULE_namespaceControlStatement   = 10
	XsParserRULE_namespaceConstantStatement  = 11
	XsParserRULE_namespaceFunctionStatement  = 12
	XsParserRULE_packageStatement            = 13
	XsParserRULE_packageSupportStatement     = 14
	XsParserRULE_includeStatement            = 15
	XsParserRULE_packageNewStatement         = 16
	XsParserRULE_packageFunctionStatement    = 17
	XsParserRULE_packageVariableStatement    = 18
	XsParserRULE_packageControlStatement     = 19
	XsParserRULE_packageControlSubStatement  = 20
	XsParserRULE_packageEventStatement       = 21
	XsParserRULE_protocolStatement           = 22
	XsParserRULE_protocolSupportStatement    = 23
	XsParserRULE_protocolControlStatement    = 24
	XsParserRULE_protocolControlSubStatement = 25
	XsParserRULE_protocolFunctionStatement   = 26
	XsParserRULE_functionStatement           = 27
	XsParserRULE_returnStatement             = 28
	XsParserRULE_parameterClauseIn           = 29
	XsParserRULE_parameterClauseOut          = 30
	XsParserRULE_parameterClauseSelf         = 31
	XsParserRULE_parameter                   = 32
	XsParserRULE_functionSupportStatement    = 33
	XsParserRULE_judgeCaseStatement          = 34
	XsParserRULE_caseDefaultStatement        = 35
	XsParserRULE_caseExprStatement           = 36
	XsParserRULE_caseStatement               = 37
	XsParserRULE_judgeStatement              = 38
	XsParserRULE_judgeElseStatement          = 39
	XsParserRULE_judgeIfStatement            = 40
	XsParserRULE_judgeElseIfStatement        = 41
	XsParserRULE_loopStatement               = 42
	XsParserRULE_loopEachStatement           = 43
	XsParserRULE_loopCaseStatement           = 44
	XsParserRULE_loopInfiniteStatement       = 45
	XsParserRULE_loopJumpStatement           = 46
	XsParserRULE_loopContinueStatement       = 47
	XsParserRULE_checkStatement              = 48
	XsParserRULE_usingStatement              = 49
	XsParserRULE_checkErrorStatement         = 50
	XsParserRULE_checkFinallyStatment        = 51
	XsParserRULE_reportStatement             = 52
	XsParserRULE_iteratorStatement           = 53
	XsParserRULE_variableStatement           = 54
	XsParserRULE_variableDeclaredStatement   = 55
	XsParserRULE_channelAssignStatement      = 56
	XsParserRULE_assignStatement             = 57
	XsParserRULE_expressionStatement         = 58
	XsParserRULE_primaryExpression           = 59
	XsParserRULE_expression                  = 60
	XsParserRULE_callExpression              = 61
	XsParserRULE_tuple                       = 62
	XsParserRULE_expressionList              = 63
	XsParserRULE_annotationSupport           = 64
	XsParserRULE_annotation                  = 65
	XsParserRULE_annotationList              = 66
	XsParserRULE_annotationItem              = 67
	XsParserRULE_annotationAssign            = 68
	XsParserRULE_callFunc                    = 69
	XsParserRULE_callChannel                 = 70
	XsParserRULE_callElement                 = 71
	XsParserRULE_callPkg                     = 72
	XsParserRULE_callNew                     = 73
	XsParserRULE_getType                     = 74
	XsParserRULE_typeConversion              = 75
	XsParserRULE_pkgAssign                   = 76
	XsParserRULE_pkgAssignElement            = 77
	XsParserRULE_listAssign                  = 78
	XsParserRULE_setAssign                   = 79
	XsParserRULE_dictionaryAssign            = 80
	XsParserRULE_callAwait                   = 81
	XsParserRULE_list                        = 82
	XsParserRULE_set                         = 83
	XsParserRULE_dictionary                  = 84
	XsParserRULE_dictionaryElement           = 85
	XsParserRULE_slice                       = 86
	XsParserRULE_sliceFull                   = 87
	XsParserRULE_sliceStart                  = 88
	XsParserRULE_sliceEnd                    = 89
	XsParserRULE_nameSpaceItem               = 90
	XsParserRULE_name                        = 91
	XsParserRULE_templateDefine              = 92
	XsParserRULE_templateDefineItem          = 93
	XsParserRULE_templateCall                = 94
	XsParserRULE_lambda                      = 95
	XsParserRULE_lambdaIn                    = 96
	XsParserRULE_pkgAnonymous                = 97
	XsParserRULE_pkgAnonymousAssign          = 98
	XsParserRULE_pkgAnonymousAssignElement   = 99
	XsParserRULE_functionExpression          = 100
	XsParserRULE_tupleExpression             = 101
	XsParserRULE_plusMinus                   = 102
	XsParserRULE_negate                      = 103
	XsParserRULE_linq                        = 104
	XsParserRULE_linqItem                    = 105
	XsParserRULE_linqKeyword                 = 106
	XsParserRULE_linqHeadKeyword             = 107
	XsParserRULE_linqBodyKeyword             = 108
	XsParserRULE_stringExpression            = 109
	XsParserRULE_stringExpressionElement     = 110
	XsParserRULE_dataStatement               = 111
	XsParserRULE_floatExpr                   = 112
	XsParserRULE_integerExpr                 = 113
	XsParserRULE_typeNotNull                 = 114
	XsParserRULE_typeReference               = 115
	XsParserRULE_typeNullable                = 116
	XsParserRULE_typeType                    = 117
	XsParserRULE_typeTuple                   = 118
	XsParserRULE_typeArray                   = 119
	XsParserRULE_typeList                    = 120
	XsParserRULE_typeSet                     = 121
	XsParserRULE_typeDictionary              = 122
	XsParserRULE_typeChannel                 = 123
	XsParserRULE_typePackage                 = 124
	XsParserRULE_typeFunction                = 125
	XsParserRULE_typeAny                     = 126
	XsParserRULE_typeFunctionParameterClause = 127
	XsParserRULE_typeBasic                   = 128
	XsParserRULE_nilExpr                     = 129
	XsParserRULE_boolExpr                    = 130
	XsParserRULE_judgeType                   = 131
	XsParserRULE_judge                       = 132
	XsParserRULE_assign                      = 133
	XsParserRULE_add                         = 134
	XsParserRULE_mul                         = 135
	XsParserRULE_pow                         = 136
	XsParserRULE_call                        = 137
	XsParserRULE_wave                        = 138
	XsParserRULE_id                          = 139
	XsParserRULE_idItem                      = 140
	XsParserRULE_end                         = 141
	XsParserRULE_more                        = 142
	XsParserRULE_left_brace                  = 143
	XsParserRULE_right_brace                 = 144
	XsParserRULE_left_paren                  = 145
	XsParserRULE_right_paren                 = 146
	XsParserRULE_left_brack                  = 147
	XsParserRULE_right_brack                 = 148
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_program
	return p
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *ProgramContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, XsParserRULE_program)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == XsParserLeft_Brack || _la == XsParserTextLiteral || _la == XsParserNew_Line {
		{
			p.SetState(298)
			p.Statement()
		}

		p.SetState(301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) ExportStatement() IExportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExportStatementContext)
}

func (s *StatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *StatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *StatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *StatementContext) AllNamespaceSupportStatement() []INamespaceSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem())
	var tst = make([]INamespaceSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamespaceSupportStatementContext)
		}
	}

	return tst
}

func (s *StatementContext) NamespaceSupportStatement(i int) INamespaceSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamespaceSupportStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, XsParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(303)
			p.Match(XsParserNew_Line)
		}

		p.SetState(308)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(310)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(309)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(312)
		p.ExportStatement()
	}
	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(313)
				p.Match(XsParserNew_Line)
			}

		}
		p.SetState(318)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(319)
				p.NamespaceSupportStatement()
			}

		}
		p.SetState(324)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IExportStatementContext is an interface to support dynamic dispatch.
type IExportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExportStatementContext differentiates from other interfaces.
	IsExportStatementContext()
}

type ExportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExportStatementContext() *ExportStatementContext {
	var p = new(ExportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_exportStatement
	return p
}

func (*ExportStatementContext) IsExportStatementContext() {}

func NewExportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExportStatementContext {
	var p = new(ExportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_exportStatement

	return p
}

func (s *ExportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTextLiteral, 0)
}

func (s *ExportStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ExportStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ExportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExportStatementContext) AllImportStatement() []IImportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportStatementContext)(nil)).Elem())
	var tst = make([]IImportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportStatementContext)
		}
	}

	return tst
}

func (s *ExportStatementContext) ImportStatement(i int) IImportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportStatementContext)
}

func (s *ExportStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *ExportStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *ExportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitExportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ExportStatement() (localctx IExportStatementContext) {
	localctx = NewExportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, XsParserRULE_exportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(325)
		p.Match(XsParserTextLiteral)
	}
	{
		p.SetState(326)
		p.Left_brace()
	}
	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(329)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case XsParserLeft_Brack, XsParserTextLiteral:
				{
					p.SetState(327)
					p.ImportStatement()
				}

			case XsParserNew_Line:
				{
					p.SetState(328)
					p.Match(XsParserNew_Line)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(333)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}
	{
		p.SetState(334)
		p.Right_brace()
	}
	{
		p.SetState(335)
		p.End()
	}

	return localctx
}

// IImportStatementContext is an interface to support dynamic dispatch.
type IImportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportStatementContext differentiates from other interfaces.
	IsImportStatementContext()
}

type ImportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportStatementContext() *ImportStatementContext {
	var p = new(ImportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_importStatement
	return p
}

func (*ImportStatementContext) IsImportStatementContext() {}

func NewImportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportStatementContext {
	var p = new(ImportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_importStatement

	return p
}

func (s *ImportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTextLiteral, 0)
}

func (s *ImportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ImportStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ImportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImportStatementContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ImportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitImportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ImportStatement() (localctx IImportStatementContext) {
	localctx = NewImportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, XsParserRULE_importStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(338)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(337)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(340)
		p.Match(XsParserTextLiteral)
	}
	p.SetState(345)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
		{
			p.SetState(341)
			p.Id()
		}
		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserDot {
			{
				p.SetState(342)
				p.Call()
			}

		}

	}
	{
		p.SetState(347)
		p.End()
	}

	return localctx
}

// INamespaceSupportStatementContext is an interface to support dynamic dispatch.
type INamespaceSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceSupportStatementContext differentiates from other interfaces.
	IsNamespaceSupportStatementContext()
}

type NamespaceSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceSupportStatementContext() *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_namespaceSupportStatement
	return p
}

func (*NamespaceSupportStatementContext) IsNamespaceSupportStatementContext() {}

func NewNamespaceSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceSupportStatementContext {
	var p = new(NamespaceSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_namespaceSupportStatement

	return p
}

func (s *NamespaceSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceSupportStatementContext) NamespaceVariableStatement() INamespaceVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceVariableStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceControlStatement() INamespaceControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceControlStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceFunctionStatement() INamespaceFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceFunctionStatementContext)
}

func (s *NamespaceSupportStatementContext) NamespaceConstantStatement() INamespaceConstantStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamespaceConstantStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamespaceConstantStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageStatement() IPackageStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageStatementContext)
}

func (s *NamespaceSupportStatementContext) ProtocolStatement() IProtocolStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageFunctionStatement() IPackageFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageFunctionStatementContext)
}

func (s *NamespaceSupportStatementContext) PackageNewStatement() IPackageNewStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNewStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageNewStatementContext)
}

func (s *NamespaceSupportStatementContext) EnumStatement() IEnumStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeAliasStatement() ITypeAliasStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasStatementContext)
}

func (s *NamespaceSupportStatementContext) TypeRedefineStatement() ITypeRedefineStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeRedefineStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeRedefineStatementContext)
}

func (s *NamespaceSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *NamespaceSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNamespaceSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NamespaceSupportStatement() (localctx INamespaceSupportStatementContext) {
	localctx = NewNamespaceSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, XsParserRULE_namespaceSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(349)
			p.NamespaceVariableStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(350)
			p.NamespaceControlStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(351)
			p.NamespaceFunctionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(352)
			p.NamespaceConstantStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(353)
			p.PackageStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(354)
			p.ProtocolStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(355)
			p.PackageFunctionStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(356)
			p.PackageNewStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(357)
			p.EnumStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(358)
			p.TypeAliasStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(359)
			p.TypeRedefineStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(360)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// ITypeAliasStatementContext is an interface to support dynamic dispatch.
type ITypeAliasStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasStatementContext differentiates from other interfaces.
	IsTypeAliasStatementContext()
}

type TypeAliasStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasStatementContext() *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeAliasStatement
	return p
}

func (*TypeAliasStatementContext) IsTypeAliasStatementContext() {}

func NewTypeAliasStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasStatementContext {
	var p = new(TypeAliasStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeAliasStatement

	return p
}

func (s *TypeAliasStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeAliasStatementContext) Equal_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserEqual_Arrow, 0)
}

func (s *TypeAliasStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeAliasStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeAliasStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeAliasStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeAliasStatement() (localctx ITypeAliasStatementContext) {
	localctx = NewTypeAliasStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, XsParserRULE_typeAliasStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(363)
		p.Id()
	}
	{
		p.SetState(364)
		p.Match(XsParserEqual_Arrow)
	}
	{
		p.SetState(365)
		p.TypeType()
	}
	{
		p.SetState(366)
		p.End()
	}

	return localctx
}

// ITypeRedefineStatementContext is an interface to support dynamic dispatch.
type ITypeRedefineStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeRedefineStatementContext differentiates from other interfaces.
	IsTypeRedefineStatementContext()
}

type TypeRedefineStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeRedefineStatementContext() *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeRedefineStatement
	return p
}

func (*TypeRedefineStatementContext) IsTypeRedefineStatementContext() {}

func NewTypeRedefineStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeRedefineStatementContext {
	var p = new(TypeRedefineStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeRedefineStatement

	return p
}

func (s *TypeRedefineStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeRedefineStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeRedefineStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *TypeRedefineStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeRedefineStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *TypeRedefineStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeRedefineStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeRedefineStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeRedefineStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeRedefineStatement() (localctx ITypeRedefineStatementContext) {
	localctx = NewTypeRedefineStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, XsParserRULE_typeRedefineStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.Id()
	}
	{
		p.SetState(369)
		p.Match(XsParserRight_Arrow)
	}
	{
		p.SetState(370)
		p.TypeType()
	}
	{
		p.SetState(371)
		p.End()
	}

	return localctx
}

// IEnumStatementContext is an interface to support dynamic dispatch.
type IEnumStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumStatementContext differentiates from other interfaces.
	IsEnumStatementContext()
}

type EnumStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumStatementContext() *EnumStatementContext {
	var p = new(EnumStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_enumStatement
	return p
}

func (*EnumStatementContext) IsEnumStatementContext() {}

func NewEnumStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumStatementContext {
	var p = new(EnumStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_enumStatement

	return p
}

func (s *EnumStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *EnumStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *EnumStatementContext) Left_brack() ILeft_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_brackContext)
}

func (s *EnumStatementContext) Right_brack() IRight_brackContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_brackContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_brackContext)
}

func (s *EnumStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *EnumStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *EnumStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *EnumStatementContext) AllEnumSupportStatement() []IEnumSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem())
	var tst = make([]IEnumSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumSupportStatementContext)
		}
	}

	return tst
}

func (s *EnumStatementContext) EnumSupportStatement(i int) IEnumSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumSupportStatementContext)
}

func (s *EnumStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitEnumStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) EnumStatement() (localctx IEnumStatementContext) {
	localctx = NewEnumStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, XsParserRULE_enumStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(373)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(376)
		p.Id()
	}
	{
		p.SetState(377)
		p.Match(XsParserRight_Arrow)
	}
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(378)
			p.Match(XsParserNew_Line)
		}

		p.SetState(383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(384)
		p.TypeType()
	}
	{
		p.SetState(385)
		p.Left_brack()
	}
	p.SetState(389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
		{
			p.SetState(386)
			p.EnumSupportStatement()
		}

		p.SetState(391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(392)
		p.Right_brack()
	}
	{
		p.SetState(393)
		p.End()
	}

	return localctx
}

// IEnumSupportStatementContext is an interface to support dynamic dispatch.
type IEnumSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSupportStatementContext differentiates from other interfaces.
	IsEnumSupportStatementContext()
}

type EnumSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSupportStatementContext() *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_enumSupportStatement
	return p
}

func (*EnumSupportStatementContext) IsEnumSupportStatementContext() {}

func NewEnumSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSupportStatementContext {
	var p = new(EnumSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_enumSupportStatement

	return p
}

func (s *EnumSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSupportStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumSupportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *EnumSupportStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *EnumSupportStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *EnumSupportStatementContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *EnumSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitEnumSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) EnumSupportStatement() (localctx IEnumSupportStatementContext) {
	localctx = NewEnumSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, XsParserRULE_enumSupportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Id()
	}
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserEqual {
		{
			p.SetState(396)
			p.Match(XsParserEqual)
		}
		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserAdd || _la == XsParserSub {
			{
				p.SetState(397)
				p.Add()
			}

		}
		{
			p.SetState(400)
			p.IntegerExpr()
		}

	}
	{
		p.SetState(403)
		p.End()
	}

	return localctx
}

// INamespaceVariableStatementContext is an interface to support dynamic dispatch.
type INamespaceVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceVariableStatementContext differentiates from other interfaces.
	IsNamespaceVariableStatementContext()
}

type NamespaceVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceVariableStatementContext() *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_namespaceVariableStatement
	return p
}

func (*NamespaceVariableStatementContext) IsNamespaceVariableStatementContext() {}

func NewNamespaceVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceVariableStatementContext {
	var p = new(NamespaceVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_namespaceVariableStatement

	return p
}

func (s *NamespaceVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceVariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Equal, 0)
}

func (s *NamespaceVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *NamespaceVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *NamespaceVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNamespaceVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NamespaceVariableStatement() (localctx INamespaceVariableStatementContext) {
	localctx = NewNamespaceVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, XsParserRULE_namespaceVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(405)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(408)
		p.Id()
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon_Equal:
		{
			p.SetState(409)
			p.Match(XsParserColon_Equal)
		}
		{
			p.SetState(410)
			p.expression(0)
		}

	case XsParserColon:
		{
			p.SetState(411)
			p.Match(XsParserColon)
		}
		{
			p.SetState(412)
			p.TypeType()
		}
		p.SetState(415)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserEqual {
			{
				p.SetState(413)
				p.Match(XsParserEqual)
			}
			{
				p.SetState(414)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(419)
		p.End()
	}

	return localctx
}

// INamespaceControlStatementContext is an interface to support dynamic dispatch.
type INamespaceControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceControlStatementContext differentiates from other interfaces.
	IsNamespaceControlStatementContext()
}

type NamespaceControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceControlStatementContext() *NamespaceControlStatementContext {
	var p = new(NamespaceControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_namespaceControlStatement
	return p
}

func (*NamespaceControlStatementContext) IsNamespaceControlStatementContext() {}

func NewNamespaceControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceControlStatementContext {
	var p = new(NamespaceControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_namespaceControlStatement

	return p
}

func (s *NamespaceControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceControlStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *NamespaceControlStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *NamespaceControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceControlStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Equal, 0)
}

func (s *NamespaceControlStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *NamespaceControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceControlStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *NamespaceControlStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *NamespaceControlStatementContext) AllPackageControlSubStatement() []IPackageControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem())
	var tst = make([]IPackageControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageControlSubStatementContext)
		}
	}

	return tst
}

func (s *NamespaceControlStatementContext) PackageControlSubStatement(i int) IPackageControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageControlSubStatementContext)
}

func (s *NamespaceControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNamespaceControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NamespaceControlStatement() (localctx INamespaceControlStatementContext) {
	localctx = NewNamespaceControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, XsParserRULE_namespaceControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(421)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(424)
		p.Id()
	}
	{
		p.SetState(425)
		p.Left_paren()
	}
	{
		p.SetState(426)
		p.Right_paren()
	}
	p.SetState(435)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon_Equal:
		{
			p.SetState(427)
			p.Match(XsParserColon_Equal)
		}
		{
			p.SetState(428)
			p.expression(0)
		}

	case XsParserColon:
		{
			p.SetState(429)
			p.Match(XsParserColon)
		}
		{
			p.SetState(430)
			p.TypeType()
		}
		p.SetState(433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserEqual {
			{
				p.SetState(431)
				p.Match(XsParserEqual)
			}
			{
				p.SetState(432)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserRight_Arrow {
		{
			p.SetState(437)
			p.Match(XsParserRight_Arrow)
		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(438)
				p.PackageControlSubStatement()
			}

			p.SetState(441)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(445)
		p.End()
	}

	return localctx
}

// INamespaceConstantStatementContext is an interface to support dynamic dispatch.
type INamespaceConstantStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamespaceConstantStatementContext differentiates from other interfaces.
	IsNamespaceConstantStatementContext()
}

type NamespaceConstantStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceConstantStatementContext() *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_namespaceConstantStatement
	return p
}

func (*NamespaceConstantStatementContext) IsNamespaceConstantStatementContext() {}

func NewNamespaceConstantStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceConstantStatementContext {
	var p = new(NamespaceConstantStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_namespaceConstantStatement

	return p
}

func (s *NamespaceConstantStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceConstantStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceConstantStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamespaceConstantStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceConstantStatementContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(XsParserColon)
}

func (s *NamespaceConstantStatementContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(XsParserColon, i)
}

func (s *NamespaceConstantStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *NamespaceConstantStatementContext) Colon_Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Colon, 0)
}

func (s *NamespaceConstantStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceConstantStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceConstantStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceConstantStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNamespaceConstantStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NamespaceConstantStatement() (localctx INamespaceConstantStatementContext) {
	localctx = NewNamespaceConstantStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, XsParserRULE_namespaceConstantStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(447)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(450)
		p.Id()
	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon:
		{
			p.SetState(451)
			p.Match(XsParserColon)
		}
		{
			p.SetState(452)
			p.TypeType()
		}
		{
			p.SetState(453)
			p.Match(XsParserColon)
		}

	case XsParserColon_Colon:
		{
			p.SetState(455)
			p.Match(XsParserColon_Colon)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(458)
		p.expression(0)
	}
	{
		p.SetState(459)
		p.End()
	}

	return localctx
}

// INamespaceFunctionStatementContext is an interface to support dynamic dispatch.
type INamespaceFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsNamespaceFunctionStatementContext differentiates from other interfaces.
	IsNamespaceFunctionStatementContext()
}

type NamespaceFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyNamespaceFunctionStatementContext() *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_namespaceFunctionStatement
	return p
}

func (*NamespaceFunctionStatementContext) IsNamespaceFunctionStatementContext() {}

func NewNamespaceFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceFunctionStatementContext {
	var p = new(NamespaceFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_namespaceFunctionStatement

	return p
}

func (s *NamespaceFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *NamespaceFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *NamespaceFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *NamespaceFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *NamespaceFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *NamespaceFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *NamespaceFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *NamespaceFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *NamespaceFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *NamespaceFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *NamespaceFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *NamespaceFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *NamespaceFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *NamespaceFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *NamespaceFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *NamespaceFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNamespaceFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NamespaceFunctionStatement() (localctx INamespaceFunctionStatementContext) {
	localctx = NewNamespaceFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, XsParserRULE_namespaceFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(461)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(464)
		p.Id()
	}
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(465)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(468)
		p.ParameterClauseIn()
	}
	{
		p.SetState(469)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*NamespaceFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*NamespaceFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(470)
			p.Match(XsParserNew_Line)
		}

		p.SetState(475)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(476)
		p.ParameterClauseOut()
	}
	{
		p.SetState(477)
		p.Left_brace()
	}
	p.SetState(481)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(478)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
	}
	{
		p.SetState(484)
		p.Right_brace()
	}
	{
		p.SetState(485)
		p.End()
	}

	return localctx
}

// IPackageStatementContext is an interface to support dynamic dispatch.
type IPackageStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageStatementContext differentiates from other interfaces.
	IsPackageStatementContext()
}

type PackageStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageStatementContext() *PackageStatementContext {
	var p = new(PackageStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageStatement
	return p
}

func (*PackageStatementContext) IsPackageStatementContext() {}

func NewPackageStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageStatementContext {
	var p = new(PackageStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageStatement

	return p
}

func (s *PackageStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *PackageStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageStatementContext) AllPackageSupportStatement() []IPackageSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem())
	var tst = make([]IPackageSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageStatementContext) PackageSupportStatement(i int) IPackageSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageSupportStatementContext)
}

func (s *PackageStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageStatement() (localctx IPackageStatementContext) {
	localctx = NewPackageStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, XsParserRULE_packageStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(487)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(490)
		p.Id()
	}
	p.SetState(492)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(491)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(494)
		p.Match(XsParserRight_Arrow)
	}
	{
		p.SetState(495)
		p.Left_brace()
	}
	p.SetState(499)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(496)
				p.PackageSupportStatement()
			}

		}
		p.SetState(501)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
	}
	{
		p.SetState(502)
		p.Right_brace()
	}
	{
		p.SetState(503)
		p.End()
	}

	return localctx
}

// IPackageSupportStatementContext is an interface to support dynamic dispatch.
type IPackageSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageSupportStatementContext differentiates from other interfaces.
	IsPackageSupportStatementContext()
}

type PackageSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageSupportStatementContext() *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageSupportStatement
	return p
}

func (*PackageSupportStatementContext) IsPackageSupportStatementContext() {}

func NewPackageSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageSupportStatementContext {
	var p = new(PackageSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageSupportStatement

	return p
}

func (s *PackageSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *PackageSupportStatementContext) PackageVariableStatement() IPackageVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageVariableStatementContext)
}

func (s *PackageSupportStatementContext) PackageControlStatement() IPackageControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageControlStatementContext)
}

func (s *PackageSupportStatementContext) PackageEventStatement() IPackageEventStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageEventStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageEventStatementContext)
}

func (s *PackageSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *PackageSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageSupportStatement() (localctx IPackageSupportStatementContext) {
	localctx = NewPackageSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, XsParserRULE_packageSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(510)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(505)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(506)
			p.PackageVariableStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(507)
			p.PackageControlStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(508)
			p.PackageEventStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(509)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IIncludeStatementContext is an interface to support dynamic dispatch.
type IIncludeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncludeStatementContext differentiates from other interfaces.
	IsIncludeStatementContext()
}

type IncludeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncludeStatementContext() *IncludeStatementContext {
	var p = new(IncludeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_includeStatement
	return p
}

func (*IncludeStatementContext) IsIncludeStatementContext() {}

func NewIncludeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncludeStatementContext {
	var p = new(IncludeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_includeStatement

	return p
}

func (s *IncludeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IncludeStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *IncludeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *IncludeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncludeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncludeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitIncludeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) IncludeStatement() (localctx IIncludeStatementContext) {
	localctx = NewIncludeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, XsParserRULE_includeStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(512)
		p.TypeType()
	}
	{
		p.SetState(513)
		p.End()
	}

	return localctx
}

// IPackageNewStatementContext is an interface to support dynamic dispatch.
type IPackageNewStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageNewStatementContext differentiates from other interfaces.
	IsPackageNewStatementContext()
}

type PackageNewStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNewStatementContext() *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageNewStatement
	return p
}

func (*PackageNewStatementContext) IsPackageNewStatementContext() {}

func NewPackageNewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNewStatementContext {
	var p = new(PackageNewStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageNewStatement

	return p
}

func (s *PackageNewStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNewStatementContext) ParameterClauseSelf() IParameterClauseSelfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseSelfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseSelfContext)
}

func (s *PackageNewStatementContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *PackageNewStatementContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *PackageNewStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageNewStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageNewStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageNewStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageNewStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageNewStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageNewStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageNewStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageNewStatementContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PackageNewStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNewStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNewStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageNewStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageNewStatement() (localctx IPackageNewStatementContext) {
	localctx = NewPackageNewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, XsParserRULE_packageNewStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(515)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(518)
		p.ParameterClauseSelf()
	}
	{
		p.SetState(519)
		p.Match(XsParserLess)
	}
	{
		p.SetState(520)
		p.Match(XsParserGreater)
	}
	{
		p.SetState(521)
		p.ParameterClauseIn()
	}
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Paren {
		{
			p.SetState(522)
			p.Left_paren()
		}
		p.SetState(524)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
			{
				p.SetState(523)
				p.ExpressionList()
			}

		}
		{
			p.SetState(526)
			p.Right_paren()
		}

	}
	{
		p.SetState(530)
		p.Left_brace()
	}
	p.SetState(534)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(531)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(536)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
	}
	{
		p.SetState(537)
		p.Right_brace()
	}

	return localctx
}

// IPackageFunctionStatementContext is an interface to support dynamic dispatch.
type IPackageFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetN returns the n token.
	GetN() antlr.Token

	// GetT returns the t token.
	GetT() antlr.Token

	// SetN sets the n token.
	SetN(antlr.Token)

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPackageFunctionStatementContext differentiates from other interfaces.
	IsPackageFunctionStatementContext()
}

type PackageFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	n      antlr.Token
	t      antlr.Token
}

func NewEmptyPackageFunctionStatementContext() *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageFunctionStatement
	return p
}

func (*PackageFunctionStatementContext) IsPackageFunctionStatementContext() {}

func NewPackageFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageFunctionStatementContext {
	var p = new(PackageFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageFunctionStatement

	return p
}

func (s *PackageFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageFunctionStatementContext) GetN() antlr.Token { return s.n }

func (s *PackageFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *PackageFunctionStatementContext) SetN(v antlr.Token) { s.n = v }

func (s *PackageFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *PackageFunctionStatementContext) ParameterClauseSelf() IParameterClauseSelfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseSelfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseSelfContext)
}

func (s *PackageFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *PackageFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *PackageFunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageFunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *PackageFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *PackageFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *PackageFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *PackageFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *PackageFunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageFunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageFunctionStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(XsParserDiscard, 0)
}

func (s *PackageFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageFunctionStatement() (localctx IPackageFunctionStatementContext) {
	localctx = NewPackageFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, XsParserRULE_packageFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(540)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(539)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(542)
		p.ParameterClauseSelf()
	}
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserDiscard {
		{
			p.SetState(543)

			var _m = p.Match(XsParserDiscard)

			localctx.(*PackageFunctionStatementContext).n = _m
		}

	}
	{
		p.SetState(546)
		p.Id()
	}
	p.SetState(548)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(547)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(550)
		p.ParameterClauseIn()
	}
	{
		p.SetState(551)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PackageFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PackageFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(552)
			p.Match(XsParserNew_Line)
		}

		p.SetState(557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(558)
		p.ParameterClauseOut()
	}
	{
		p.SetState(559)
		p.Left_brace()
	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(560)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(565)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}
	{
		p.SetState(566)
		p.Right_brace()
	}
	{
		p.SetState(567)
		p.End()
	}

	return localctx
}

// IPackageVariableStatementContext is an interface to support dynamic dispatch.
type IPackageVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageVariableStatementContext differentiates from other interfaces.
	IsPackageVariableStatementContext()
}

type PackageVariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageVariableStatementContext() *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageVariableStatement
	return p
}

func (*PackageVariableStatementContext) IsPackageVariableStatementContext() {}

func NewPackageVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageVariableStatementContext {
	var p = new(PackageVariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageVariableStatement

	return p
}

func (s *PackageVariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageVariableStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageVariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageVariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Equal, 0)
}

func (s *PackageVariableStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageVariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *PackageVariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageVariableStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageVariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *PackageVariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageVariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageVariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageVariableStatement() (localctx IPackageVariableStatementContext) {
	localctx = NewPackageVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, XsParserRULE_packageVariableStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(570)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(569)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(572)
		p.Id()
	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon_Equal:
		{
			p.SetState(573)
			p.Match(XsParserColon_Equal)
		}
		{
			p.SetState(574)
			p.expression(0)
		}

	case XsParserColon:
		{
			p.SetState(575)
			p.Match(XsParserColon)
		}
		{
			p.SetState(576)
			p.TypeType()
		}
		p.SetState(579)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserEqual {
			{
				p.SetState(577)
				p.Match(XsParserEqual)
			}
			{
				p.SetState(578)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(583)
		p.End()
	}

	return localctx
}

// IPackageControlStatementContext is an interface to support dynamic dispatch.
type IPackageControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageControlStatementContext differentiates from other interfaces.
	IsPackageControlStatementContext()
}

type PackageControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageControlStatementContext() *PackageControlStatementContext {
	var p = new(PackageControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageControlStatement
	return p
}

func (*PackageControlStatementContext) IsPackageControlStatementContext() {}

func NewPackageControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageControlStatementContext {
	var p = new(PackageControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageControlStatement

	return p
}

func (s *PackageControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageControlStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PackageControlStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PackageControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageControlStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Equal, 0)
}

func (s *PackageControlStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PackageControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *PackageControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *PackageControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *PackageControlStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *PackageControlStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *PackageControlStatementContext) AllPackageControlSubStatement() []IPackageControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem())
	var tst = make([]IPackageControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageControlSubStatementContext)
		}
	}

	return tst
}

func (s *PackageControlStatementContext) PackageControlSubStatement(i int) IPackageControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageControlSubStatementContext)
}

func (s *PackageControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageControlStatement() (localctx IPackageControlStatementContext) {
	localctx = NewPackageControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, XsParserRULE_packageControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(585)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(588)
		p.Id()
	}
	{
		p.SetState(589)
		p.Left_paren()
	}
	{
		p.SetState(590)
		p.Right_paren()
	}
	p.SetState(599)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon_Equal:
		{
			p.SetState(591)
			p.Match(XsParserColon_Equal)
		}
		{
			p.SetState(592)
			p.expression(0)
		}

	case XsParserColon:
		{
			p.SetState(593)
			p.Match(XsParserColon)
		}
		{
			p.SetState(594)
			p.TypeType()
		}
		p.SetState(597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserEqual {
			{
				p.SetState(595)
				p.Match(XsParserEqual)
			}
			{
				p.SetState(596)
				p.expression(0)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserRight_Arrow {
		{
			p.SetState(601)
			p.Match(XsParserRight_Arrow)
		}
		p.SetState(603)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(602)
				p.PackageControlSubStatement()
			}

			p.SetState(605)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(609)
		p.End()
	}

	return localctx
}

// IPackageControlSubStatementContext is an interface to support dynamic dispatch.
type IPackageControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageControlSubStatementContext differentiates from other interfaces.
	IsPackageControlSubStatementContext()
}

type PackageControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageControlSubStatementContext() *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageControlSubStatement
	return p
}

func (*PackageControlSubStatementContext) IsPackageControlSubStatementContext() {}

func NewPackageControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageControlSubStatementContext {
	var p = new(PackageControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageControlSubStatement

	return p
}

func (s *PackageControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageControlSubStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageControlSubStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PackageControlSubStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PackageControlSubStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *PackageControlSubStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *PackageControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageControlSubStatement() (localctx IPackageControlSubStatementContext) {
	localctx = NewPackageControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, XsParserRULE_packageControlSubStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(611)
		p.Id()
	}
	{
		p.SetState(612)
		p.Left_brace()
	}
	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(613)
				p.FunctionSupportStatement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(616)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}
	{
		p.SetState(618)
		p.Right_brace()
	}

	return localctx
}

// IPackageEventStatementContext is an interface to support dynamic dispatch.
type IPackageEventStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageEventStatementContext differentiates from other interfaces.
	IsPackageEventStatementContext()
}

type PackageEventStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageEventStatementContext() *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_packageEventStatement
	return p
}

func (*PackageEventStatementContext) IsPackageEventStatementContext() {}

func NewPackageEventStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageEventStatementContext {
	var p = new(PackageEventStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_packageEventStatement

	return p
}

func (s *PackageEventStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageEventStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageEventStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *PackageEventStatementContext) Event() antlr.TerminalNode {
	return s.GetToken(XsParserEvent, 0)
}

func (s *PackageEventStatementContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *PackageEventStatementContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *PackageEventStatementContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *PackageEventStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *PackageEventStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageEventStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageEventStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPackageEventStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PackageEventStatement() (localctx IPackageEventStatementContext) {
	localctx = NewPackageEventStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, XsParserRULE_packageEventStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(620)
		p.Id()
	}
	{
		p.SetState(621)
		p.Match(XsParserColon)
	}
	{
		p.SetState(622)
		p.Match(XsParserEvent)
	}
	{
		p.SetState(623)
		p.Match(XsParserLess)
	}
	{
		p.SetState(624)
		p.NameSpaceItem()
	}
	{
		p.SetState(625)
		p.Match(XsParserGreater)
	}
	{
		p.SetState(626)
		p.End()
	}

	return localctx
}

// IProtocolStatementContext is an interface to support dynamic dispatch.
type IProtocolStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolStatementContext differentiates from other interfaces.
	IsProtocolStatementContext()
}

type ProtocolStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolStatementContext() *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_protocolStatement
	return p
}

func (*ProtocolStatementContext) IsProtocolStatementContext() {}

func NewProtocolStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolStatementContext {
	var p = new(ProtocolStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_protocolStatement

	return p
}

func (s *ProtocolStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Arrow, 0)
}

func (s *ProtocolStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ProtocolStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ProtocolStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolStatementContext) AllProtocolSupportStatement() []IProtocolSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem())
	var tst = make([]IProtocolSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolSupportStatementContext)
		}
	}

	return tst
}

func (s *ProtocolStatementContext) ProtocolSupportStatement(i int) IProtocolSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolSupportStatementContext)
}

func (s *ProtocolStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProtocolStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ProtocolStatement() (localctx IProtocolStatementContext) {
	localctx = NewProtocolStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, XsParserRULE_protocolStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(628)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(631)
		p.Id()
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(632)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(635)
		p.Match(XsParserLeft_Arrow)
	}
	{
		p.SetState(636)
		p.Left_brace()
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(637)
				p.ProtocolSupportStatement()
			}

		}
		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}
	{
		p.SetState(643)
		p.Right_brace()
	}
	{
		p.SetState(644)
		p.End()
	}

	return localctx
}

// IProtocolSupportStatementContext is an interface to support dynamic dispatch.
type IProtocolSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolSupportStatementContext differentiates from other interfaces.
	IsProtocolSupportStatementContext()
}

type ProtocolSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolSupportStatementContext() *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_protocolSupportStatement
	return p
}

func (*ProtocolSupportStatementContext) IsProtocolSupportStatementContext() {}

func NewProtocolSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolSupportStatementContext {
	var p = new(ProtocolSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_protocolSupportStatement

	return p
}

func (s *ProtocolSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolSupportStatementContext) IncludeStatement() IIncludeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncludeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncludeStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolFunctionStatement() IProtocolFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolFunctionStatementContext)
}

func (s *ProtocolSupportStatementContext) ProtocolControlStatement() IProtocolControlStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolControlStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IProtocolControlStatementContext)
}

func (s *ProtocolSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *ProtocolSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProtocolSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ProtocolSupportStatement() (localctx IProtocolSupportStatementContext) {
	localctx = NewProtocolSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, XsParserRULE_protocolSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(646)
			p.IncludeStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(647)
			p.ProtocolFunctionStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(648)
			p.ProtocolControlStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(649)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IProtocolControlStatementContext is an interface to support dynamic dispatch.
type IProtocolControlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolControlStatementContext differentiates from other interfaces.
	IsProtocolControlStatementContext()
}

type ProtocolControlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolControlStatementContext() *ProtocolControlStatementContext {
	var p = new(ProtocolControlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_protocolControlStatement
	return p
}

func (*ProtocolControlStatementContext) IsProtocolControlStatementContext() {}

func NewProtocolControlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolControlStatementContext {
	var p = new(ProtocolControlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_protocolControlStatement

	return p
}

func (s *ProtocolControlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolControlStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolControlStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ProtocolControlStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ProtocolControlStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *ProtocolControlStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ProtocolControlStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolControlStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolControlStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *ProtocolControlStatementContext) AllProtocolControlSubStatement() []IProtocolControlSubStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProtocolControlSubStatementContext)(nil)).Elem())
	var tst = make([]IProtocolControlSubStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProtocolControlSubStatementContext)
		}
	}

	return tst
}

func (s *ProtocolControlStatementContext) ProtocolControlSubStatement(i int) IProtocolControlSubStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProtocolControlSubStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProtocolControlSubStatementContext)
}

func (s *ProtocolControlStatementContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(XsParserComma)
}

func (s *ProtocolControlStatementContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(XsParserComma, i)
}

func (s *ProtocolControlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolControlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolControlStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProtocolControlStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ProtocolControlStatement() (localctx IProtocolControlStatementContext) {
	localctx = NewProtocolControlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, XsParserRULE_protocolControlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(652)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(655)
		p.Id()
	}
	{
		p.SetState(656)
		p.Left_paren()
	}
	{
		p.SetState(657)
		p.Right_paren()
	}
	{
		p.SetState(658)
		p.Match(XsParserColon)
	}
	{
		p.SetState(659)
		p.TypeType()
	}
	p.SetState(669)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserRight_Arrow {
		{
			p.SetState(660)
			p.Match(XsParserRight_Arrow)
		}
		{
			p.SetState(661)
			p.ProtocolControlSubStatement()
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == XsParserComma {
			{
				p.SetState(662)
				p.Match(XsParserComma)
			}
			{
				p.SetState(663)
				p.ProtocolControlSubStatement()
			}

			p.SetState(668)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(671)
		p.End()
	}

	return localctx
}

// IProtocolControlSubStatementContext is an interface to support dynamic dispatch.
type IProtocolControlSubStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProtocolControlSubStatementContext differentiates from other interfaces.
	IsProtocolControlSubStatementContext()
}

type ProtocolControlSubStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProtocolControlSubStatementContext() *ProtocolControlSubStatementContext {
	var p = new(ProtocolControlSubStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_protocolControlSubStatement
	return p
}

func (*ProtocolControlSubStatementContext) IsProtocolControlSubStatementContext() {}

func NewProtocolControlSubStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolControlSubStatementContext {
	var p = new(ProtocolControlSubStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_protocolControlSubStatement

	return p
}

func (s *ProtocolControlSubStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolControlSubStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolControlSubStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolControlSubStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolControlSubStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProtocolControlSubStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ProtocolControlSubStatement() (localctx IProtocolControlSubStatementContext) {
	localctx = NewProtocolControlSubStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, XsParserRULE_protocolControlSubStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(673)
		p.Id()
	}

	return localctx
}

// IProtocolFunctionStatementContext is an interface to support dynamic dispatch.
type IProtocolFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsProtocolFunctionStatementContext differentiates from other interfaces.
	IsProtocolFunctionStatementContext()
}

type ProtocolFunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyProtocolFunctionStatementContext() *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_protocolFunctionStatement
	return p
}

func (*ProtocolFunctionStatementContext) IsProtocolFunctionStatementContext() {}

func NewProtocolFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProtocolFunctionStatementContext {
	var p = new(ProtocolFunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_protocolFunctionStatement

	return p
}

func (s *ProtocolFunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ProtocolFunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *ProtocolFunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *ProtocolFunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *ProtocolFunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *ProtocolFunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ProtocolFunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *ProtocolFunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *ProtocolFunctionStatementContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ProtocolFunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *ProtocolFunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *ProtocolFunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *ProtocolFunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProtocolFunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProtocolFunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitProtocolFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ProtocolFunctionStatement() (localctx IProtocolFunctionStatementContext) {
	localctx = NewProtocolFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, XsParserRULE_protocolFunctionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(675)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(678)
		p.Id()
	}
	p.SetState(680)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(679)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(682)
		p.ParameterClauseIn()
	}
	{
		p.SetState(683)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ProtocolFunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ProtocolFunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(687)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(684)
			p.Match(XsParserNew_Line)
		}

		p.SetState(689)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(690)
		p.ParameterClauseOut()
	}
	{
		p.SetState(691)
		p.End()
	}

	return localctx
}

// IFunctionStatementContext is an interface to support dynamic dispatch.
type IFunctionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsFunctionStatementContext differentiates from other interfaces.
	IsFunctionStatementContext()
}

type FunctionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyFunctionStatementContext() *FunctionStatementContext {
	var p = new(FunctionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_functionStatement
	return p
}

func (*FunctionStatementContext) IsFunctionStatementContext() {}

func NewFunctionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionStatementContext {
	var p = new(FunctionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_functionStatement

	return p
}

func (s *FunctionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionStatementContext) GetT() antlr.Token { return s.t }

func (s *FunctionStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FunctionStatementContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionStatementContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *FunctionStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *FunctionStatementContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *FunctionStatementContext) TemplateDefine() ITemplateDefineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineContext)
}

func (s *FunctionStatementContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *FunctionStatementContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *FunctionStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitFunctionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) FunctionStatement() (localctx IFunctionStatementContext) {
	localctx = NewFunctionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, XsParserRULE_functionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(693)
		p.Id()
	}
	p.SetState(695)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(694)
			p.TemplateDefine()
		}

	}
	{
		p.SetState(697)
		p.ParameterClauseIn()
	}
	{
		p.SetState(698)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionStatementContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionStatementContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(699)
			p.Match(XsParserNew_Line)
		}

		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(705)
		p.ParameterClauseOut()
	}
	{
		p.SetState(706)
		p.Left_brace()
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(707)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}
	{
		p.SetState(713)
		p.Right_brace()
	}
	{
		p.SetState(714)
		p.End()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Arrow, 0)
}

func (s *ReturnStatementContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *ReturnStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, XsParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.Match(XsParserLeft_Arrow)
	}
	{
		p.SetState(717)
		p.Tuple()
	}
	{
		p.SetState(718)
		p.End()
	}

	return localctx
}

// IParameterClauseInContext is an interface to support dynamic dispatch.
type IParameterClauseInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseInContext differentiates from other interfaces.
	IsParameterClauseInContext()
}

type ParameterClauseInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseInContext() *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_parameterClauseIn
	return p
}

func (*ParameterClauseInContext) IsParameterClauseInContext() {}

func NewParameterClauseInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseInContext {
	var p = new(ParameterClauseInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_parameterClauseIn

	return p
}

func (s *ParameterClauseInContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseInContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ParameterClauseInContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ParameterClauseInContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitParameterClauseIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ParameterClauseIn() (localctx IParameterClauseInContext) {
	localctx = NewParameterClauseInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, XsParserRULE_parameterClauseIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(720)
		p.Left_paren()
	}
	p.SetState(722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(XsParserLeft_Brack-46))|(1<<(XsParserTypeI8-46))|(1<<(XsParserTypeU8-46))|(1<<(XsParserTypeI16-46))|(1<<(XsParserTypeU16-46))|(1<<(XsParserTypeI32-46))|(1<<(XsParserTypeU32-46))|(1<<(XsParserTypeI64-46))|(1<<(XsParserTypeU64-46))|(1<<(XsParserTypeF32-46))|(1<<(XsParserTypeF64-46))|(1<<(XsParserTypeChr-46))|(1<<(XsParserTypeStr-46))|(1<<(XsParserTypeBool-46))|(1<<(XsParserTypeInt-46))|(1<<(XsParserTypeNum-46)))) != 0) || _la == XsParserIDPrivate || _la == XsParserIDPublic {
		{
			p.SetState(721)
			p.Parameter()
		}

	}
	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(724)
			p.More()
		}
		{
			p.SetState(725)
			p.Parameter()
		}

		p.SetState(731)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(732)
		p.Right_paren()
	}

	return localctx
}

// IParameterClauseOutContext is an interface to support dynamic dispatch.
type IParameterClauseOutContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseOutContext differentiates from other interfaces.
	IsParameterClauseOutContext()
}

type ParameterClauseOutContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseOutContext() *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_parameterClauseOut
	return p
}

func (*ParameterClauseOutContext) IsParameterClauseOutContext() {}

func NewParameterClauseOutContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseOutContext {
	var p = new(ParameterClauseOutContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_parameterClauseOut

	return p
}

func (s *ParameterClauseOutContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseOutContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ParameterClauseOutContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ParameterClauseOutContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterClauseOutContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ParameterClauseOutContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ParameterClauseOutContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseOutContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseOutContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitParameterClauseOut(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ParameterClauseOut() (localctx IParameterClauseOutContext) {
	localctx = NewParameterClauseOutContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, XsParserRULE_parameterClauseOut)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(734)
		p.Left_paren()
	}
	p.SetState(736)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(XsParserLeft_Brack-46))|(1<<(XsParserTypeI8-46))|(1<<(XsParserTypeU8-46))|(1<<(XsParserTypeI16-46))|(1<<(XsParserTypeU16-46))|(1<<(XsParserTypeI32-46))|(1<<(XsParserTypeU32-46))|(1<<(XsParserTypeI64-46))|(1<<(XsParserTypeU64-46))|(1<<(XsParserTypeF32-46))|(1<<(XsParserTypeF64-46))|(1<<(XsParserTypeChr-46))|(1<<(XsParserTypeStr-46))|(1<<(XsParserTypeBool-46))|(1<<(XsParserTypeInt-46))|(1<<(XsParserTypeNum-46)))) != 0) || _la == XsParserIDPrivate || _la == XsParserIDPublic {
		{
			p.SetState(735)
			p.Parameter()
		}

	}
	p.SetState(743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(738)
			p.More()
		}
		{
			p.SetState(739)
			p.Parameter()
		}

		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(746)
		p.Right_paren()
	}

	return localctx
}

// IParameterClauseSelfContext is an interface to support dynamic dispatch.
type IParameterClauseSelfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterClauseSelfContext differentiates from other interfaces.
	IsParameterClauseSelfContext()
}

type ParameterClauseSelfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterClauseSelfContext() *ParameterClauseSelfContext {
	var p = new(ParameterClauseSelfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_parameterClauseSelf
	return p
}

func (*ParameterClauseSelfContext) IsParameterClauseSelfContext() {}

func NewParameterClauseSelfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterClauseSelfContext {
	var p = new(ParameterClauseSelfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_parameterClauseSelf

	return p
}

func (s *ParameterClauseSelfContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterClauseSelfContext) AllLeft_paren() []ILeft_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem())
	var tst = make([]ILeft_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILeft_parenContext)
		}
	}

	return tst
}

func (s *ParameterClauseSelfContext) Left_paren(i int) ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ParameterClauseSelfContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *ParameterClauseSelfContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterClauseSelfContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *ParameterClauseSelfContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterClauseSelfContext) AllRight_paren() []IRight_parenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRight_parenContext)(nil)).Elem())
	var tst = make([]IRight_parenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRight_parenContext)
		}
	}

	return tst
}

func (s *ParameterClauseSelfContext) Right_paren(i int) IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ParameterClauseSelfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterClauseSelfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterClauseSelfContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitParameterClauseSelf(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ParameterClauseSelf() (localctx IParameterClauseSelfContext) {
	localctx = NewParameterClauseSelfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, XsParserRULE_parameterClauseSelf)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(748)
		p.Left_paren()
	}
	{
		p.SetState(749)
		p.Id()
	}
	{
		p.SetState(750)
		p.Match(XsParserColon)
	}
	{
		p.SetState(751)
		p.TypeType()
	}
	{
		p.SetState(752)
		p.Right_paren()
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Paren {
		{
			p.SetState(753)
			p.Left_paren()
		}
		{
			p.SetState(754)
			p.Id()
		}
		{
			p.SetState(755)
			p.Right_paren()
		}

	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *ParameterContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ParameterContext) AnnotationSupport() IAnnotationSupportContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationSupportContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationSupportContext)
}

func (s *ParameterContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *ParameterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, XsParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(760)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(759)
			p.AnnotationSupport()
		}

	}
	{
		p.SetState(762)
		p.Id()
	}
	{
		p.SetState(763)
		p.Match(XsParserColon)
	}
	{
		p.SetState(764)
		p.TypeType()
	}
	p.SetState(767)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserEqual {
		{
			p.SetState(765)
			p.Match(XsParserEqual)
		}
		{
			p.SetState(766)
			p.expression(0)
		}

	}

	return localctx
}

// IFunctionSupportStatementContext is an interface to support dynamic dispatch.
type IFunctionSupportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSupportStatementContext differentiates from other interfaces.
	IsFunctionSupportStatementContext()
}

type FunctionSupportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSupportStatementContext() *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_functionSupportStatement
	return p
}

func (*FunctionSupportStatementContext) IsFunctionSupportStatementContext() {}

func NewFunctionSupportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSupportStatementContext {
	var p = new(FunctionSupportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_functionSupportStatement

	return p
}

func (s *FunctionSupportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSupportStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeCaseStatement() IJudgeCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeCaseStatementContext)
}

func (s *FunctionSupportStatementContext) JudgeStatement() IJudgeStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeStatementContext)
}

func (s *FunctionSupportStatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *FunctionSupportStatementContext) LoopEachStatement() ILoopEachStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopEachStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopEachStatementContext)
}

func (s *FunctionSupportStatementContext) LoopCaseStatement() ILoopCaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopCaseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopCaseStatementContext)
}

func (s *FunctionSupportStatementContext) LoopInfiniteStatement() ILoopInfiniteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopInfiniteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopInfiniteStatementContext)
}

func (s *FunctionSupportStatementContext) LoopJumpStatement() ILoopJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopJumpStatementContext)
}

func (s *FunctionSupportStatementContext) LoopContinueStatement() ILoopContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopContinueStatementContext)
}

func (s *FunctionSupportStatementContext) UsingStatement() IUsingStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingStatementContext)
}

func (s *FunctionSupportStatementContext) CheckStatement() ICheckStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckStatementContext)
}

func (s *FunctionSupportStatementContext) ReportStatement() IReportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReportStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReportStatementContext)
}

func (s *FunctionSupportStatementContext) FunctionStatement() IFunctionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionStatementContext)
}

func (s *FunctionSupportStatementContext) VariableStatement() IVariableStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableStatementContext)
}

func (s *FunctionSupportStatementContext) VariableDeclaredStatement() IVariableDeclaredStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclaredStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclaredStatementContext)
}

func (s *FunctionSupportStatementContext) ChannelAssignStatement() IChannelAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelAssignStatementContext)
}

func (s *FunctionSupportStatementContext) AssignStatement() IAssignStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignStatementContext)
}

func (s *FunctionSupportStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *FunctionSupportStatementContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *FunctionSupportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSupportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSupportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitFunctionSupportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) FunctionSupportStatement() (localctx IFunctionSupportStatementContext) {
	localctx = NewFunctionSupportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, XsParserRULE_functionSupportStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(769)
			p.ReturnStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(770)
			p.JudgeCaseStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(771)
			p.JudgeStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(772)
			p.LoopStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(773)
			p.LoopEachStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(774)
			p.LoopCaseStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(775)
			p.LoopInfiniteStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(776)
			p.LoopJumpStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(777)
			p.LoopContinueStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(778)
			p.UsingStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(779)
			p.CheckStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(780)
			p.ReportStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(781)
			p.FunctionStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(782)
			p.VariableStatement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(783)
			p.VariableDeclaredStatement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(784)
			p.ChannelAssignStatement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(785)
			p.AssignStatement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(786)
			p.ExpressionStatement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(787)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IJudgeCaseStatementContext is an interface to support dynamic dispatch.
type IJudgeCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeCaseStatementContext differentiates from other interfaces.
	IsJudgeCaseStatementContext()
}

type JudgeCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeCaseStatementContext() *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeCaseStatement
	return p
}

func (*JudgeCaseStatementContext) IsJudgeCaseStatementContext() {}

func NewJudgeCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeCaseStatementContext {
	var p = new(JudgeCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeCaseStatement

	return p
}

func (s *JudgeCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeCaseStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *JudgeCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeCaseStatementContext) AllCaseStatement() []ICaseStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem())
	var tst = make([]ICaseStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICaseStatementContext)
		}
	}

	return tst
}

func (s *JudgeCaseStatementContext) CaseStatement(i int) ICaseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICaseStatementContext)
}

func (s *JudgeCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeCaseStatement() (localctx IJudgeCaseStatementContext) {
	localctx = NewJudgeCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, XsParserRULE_judgeCaseStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(790)
		p.expression(0)
	}
	{
		p.SetState(791)
		p.Match(XsParserQuestion)
	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserColon-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
		{
			p.SetState(792)
			p.CaseStatement()
		}

		p.SetState(795)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(797)
		p.End()
	}

	return localctx
}

// ICaseDefaultStatementContext is an interface to support dynamic dispatch.
type ICaseDefaultStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseDefaultStatementContext differentiates from other interfaces.
	IsCaseDefaultStatementContext()
}

type CaseDefaultStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseDefaultStatementContext() *CaseDefaultStatementContext {
	var p = new(CaseDefaultStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_caseDefaultStatement
	return p
}

func (*CaseDefaultStatementContext) IsCaseDefaultStatementContext() {}

func NewCaseDefaultStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseDefaultStatementContext {
	var p = new(CaseDefaultStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_caseDefaultStatement

	return p
}

func (s *CaseDefaultStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseDefaultStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(XsParserDiscard, 0)
}

func (s *CaseDefaultStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseDefaultStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseDefaultStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseDefaultStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseDefaultStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseDefaultStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseDefaultStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCaseDefaultStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CaseDefaultStatement() (localctx ICaseDefaultStatementContext) {
	localctx = NewCaseDefaultStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, XsParserRULE_caseDefaultStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.Match(XsParserDiscard)
	}
	{
		p.SetState(800)
		p.Left_brace()
	}
	p.SetState(804)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(801)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(806)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())
	}
	{
		p.SetState(807)
		p.Right_brace()
	}

	return localctx
}

// ICaseExprStatementContext is an interface to support dynamic dispatch.
type ICaseExprStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseExprStatementContext differentiates from other interfaces.
	IsCaseExprStatementContext()
}

type CaseExprStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExprStatementContext() *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_caseExprStatement
	return p
}

func (*CaseExprStatementContext) IsCaseExprStatementContext() {}

func NewCaseExprStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprStatementContext {
	var p = new(CaseExprStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_caseExprStatement

	return p
}

func (s *CaseExprStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CaseExprStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CaseExprStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseExprStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *CaseExprStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CaseExprStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CaseExprStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CaseExprStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CaseExprStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCaseExprStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CaseExprStatement() (localctx ICaseExprStatementContext) {
	localctx = NewCaseExprStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, XsParserRULE_caseExprStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(815)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(809)
			p.expression(0)
		}

	case 2:
		p.SetState(811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(810)
				p.Id()
			}

		}
		{
			p.SetState(813)
			p.Match(XsParserColon)
		}
		{
			p.SetState(814)
			p.TypeType()
		}

	}
	{
		p.SetState(817)
		p.Left_brace()
	}
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(818)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())
	}
	{
		p.SetState(824)
		p.Right_brace()
	}

	return localctx
}

// ICaseStatementContext is an interface to support dynamic dispatch.
type ICaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCaseStatementContext differentiates from other interfaces.
	IsCaseStatementContext()
}

type CaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseStatementContext() *CaseStatementContext {
	var p = new(CaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_caseStatement
	return p
}

func (*CaseStatementContext) IsCaseStatementContext() {}

func NewCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseStatementContext {
	var p = new(CaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_caseStatement

	return p
}

func (s *CaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseStatementContext) CaseDefaultStatement() ICaseDefaultStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseDefaultStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseDefaultStatementContext)
}

func (s *CaseStatementContext) CaseExprStatement() ICaseExprStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICaseExprStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICaseExprStatementContext)
}

func (s *CaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CaseStatement() (localctx ICaseStatementContext) {
	localctx = NewCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, XsParserRULE_caseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(826)
			p.CaseDefaultStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(827)
			p.CaseExprStatement()
		}

	}

	return localctx
}

// IJudgeStatementContext is an interface to support dynamic dispatch.
type IJudgeStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeStatementContext differentiates from other interfaces.
	IsJudgeStatementContext()
}

type JudgeStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeStatementContext() *JudgeStatementContext {
	var p = new(JudgeStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeStatement
	return p
}

func (*JudgeStatementContext) IsJudgeStatementContext() {}

func NewJudgeStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeStatementContext {
	var p = new(JudgeStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeStatement

	return p
}

func (s *JudgeStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeStatementContext) JudgeIfStatement() IJudgeIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeIfStatementContext)
}

func (s *JudgeStatementContext) JudgeElseStatement() IJudgeElseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseStatementContext)
}

func (s *JudgeStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *JudgeStatementContext) AllJudgeElseIfStatement() []IJudgeElseIfStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem())
	var tst = make([]IJudgeElseIfStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJudgeElseIfStatementContext)
		}
	}

	return tst
}

func (s *JudgeStatementContext) JudgeElseIfStatement(i int) IJudgeElseIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeElseIfStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJudgeElseIfStatementContext)
}

func (s *JudgeStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeStatement() (localctx IJudgeStatementContext) {
	localctx = NewJudgeStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, XsParserRULE_judgeStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(830)
			p.JudgeIfStatement()
		}
		p.SetState(834)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(831)
					p.JudgeElseIfStatement()
				}

			}
			p.SetState(836)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
		}
		{
			p.SetState(837)
			p.JudgeElseStatement()
		}
		{
			p.SetState(838)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(840)
			p.JudgeIfStatement()
		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
			{
				p.SetState(841)
				p.JudgeElseIfStatement()
			}

			p.SetState(846)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(847)
			p.End()
		}

	}

	return localctx
}

// IJudgeElseStatementContext is an interface to support dynamic dispatch.
type IJudgeElseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseStatementContext differentiates from other interfaces.
	IsJudgeElseStatementContext()
}

type JudgeElseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseStatementContext() *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeElseStatement
	return p
}

func (*JudgeElseStatementContext) IsJudgeElseStatementContext() {}

func NewJudgeElseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseStatementContext {
	var p = new(JudgeElseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeElseStatement

	return p
}

func (s *JudgeElseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseStatementContext) Discard() antlr.TerminalNode {
	return s.GetToken(XsParserDiscard, 0)
}

func (s *JudgeElseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeElseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeElseStatement() (localctx IJudgeElseStatementContext) {
	localctx = NewJudgeElseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, XsParserRULE_judgeElseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(851)
		p.Match(XsParserDiscard)
	}
	{
		p.SetState(852)
		p.Left_brace()
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(853)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext())
	}
	{
		p.SetState(859)
		p.Right_brace()
	}

	return localctx
}

// IJudgeIfStatementContext is an interface to support dynamic dispatch.
type IJudgeIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeIfStatementContext differentiates from other interfaces.
	IsJudgeIfStatementContext()
}

type JudgeIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeIfStatementContext() *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeIfStatement
	return p
}

func (*JudgeIfStatementContext) IsJudgeIfStatementContext() {}

func NewJudgeIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeIfStatementContext {
	var p = new(JudgeIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeIfStatement

	return p
}

func (s *JudgeIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeIfStatementContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *JudgeIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeIfStatement() (localctx IJudgeIfStatementContext) {
	localctx = NewJudgeIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, XsParserRULE_judgeIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(861)
		p.Match(XsParserQuestion)
	}
	{
		p.SetState(862)
		p.expression(0)
	}
	{
		p.SetState(863)
		p.Left_brace()
	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(864)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(869)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}
	{
		p.SetState(870)
		p.Right_brace()
	}

	return localctx
}

// IJudgeElseIfStatementContext is an interface to support dynamic dispatch.
type IJudgeElseIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJudgeElseIfStatementContext differentiates from other interfaces.
	IsJudgeElseIfStatementContext()
}

type JudgeElseIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJudgeElseIfStatementContext() *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeElseIfStatement
	return p
}

func (*JudgeElseIfStatementContext) IsJudgeElseIfStatementContext() {}

func NewJudgeElseIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeElseIfStatementContext {
	var p = new(JudgeElseIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeElseIfStatement

	return p
}

func (s *JudgeElseIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeElseIfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JudgeElseIfStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *JudgeElseIfStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *JudgeElseIfStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *JudgeElseIfStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *JudgeElseIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeElseIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeElseIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeElseIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeElseIfStatement() (localctx IJudgeElseIfStatementContext) {
	localctx = NewJudgeElseIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, XsParserRULE_judgeElseIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(872)
		p.expression(0)
	}
	{
		p.SetState(873)
		p.Left_brace()
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(874)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(879)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}
	{
		p.SetState(880)
		p.Right_brace()
	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) IteratorStatement() IIteratorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIteratorStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIteratorStatementContext)
}

func (s *LoopStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, XsParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(882)
		p.IteratorStatement()
	}
	{
		p.SetState(883)
		p.Match(XsParserAt)
	}
	{
		p.SetState(884)
		p.Id()
	}
	{
		p.SetState(885)
		p.Left_brace()
	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(886)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(891)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}
	{
		p.SetState(892)
		p.Right_brace()
	}
	{
		p.SetState(893)
		p.End()
	}

	return localctx
}

// ILoopEachStatementContext is an interface to support dynamic dispatch.
type ILoopEachStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopEachStatementContext differentiates from other interfaces.
	IsLoopEachStatementContext()
}

type LoopEachStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopEachStatementContext() *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopEachStatement
	return p
}

func (*LoopEachStatementContext) IsLoopEachStatementContext() {}

func NewLoopEachStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopEachStatementContext {
	var p = new(LoopEachStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopEachStatement

	return p
}

func (s *LoopEachStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopEachStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopEachStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopEachStatementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LoopEachStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopEachStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopEachStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopEachStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *LoopEachStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *LoopEachStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopEachStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopEachStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopEachStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopEachStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopEachStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopEachStatement() (localctx ILoopEachStatementContext) {
	localctx = NewLoopEachStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, XsParserRULE_loopEachStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(895)
		p.expression(0)
	}
	{
		p.SetState(896)
		p.Match(XsParserAt)
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Brack {
		{
			p.SetState(897)
			p.Match(XsParserLeft_Brack)
		}
		{
			p.SetState(898)
			p.Id()
		}
		{
			p.SetState(899)
			p.Match(XsParserRight_Brack)
		}

	}
	{
		p.SetState(903)
		p.Id()
	}
	{
		p.SetState(904)
		p.Left_brace()
	}
	p.SetState(908)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(905)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(910)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}
	{
		p.SetState(911)
		p.Right_brace()
	}
	{
		p.SetState(912)
		p.End()
	}

	return localctx
}

// ILoopCaseStatementContext is an interface to support dynamic dispatch.
type ILoopCaseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopCaseStatementContext differentiates from other interfaces.
	IsLoopCaseStatementContext()
}

type LoopCaseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopCaseStatementContext() *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopCaseStatement
	return p
}

func (*LoopCaseStatementContext) IsLoopCaseStatementContext() {}

func NewLoopCaseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopCaseStatementContext {
	var p = new(LoopCaseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopCaseStatement

	return p
}

func (s *LoopCaseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopCaseStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopCaseStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LoopCaseStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopCaseStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopCaseStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopCaseStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopCaseStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopCaseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopCaseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopCaseStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopCaseStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopCaseStatement() (localctx ILoopCaseStatementContext) {
	localctx = NewLoopCaseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, XsParserRULE_loopCaseStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(914)
		p.Match(XsParserAt)
	}
	{
		p.SetState(915)
		p.expression(0)
	}
	{
		p.SetState(916)
		p.Left_brace()
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(917)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(922)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext())
	}
	{
		p.SetState(923)
		p.Right_brace()
	}
	{
		p.SetState(924)
		p.End()
	}

	return localctx
}

// ILoopInfiniteStatementContext is an interface to support dynamic dispatch.
type ILoopInfiniteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopInfiniteStatementContext differentiates from other interfaces.
	IsLoopInfiniteStatementContext()
}

type LoopInfiniteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopInfiniteStatementContext() *LoopInfiniteStatementContext {
	var p = new(LoopInfiniteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopInfiniteStatement
	return p
}

func (*LoopInfiniteStatementContext) IsLoopInfiniteStatementContext() {}

func NewLoopInfiniteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopInfiniteStatementContext {
	var p = new(LoopInfiniteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopInfiniteStatement

	return p
}

func (s *LoopInfiniteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopInfiniteStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopInfiniteStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LoopInfiniteStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LoopInfiniteStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopInfiniteStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LoopInfiniteStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LoopInfiniteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopInfiniteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopInfiniteStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopInfiniteStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopInfiniteStatement() (localctx ILoopInfiniteStatementContext) {
	localctx = NewLoopInfiniteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, XsParserRULE_loopInfiniteStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(926)
		p.Match(XsParserAt)
	}
	{
		p.SetState(927)
		p.Left_brace()
	}
	p.SetState(931)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(928)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(933)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
	}
	{
		p.SetState(934)
		p.Right_brace()
	}
	{
		p.SetState(935)
		p.End()
	}

	return localctx
}

// ILoopJumpStatementContext is an interface to support dynamic dispatch.
type ILoopJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopJumpStatementContext differentiates from other interfaces.
	IsLoopJumpStatementContext()
}

type LoopJumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopJumpStatementContext() *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopJumpStatement
	return p
}

func (*LoopJumpStatementContext) IsLoopJumpStatementContext() {}

func NewLoopJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopJumpStatementContext {
	var p = new(LoopJumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopJumpStatement

	return p
}

func (s *LoopJumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopJumpStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Arrow, 0)
}

func (s *LoopJumpStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopJumpStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopJumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopJumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopJumpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopJumpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopJumpStatement() (localctx ILoopJumpStatementContext) {
	localctx = NewLoopJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, XsParserRULE_loopJumpStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(937)
		p.Match(XsParserLeft_Arrow)
	}
	{
		p.SetState(938)
		p.Match(XsParserAt)
	}
	{
		p.SetState(939)
		p.End()
	}

	return localctx
}

// ILoopContinueStatementContext is an interface to support dynamic dispatch.
type ILoopContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopContinueStatementContext differentiates from other interfaces.
	IsLoopContinueStatementContext()
}

type LoopContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopContinueStatementContext() *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_loopContinueStatement
	return p
}

func (*LoopContinueStatementContext) IsLoopContinueStatementContext() {}

func NewLoopContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopContinueStatementContext {
	var p = new(LoopContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_loopContinueStatement

	return p
}

func (s *LoopContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopContinueStatementContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *LoopContinueStatementContext) At() antlr.TerminalNode {
	return s.GetToken(XsParserAt, 0)
}

func (s *LoopContinueStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *LoopContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLoopContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LoopContinueStatement() (localctx ILoopContinueStatementContext) {
	localctx = NewLoopContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, XsParserRULE_loopContinueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(XsParserRight_Arrow)
	}
	{
		p.SetState(942)
		p.Match(XsParserAt)
	}
	{
		p.SetState(943)
		p.End()
	}

	return localctx
}

// ICheckStatementContext is an interface to support dynamic dispatch.
type ICheckStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckStatementContext differentiates from other interfaces.
	IsCheckStatementContext()
}

type CheckStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckStatementContext() *CheckStatementContext {
	var p = new(CheckStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_checkStatement
	return p
}

func (*CheckStatementContext) IsCheckStatementContext() {}

func NewCheckStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckStatementContext {
	var p = new(CheckStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_checkStatement

	return p
}

func (s *CheckStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(XsParserBang, 0)
}

func (s *CheckStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckStatementContext) CheckFinallyStatment() ICheckFinallyStatmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckFinallyStatmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheckFinallyStatmentContext)
}

func (s *CheckStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *CheckStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckStatementContext) AllCheckErrorStatement() []ICheckErrorStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem())
	var tst = make([]ICheckErrorStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheckErrorStatementContext)
		}
	}

	return tst
}

func (s *CheckStatementContext) CheckErrorStatement(i int) ICheckErrorStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheckErrorStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheckErrorStatementContext)
}

func (s *CheckStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCheckStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CheckStatement() (localctx ICheckStatementContext) {
	localctx = NewCheckStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, XsParserRULE_checkStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(979)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(945)
			p.Match(XsParserBang)
		}
		{
			p.SetState(946)
			p.Left_brace()
		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(947)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(952)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
		}
		{
			p.SetState(953)
			p.Right_brace()
		}
		p.SetState(957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(954)
				p.CheckErrorStatement()
			}

			p.SetState(959)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(960)
			p.CheckFinallyStatment()
		}
		{
			p.SetState(961)
			p.End()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(963)
			p.Match(XsParserBang)
		}
		{
			p.SetState(964)
			p.Left_brace()
		}
		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(965)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(970)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())
		}
		{
			p.SetState(971)
			p.Right_brace()
		}
		p.SetState(973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(972)
				p.CheckErrorStatement()
			}

			p.SetState(975)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(977)
			p.End()
		}

	}

	return localctx
}

// IUsingStatementContext is an interface to support dynamic dispatch.
type IUsingStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingStatementContext differentiates from other interfaces.
	IsUsingStatementContext()
}

type UsingStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingStatementContext() *UsingStatementContext {
	var p = new(UsingStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_usingStatement
	return p
}

func (*UsingStatementContext) IsUsingStatementContext() {}

func NewUsingStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingStatementContext {
	var p = new(UsingStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_usingStatement

	return p
}

func (s *UsingStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *UsingStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UsingStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(XsParserBang, 0)
}

func (s *UsingStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *UsingStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *UsingStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *UsingStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitUsingStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) UsingStatement() (localctx IUsingStatementContext) {
	localctx = NewUsingStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, XsParserRULE_usingStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(981)
		p.expression(0)
	}
	{
		p.SetState(982)
		p.Match(XsParserBang)
	}
	{
		p.SetState(983)
		p.expression(0)
	}
	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserColon {
		{
			p.SetState(984)
			p.Match(XsParserColon)
		}
		{
			p.SetState(985)
			p.TypeType()
		}

	}
	{
		p.SetState(988)
		p.End()
	}

	return localctx
}

// ICheckErrorStatementContext is an interface to support dynamic dispatch.
type ICheckErrorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckErrorStatementContext differentiates from other interfaces.
	IsCheckErrorStatementContext()
}

type CheckErrorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckErrorStatementContext() *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_checkErrorStatement
	return p
}

func (*CheckErrorStatementContext) IsCheckErrorStatementContext() {}

func NewCheckErrorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckErrorStatementContext {
	var p = new(CheckErrorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_checkErrorStatement

	return p
}

func (s *CheckErrorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckErrorStatementContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckErrorStatementContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckErrorStatementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CheckErrorStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *CheckErrorStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CheckErrorStatementContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckErrorStatementContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckErrorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckErrorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckErrorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCheckErrorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CheckErrorStatement() (localctx ICheckErrorStatementContext) {
	localctx = NewCheckErrorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, XsParserRULE_checkErrorStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(995)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(990)
			p.Id()
		}

	case 2:
		{
			p.SetState(991)
			p.Id()
		}
		{
			p.SetState(992)
			p.Match(XsParserColon)
		}
		{
			p.SetState(993)
			p.TypeType()
		}

	}
	{
		p.SetState(997)
		p.Left_brace()
	}
	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(998)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
	}
	{
		p.SetState(1004)
		p.Right_brace()
	}

	return localctx
}

// ICheckFinallyStatmentContext is an interface to support dynamic dispatch.
type ICheckFinallyStatmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheckFinallyStatmentContext differentiates from other interfaces.
	IsCheckFinallyStatmentContext()
}

type CheckFinallyStatmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheckFinallyStatmentContext() *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_checkFinallyStatment
	return p
}

func (*CheckFinallyStatmentContext) IsCheckFinallyStatmentContext() {}

func NewCheckFinallyStatmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CheckFinallyStatmentContext {
	var p = new(CheckFinallyStatmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_checkFinallyStatment

	return p
}

func (s *CheckFinallyStatmentContext) GetParser() antlr.Parser { return s.parser }

func (s *CheckFinallyStatmentContext) Discard() antlr.TerminalNode {
	return s.GetToken(XsParserDiscard, 0)
}

func (s *CheckFinallyStatmentContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CheckFinallyStatmentContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CheckFinallyStatmentContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *CheckFinallyStatmentContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *CheckFinallyStatmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CheckFinallyStatmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CheckFinallyStatmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCheckFinallyStatment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CheckFinallyStatment() (localctx ICheckFinallyStatmentContext) {
	localctx = NewCheckFinallyStatmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, XsParserRULE_checkFinallyStatment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1006)
		p.Match(XsParserDiscard)
	}
	{
		p.SetState(1007)
		p.Left_brace()
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1008)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1013)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext())
	}
	{
		p.SetState(1014)
		p.Right_brace()
	}

	return localctx
}

// IReportStatementContext is an interface to support dynamic dispatch.
type IReportStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReportStatementContext differentiates from other interfaces.
	IsReportStatementContext()
}

type ReportStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReportStatementContext() *ReportStatementContext {
	var p = new(ReportStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_reportStatement
	return p
}

func (*ReportStatementContext) IsReportStatementContext() {}

func NewReportStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReportStatementContext {
	var p = new(ReportStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_reportStatement

	return p
}

func (s *ReportStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReportStatementContext) Bang() antlr.TerminalNode {
	return s.GetToken(XsParserBang, 0)
}

func (s *ReportStatementContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *ReportStatementContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *ReportStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ReportStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReportStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReportStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReportStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitReportStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ReportStatement() (localctx IReportStatementContext) {
	localctx = NewReportStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, XsParserRULE_reportStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1016)
		p.Match(XsParserBang)
	}
	{
		p.SetState(1017)
		p.Left_paren()
	}
	p.SetState(1019)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
		{
			p.SetState(1018)
			p.expression(0)
		}

	}
	{
		p.SetState(1021)
		p.Right_paren()
	}
	{
		p.SetState(1022)
		p.End()
	}

	return localctx
}

// IIteratorStatementContext is an interface to support dynamic dispatch.
type IIteratorStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIteratorStatementContext differentiates from other interfaces.
	IsIteratorStatementContext()
}

type IteratorStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIteratorStatementContext() *IteratorStatementContext {
	var p = new(IteratorStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_iteratorStatement
	return p
}

func (*IteratorStatementContext) IsIteratorStatementContext() {}

func NewIteratorStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IteratorStatementContext {
	var p = new(IteratorStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_iteratorStatement

	return p
}

func (s *IteratorStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IteratorStatementContext) GetOp() antlr.Token { return s.op }

func (s *IteratorStatementContext) SetOp(v antlr.Token) { s.op = v }

func (s *IteratorStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *IteratorStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IteratorStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IteratorStatementContext) More() IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *IteratorStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *IteratorStatementContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *IteratorStatementContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserLess_Equal, 0)
}

func (s *IteratorStatementContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *IteratorStatementContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserGreater_Equal, 0)
}

func (s *IteratorStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IteratorStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IteratorStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitIteratorStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) IteratorStatement() (localctx IIteratorStatementContext) {
	localctx = NewIteratorStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, XsParserRULE_iteratorStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1024)
			p.Match(XsParserLeft_Brack)
		}
		{
			p.SetState(1025)
			p.expression(0)
		}
		{
			p.SetState(1026)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(XsParserLess_Equal-26))|(1<<(XsParserGreater_Equal-26))|(1<<(XsParserLess-26))|(1<<(XsParserGreater-26)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1027)
			p.expression(0)
		}
		{
			p.SetState(1028)
			p.More()
		}
		{
			p.SetState(1029)
			p.expression(0)
		}
		{
			p.SetState(1030)
			p.Match(XsParserRight_Brack)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1032)
			p.Match(XsParserLeft_Brack)
		}
		{
			p.SetState(1033)
			p.expression(0)
		}
		{
			p.SetState(1034)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IteratorStatementContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(XsParserLess_Equal-26))|(1<<(XsParserGreater_Equal-26))|(1<<(XsParserLess-26))|(1<<(XsParserGreater-26)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IteratorStatementContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1035)
			p.expression(0)
		}
		{
			p.SetState(1036)
			p.Match(XsParserRight_Brack)
		}

	}

	return localctx
}

// IVariableStatementContext is an interface to support dynamic dispatch.
type IVariableStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableStatementContext differentiates from other interfaces.
	IsVariableStatementContext()
}

type VariableStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableStatementContext() *VariableStatementContext {
	var p = new(VariableStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_variableStatement
	return p
}

func (*VariableStatementContext) IsVariableStatementContext() {}

func NewVariableStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableStatementContext {
	var p = new(VariableStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_variableStatement

	return p
}

func (s *VariableStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *VariableStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableStatementContext) Colon_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserColon_Equal, 0)
}

func (s *VariableStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *VariableStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableStatementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *VariableStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitVariableStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) VariableStatement() (localctx IVariableStatementContext) {
	localctx = NewVariableStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, XsParserRULE_variableStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1040)
		p.expression(0)
	}
	p.SetState(1046)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserColon_Equal:
		{
			p.SetState(1041)
			p.Match(XsParserColon_Equal)
		}

	case XsParserColon:
		{
			p.SetState(1042)
			p.Match(XsParserColon)
		}
		{
			p.SetState(1043)
			p.TypeType()
		}
		{
			p.SetState(1044)
			p.Match(XsParserEqual)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1048)
		p.expression(0)
	}
	{
		p.SetState(1049)
		p.End()
	}

	return localctx
}

// IVariableDeclaredStatementContext is an interface to support dynamic dispatch.
type IVariableDeclaredStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclaredStatementContext differentiates from other interfaces.
	IsVariableDeclaredStatementContext()
}

type VariableDeclaredStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclaredStatementContext() *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_variableDeclaredStatement
	return p
}

func (*VariableDeclaredStatementContext) IsVariableDeclaredStatementContext() {}

func NewVariableDeclaredStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclaredStatementContext {
	var p = new(VariableDeclaredStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_variableDeclaredStatement

	return p
}

func (s *VariableDeclaredStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclaredStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclaredStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *VariableDeclaredStatementContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *VariableDeclaredStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *VariableDeclaredStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclaredStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclaredStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitVariableDeclaredStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) VariableDeclaredStatement() (localctx IVariableDeclaredStatementContext) {
	localctx = NewVariableDeclaredStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, XsParserRULE_variableDeclaredStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1051)
		p.expression(0)
	}
	{
		p.SetState(1052)
		p.Match(XsParserColon)
	}
	{
		p.SetState(1053)
		p.TypeType()
	}
	{
		p.SetState(1054)
		p.End()
	}

	return localctx
}

// IChannelAssignStatementContext is an interface to support dynamic dispatch.
type IChannelAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelAssignStatementContext differentiates from other interfaces.
	IsChannelAssignStatementContext()
}

type ChannelAssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelAssignStatementContext() *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_channelAssignStatement
	return p
}

func (*ChannelAssignStatementContext) IsChannelAssignStatementContext() {}

func NewChannelAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelAssignStatementContext {
	var p = new(ChannelAssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_channelAssignStatement

	return p
}

func (s *ChannelAssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelAssignStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ChannelAssignStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ChannelAssignStatementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *ChannelAssignStatementContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Arrow, 0)
}

func (s *ChannelAssignStatementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *ChannelAssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *ChannelAssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ChannelAssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelAssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelAssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitChannelAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ChannelAssignStatement() (localctx IChannelAssignStatementContext) {
	localctx = NewChannelAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, XsParserRULE_channelAssignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1056)
		p.expression(0)
	}
	{
		p.SetState(1057)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1058)
		p.Match(XsParserLeft_Arrow)
	}
	{
		p.SetState(1059)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1060)
		p.Assign()
	}
	{
		p.SetState(1061)
		p.expression(0)
	}
	{
		p.SetState(1062)
		p.End()
	}

	return localctx
}

// IAssignStatementContext is an interface to support dynamic dispatch.
type IAssignStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignStatementContext differentiates from other interfaces.
	IsAssignStatementContext()
}

type AssignStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignStatementContext() *AssignStatementContext {
	var p = new(AssignStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_assignStatement
	return p
}

func (*AssignStatementContext) IsAssignStatementContext() {}

func NewAssignStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignStatementContext {
	var p = new(AssignStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_assignStatement

	return p
}

func (s *AssignStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignStatementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *AssignStatementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignStatementContext) Assign() IAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignContext)
}

func (s *AssignStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *AssignStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAssignStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) AssignStatement() (localctx IAssignStatementContext) {
	localctx = NewAssignStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, XsParserRULE_assignStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1064)
		p.expression(0)
	}
	{
		p.SetState(1065)
		p.Assign()
	}
	{
		p.SetState(1066)
		p.expression(0)
	}
	{
		p.SetState(1067)
		p.End()
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) End() IEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEndContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, XsParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1069)
		p.expression(0)
	}
	{
		p.SetState(1070)
		p.End()
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) GetT() antlr.Token { return s.t }

func (s *PrimaryExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *PrimaryExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PrimaryExpressionContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *PrimaryExpressionContext) Discard() antlr.TerminalNode {
	return s.GetToken(XsParserDiscard, 0)
}

func (s *PrimaryExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *PrimaryExpressionContext) DataStatement() IDataStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataStatementContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, XsParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1072)
			p.Id()
		}
		p.SetState(1074)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1073)
				p.TemplateCall()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1076)

			var _m = p.Match(XsParserDiscard)

			localctx.(*PrimaryExpressionContext).t = _m
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1077)
			p.Left_paren()
		}
		{
			p.SetState(1078)
			p.expression(0)
		}
		{
			p.SetState(1079)
			p.Right_paren()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1081)
			p.DataStatement()
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Linq() ILinqContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqContext)
}

func (s *ExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) CallChannel() ICallChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallChannelContext)
}

func (s *ExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *ExpressionContext) CallNew() ICallNewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallNewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallNewContext)
}

func (s *ExpressionContext) CallPkg() ICallPkgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallPkgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallPkgContext)
}

func (s *ExpressionContext) GetType() IGetTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGetTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGetTypeContext)
}

func (s *ExpressionContext) CallAwait() ICallAwaitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallAwaitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallAwaitContext)
}

func (s *ExpressionContext) List() IListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListContext)
}

func (s *ExpressionContext) Set() ISetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetContext)
}

func (s *ExpressionContext) Dictionary() IDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryContext)
}

func (s *ExpressionContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *ExpressionContext) FunctionExpression() IFunctionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionExpressionContext)
}

func (s *ExpressionContext) PkgAnonymous() IPkgAnonymousContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousContext)
}

func (s *ExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *ExpressionContext) PlusMinus() IPlusMinusContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPlusMinusContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPlusMinusContext)
}

func (s *ExpressionContext) Negate() INegateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegateContext)
}

func (s *ExpressionContext) StringExpression() IStringExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Judge() IJudgeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeContext)
}

func (s *ExpressionContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *ExpressionContext) Mul() IMulContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMulContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMulContext)
}

func (s *ExpressionContext) Pow() IPowContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPowContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPowContext)
}

func (s *ExpressionContext) Bang() antlr.TerminalNode {
	return s.GetToken(XsParserBang, 0)
}

func (s *ExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *ExpressionContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Flow, 0)
}

func (s *ExpressionContext) TypeConversion() ITypeConversionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConversionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConversionContext)
}

func (s *ExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *ExpressionContext) CallExpression() ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *ExpressionContext) JudgeType() IJudgeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJudgeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJudgeTypeContext)
}

func (s *ExpressionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *XsParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 120
	p.EnterRecursionRule(localctx, 120, XsParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1104)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1085)
			p.Linq()
		}

	case 2:
		{
			p.SetState(1086)
			p.CallFunc()
		}

	case 3:
		{
			p.SetState(1087)
			p.PrimaryExpression()
		}

	case 4:
		{
			p.SetState(1088)
			p.CallChannel()
		}

	case 5:
		{
			p.SetState(1089)
			p.CallElement()
		}

	case 6:
		{
			p.SetState(1090)
			p.CallNew()
		}

	case 7:
		{
			p.SetState(1091)
			p.CallPkg()
		}

	case 8:
		{
			p.SetState(1092)
			p.GetType()
		}

	case 9:
		{
			p.SetState(1093)
			p.CallAwait()
		}

	case 10:
		{
			p.SetState(1094)
			p.List()
		}

	case 11:
		{
			p.SetState(1095)
			p.Set()
		}

	case 12:
		{
			p.SetState(1096)
			p.Dictionary()
		}

	case 13:
		{
			p.SetState(1097)
			p.Lambda()
		}

	case 14:
		{
			p.SetState(1098)
			p.FunctionExpression()
		}

	case 15:
		{
			p.SetState(1099)
			p.PkgAnonymous()
		}

	case 16:
		{
			p.SetState(1100)
			p.TupleExpression()
		}

	case 17:
		{
			p.SetState(1101)
			p.PlusMinus()
		}

	case 18:
		{
			p.SetState(1102)
			p.Negate()
		}

	case 19:
		{
			p.SetState(1103)
			p.StringExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1140)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1138)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1106)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(1107)
					p.Judge()
				}
				{
					p.SetState(1108)
					p.expression(6)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1110)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(1111)
					p.Add()
				}
				{
					p.SetState(1112)
					p.expression(5)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1114)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1115)
					p.Mul()
				}
				{
					p.SetState(1116)
					p.expression(4)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1118)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1119)
					p.Pow()
				}
				{
					p.SetState(1120)
					p.expression(3)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1122)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(1123)

					var _m = p.Match(XsParserBang)

					localctx.(*ExpressionContext).op = _m
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1124)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(1125)

					var _m = p.Match(XsParserQuestion)

					localctx.(*ExpressionContext).op = _m
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1126)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(1127)

					var _m = p.Match(XsParserLeft_Flow)

					localctx.(*ExpressionContext).op = _m
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1128)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(1129)
					p.TypeConversion()
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1130)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(1131)
					p.Call()
				}
				{
					p.SetState(1132)
					p.callExpression(0)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, XsParserRULE_expression)
				p.SetState(1134)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(1135)
					p.JudgeType()
				}
				{
					p.SetState(1136)
					p.TypeType()
				}

			}

		}
		p.SetState(1142)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())
	}

	return localctx
}

// ICallExpressionContext is an interface to support dynamic dispatch.
type ICallExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallExpressionContext differentiates from other interfaces.
	IsCallExpressionContext()
}

type CallExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallExpressionContext() *CallExpressionContext {
	var p = new(CallExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callExpression
	return p
}

func (*CallExpressionContext) IsCallExpressionContext() {}

func NewCallExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallExpressionContext {
	var p = new(CallExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callExpression

	return p
}

func (s *CallExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CallExpressionContext) CallElement() ICallElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallElementContext)
}

func (s *CallExpressionContext) CallFunc() ICallFuncContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallFuncContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallFuncContext)
}

func (s *CallExpressionContext) CallPkg() ICallPkgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallPkgContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallPkgContext)
}

func (s *CallExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallExpressionContext) AllCallExpression() []ICallExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem())
	var tst = make([]ICallExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallExpressionContext)
		}
	}

	return tst
}

func (s *CallExpressionContext) CallExpression(i int) ICallExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallExpressionContext)
}

func (s *CallExpressionContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *CallExpressionContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *CallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallExpression() (localctx ICallExpressionContext) {
	return p.callExpression(0)
}

func (p *XsParser) callExpression(_p int) (localctx ICallExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCallExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICallExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 122
	p.EnterRecursionRule(localctx, 122, XsParserRULE_callExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1144)
			p.CallElement()
		}

	case 2:
		{
			p.SetState(1145)
			p.CallFunc()
		}

	case 3:
		{
			p.SetState(1146)
			p.CallPkg()
		}

	case 4:
		{
			p.SetState(1147)
			p.Id()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1159)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCallExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, XsParserRULE_callExpression)
			p.SetState(1150)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1151)
				p.Call()
			}
			p.SetState(1153)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == XsParserNew_Line {
				{
					p.SetState(1152)
					p.Match(XsParserNew_Line)
				}

			}
			{
				p.SetState(1155)
				p.callExpression(2)
			}

		}
		p.SetState(1161)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext())
	}

	return localctx
}

// ITupleContext is an interface to support dynamic dispatch.
type ITupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleContext differentiates from other interfaces.
	IsTupleContext()
}

type TupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleContext() *TupleContext {
	var p = new(TupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_tuple
	return p
}

func (*TupleContext) IsTupleContext() {}

func NewTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleContext {
	var p = new(TupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_tuple

	return p
}

func (s *TupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Tuple() (localctx ITupleContext) {
	localctx = NewTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, XsParserRULE_tuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1162)
		p.Left_paren()
	}
	p.SetState(1172)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
		{
			p.SetState(1163)
			p.expression(0)
		}
		p.SetState(1169)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == XsParserComma {
			{
				p.SetState(1164)
				p.More()
			}
			{
				p.SetState(1165)
				p.expression(0)
			}

			p.SetState(1171)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1174)
		p.Right_paren()
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, XsParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1176)
		p.expression(0)
	}
	p.SetState(1182)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1177)
			p.More()
		}
		{
			p.SetState(1178)
			p.expression(0)
		}

		p.SetState(1184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationSupportContext is an interface to support dynamic dispatch.
type IAnnotationSupportContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationSupportContext differentiates from other interfaces.
	IsAnnotationSupportContext()
}

type AnnotationSupportContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationSupportContext() *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_annotationSupport
	return p
}

func (*AnnotationSupportContext) IsAnnotationSupportContext() {}

func NewAnnotationSupportContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationSupportContext {
	var p = new(AnnotationSupportContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_annotationSupport

	return p
}

func (s *AnnotationSupportContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationSupportContext) Annotation() IAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationContext)
}

func (s *AnnotationSupportContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *AnnotationSupportContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationSupportContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationSupportContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAnnotationSupport(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) AnnotationSupport() (localctx IAnnotationSupportContext) {
	localctx = NewAnnotationSupportContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, XsParserRULE_annotationSupport)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1185)
		p.Annotation()
	}
	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1186)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IAnnotationContext is an interface to support dynamic dispatch.
type IAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationContext differentiates from other interfaces.
	IsAnnotationContext()
}

type AnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationContext() *AnnotationContext {
	var p = new(AnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_annotation
	return p
}

func (*AnnotationContext) IsAnnotationContext() {}

func NewAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationContext {
	var p = new(AnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_annotation

	return p
}

func (s *AnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *AnnotationContext) AnnotationList() IAnnotationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnnotationListContext)
}

func (s *AnnotationContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *AnnotationContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *AnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Annotation() (localctx IAnnotationContext) {
	localctx = NewAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, XsParserRULE_annotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1189)
		p.Match(XsParserLeft_Brack)
	}
	p.SetState(1193)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1190)
			p.Id()
		}
		{
			p.SetState(1191)
			p.Match(XsParserRight_Arrow)
		}

	}
	{
		p.SetState(1195)
		p.AnnotationList()
	}
	{
		p.SetState(1196)
		p.Match(XsParserRight_Brack)
	}

	return localctx
}

// IAnnotationListContext is an interface to support dynamic dispatch.
type IAnnotationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationListContext differentiates from other interfaces.
	IsAnnotationListContext()
}

type AnnotationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationListContext() *AnnotationListContext {
	var p = new(AnnotationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_annotationList
	return p
}

func (*AnnotationListContext) IsAnnotationListContext() {}

func NewAnnotationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationListContext {
	var p = new(AnnotationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_annotationList

	return p
}

func (s *AnnotationListContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationListContext) AllAnnotationItem() []IAnnotationItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem())
	var tst = make([]IAnnotationItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationItemContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) AnnotationItem(i int) IAnnotationItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationItemContext)
}

func (s *AnnotationListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *AnnotationListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *AnnotationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAnnotationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) AnnotationList() (localctx IAnnotationListContext) {
	localctx = NewAnnotationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, XsParserRULE_annotationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1198)
		p.AnnotationItem()
	}
	p.SetState(1204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1199)
			p.More()
		}
		{
			p.SetState(1200)
			p.AnnotationItem()
		}

		p.SetState(1206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAnnotationItemContext is an interface to support dynamic dispatch.
type IAnnotationItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationItemContext differentiates from other interfaces.
	IsAnnotationItemContext()
}

type AnnotationItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationItemContext() *AnnotationItemContext {
	var p = new(AnnotationItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_annotationItem
	return p
}

func (*AnnotationItemContext) IsAnnotationItemContext() {}

func NewAnnotationItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationItemContext {
	var p = new(AnnotationItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_annotationItem

	return p
}

func (s *AnnotationItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationItemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationItemContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *AnnotationItemContext) AllAnnotationAssign() []IAnnotationAssignContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAnnotationAssignContext)(nil)).Elem())
	var tst = make([]IAnnotationAssignContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAnnotationAssignContext)
		}
	}

	return tst
}

func (s *AnnotationItemContext) AnnotationAssign(i int) IAnnotationAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnnotationAssignContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAnnotationAssignContext)
}

func (s *AnnotationItemContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *AnnotationItemContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *AnnotationItemContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *AnnotationItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAnnotationItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) AnnotationItem() (localctx IAnnotationItemContext) {
	localctx = NewAnnotationItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, XsParserRULE_annotationItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1207)
		p.Id()
	}
	p.SetState(1220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLeft_Paren {
		{
			p.SetState(1208)
			p.Left_paren()
		}
		{
			p.SetState(1209)
			p.AnnotationAssign()
		}
		p.SetState(1215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == XsParserComma {
			{
				p.SetState(1210)
				p.More()
			}
			{
				p.SetState(1211)
				p.AnnotationAssign()
			}

			p.SetState(1217)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1218)
			p.Right_paren()
		}

	}

	return localctx
}

// IAnnotationAssignContext is an interface to support dynamic dispatch.
type IAnnotationAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnnotationAssignContext differentiates from other interfaces.
	IsAnnotationAssignContext()
}

type AnnotationAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnnotationAssignContext() *AnnotationAssignContext {
	var p = new(AnnotationAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_annotationAssign
	return p
}

func (*AnnotationAssignContext) IsAnnotationAssignContext() {}

func NewAnnotationAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnnotationAssignContext {
	var p = new(AnnotationAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_annotationAssign

	return p
}

func (s *AnnotationAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AnnotationAssignContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AnnotationAssignContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *AnnotationAssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *AnnotationAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnnotationAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnnotationAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAnnotationAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) AnnotationAssign() (localctx IAnnotationAssignContext) {
	localctx = NewAnnotationAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, XsParserRULE_annotationAssign)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1222)
			p.Id()
		}
		{
			p.SetState(1223)
			p.Match(XsParserEqual)
		}

	}
	{
		p.SetState(1227)
		p.expression(0)
	}

	return localctx
}

// ICallFuncContext is an interface to support dynamic dispatch.
type ICallFuncContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallFuncContext differentiates from other interfaces.
	IsCallFuncContext()
}

type CallFuncContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallFuncContext() *CallFuncContext {
	var p = new(CallFuncContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callFunc
	return p
}

func (*CallFuncContext) IsCallFuncContext() {}

func NewCallFuncContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallFuncContext {
	var p = new(CallFuncContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callFunc

	return p
}

func (s *CallFuncContext) GetParser() antlr.Parser { return s.parser }

func (s *CallFuncContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallFuncContext) Tuple() ITupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleContext)
}

func (s *CallFuncContext) Lambda() ILambdaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaContext)
}

func (s *CallFuncContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *CallFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallFuncContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallFunc() (localctx ICallFuncContext) {
	localctx = NewCallFuncContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, XsParserRULE_callFunc)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1229)
		p.Id()
	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserLess {
		{
			p.SetState(1230)
			p.TemplateCall()
		}

	}
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserLeft_Paren:
		{
			p.SetState(1233)
			p.Tuple()
		}

	case XsParserLeft_Brace:
		{
			p.SetState(1234)
			p.Lambda()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICallChannelContext is an interface to support dynamic dispatch.
type ICallChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallChannelContext differentiates from other interfaces.
	IsCallChannelContext()
}

type CallChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallChannelContext() *CallChannelContext {
	var p = new(CallChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callChannel
	return p
}

func (*CallChannelContext) IsCallChannelContext() {}

func NewCallChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallChannelContext {
	var p = new(CallChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callChannel

	return p
}

func (s *CallChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *CallChannelContext) GetOp() antlr.Token { return s.op }

func (s *CallChannelContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallChannelContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallChannelContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *CallChannelContext) Left_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Arrow, 0)
}

func (s *CallChannelContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *CallChannelContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *CallChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallChannel() (localctx ICallChannelContext) {
	localctx = NewCallChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, XsParserRULE_callChannel)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1237)
		p.Id()
	}
	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserQuestion {
		{
			p.SetState(1238)

			var _m = p.Match(XsParserQuestion)

			localctx.(*CallChannelContext).op = _m
		}

	}
	{
		p.SetState(1241)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1242)
		p.Match(XsParserLeft_Arrow)
	}
	{
		p.SetState(1243)
		p.Match(XsParserRight_Brack)
	}

	return localctx
}

// ICallElementContext is an interface to support dynamic dispatch.
type ICallElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallElementContext differentiates from other interfaces.
	IsCallElementContext()
}

type CallElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallElementContext() *CallElementContext {
	var p = new(CallElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callElement
	return p
}

func (*CallElementContext) IsCallElementContext() {}

func NewCallElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallElementContext {
	var p = new(CallElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callElement

	return p
}

func (s *CallElementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallElementContext) GetOp() antlr.Token { return s.op }

func (s *CallElementContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallElementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *CallElementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *CallElementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *CallElementContext) Slice() ISliceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceContext)
}

func (s *CallElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallElementContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *CallElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallElement() (localctx ICallElementContext) {
	localctx = NewCallElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, XsParserRULE_callElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1245)
		p.Id()
	}
	p.SetState(1247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserQuestion {
		{
			p.SetState(1246)

			var _m = p.Match(XsParserQuestion)

			localctx.(*CallElementContext).op = _m
		}

	}
	{
		p.SetState(1249)
		p.Match(XsParserLeft_Brack)
	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1250)
			p.Slice()
		}

	case 2:
		{
			p.SetState(1251)
			p.expression(0)
		}

	}
	{
		p.SetState(1254)
		p.Match(XsParserRight_Brack)
	}

	return localctx
}

// ICallPkgContext is an interface to support dynamic dispatch.
type ICallPkgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallPkgContext differentiates from other interfaces.
	IsCallPkgContext()
}

type CallPkgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallPkgContext() *CallPkgContext {
	var p = new(CallPkgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callPkg
	return p
}

func (*CallPkgContext) IsCallPkgContext() {}

func NewCallPkgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallPkgContext {
	var p = new(CallPkgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callPkg

	return p
}

func (s *CallPkgContext) GetParser() antlr.Parser { return s.parser }

func (s *CallPkgContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallPkgContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *CallPkgContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *CallPkgContext) PkgAssign() IPkgAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignContext)
}

func (s *CallPkgContext) ListAssign() IListAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListAssignContext)
}

func (s *CallPkgContext) SetAssign() ISetAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetAssignContext)
}

func (s *CallPkgContext) DictionaryAssign() IDictionaryAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDictionaryAssignContext)
}

func (s *CallPkgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallPkgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallPkgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallPkg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallPkg() (localctx ICallPkgContext) {
	localctx = NewCallPkgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, XsParserRULE_callPkg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		p.TypeType()
	}
	{
		p.SetState(1257)
		p.Left_brace()
	}
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1258)
			p.PkgAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1259)
			p.ListAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1260)
			p.SetAssign()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(1261)
			p.DictionaryAssign()
		}

	}
	{
		p.SetState(1264)
		p.Right_brace()
	}

	return localctx
}

// ICallNewContext is an interface to support dynamic dispatch.
type ICallNewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallNewContext differentiates from other interfaces.
	IsCallNewContext()
}

type CallNewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallNewContext() *CallNewContext {
	var p = new(CallNewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callNew
	return p
}

func (*CallNewContext) IsCallNewContext() {}

func NewCallNewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallNewContext {
	var p = new(CallNewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callNew

	return p
}

func (s *CallNewContext) GetParser() antlr.Parser { return s.parser }

func (s *CallNewContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *CallNewContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *CallNewContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *CallNewContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *CallNewContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *CallNewContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *CallNewContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *CallNewContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *CallNewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallNewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallNewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallNew(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallNew() (localctx ICallNewContext) {
	localctx = NewCallNewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, XsParserRULE_callNew)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1266)
		p.Match(XsParserLess)
	}
	{
		p.SetState(1267)
		p.TypeType()
	}
	{
		p.SetState(1268)
		p.Match(XsParserGreater)
	}
	{
		p.SetState(1269)
		p.Left_paren()
	}
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1270)
			p.Match(XsParserNew_Line)
		}

	}
	p.SetState(1274)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
		{
			p.SetState(1273)
			p.ExpressionList()
		}

	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1276)
			p.Match(XsParserNew_Line)
		}

	}
	{
		p.SetState(1279)
		p.Right_paren()
	}

	return localctx
}

// IGetTypeContext is an interface to support dynamic dispatch.
type IGetTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGetTypeContext differentiates from other interfaces.
	IsGetTypeContext()
}

type GetTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGetTypeContext() *GetTypeContext {
	var p = new(GetTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_getType
	return p
}

func (*GetTypeContext) IsGetTypeContext() {}

func NewGetTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GetTypeContext {
	var p = new(GetTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_getType

	return p
}

func (s *GetTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *GetTypeContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *GetTypeContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *GetTypeContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *GetTypeContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GetTypeContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *GetTypeContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *GetTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GetTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitGetType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) GetType() (localctx IGetTypeContext) {
	localctx = NewGetTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, XsParserRULE_getType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1281)
		p.Match(XsParserQuestion)
	}
	{
		p.SetState(1282)
		p.Left_paren()
	}
	p.SetState(1286)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserLinqFrom, XsParserLinqBy, XsParserLinqSelect, XsParserLinqWhere, XsParserLinqGroup, XsParserLinqInto, XsParserLinqOrderby, XsParserLinqJoin, XsParserLinqLet, XsParserLinqIn, XsParserLinqOn, XsParserLinqEquals, XsParserLinqAscending, XsParserLinqDescending, XsParserEvent, XsParserLeft_Flow, XsParserLess, XsParserLeft_Paren, XsParserLeft_Brace, XsParserLeft_Brack, XsParserQuestion, XsParserBang, XsParserWave, XsParserAdd, XsParserSub, XsParserTypeI8, XsParserTypeU8, XsParserTypeI16, XsParserTypeU16, XsParserTypeI32, XsParserTypeU32, XsParserTypeI64, XsParserTypeU64, XsParserTypeF32, XsParserTypeF64, XsParserTypeChr, XsParserTypeStr, XsParserTypeBool, XsParserTypeInt, XsParserTypeNum, XsParserTrueLiteral, XsParserFalseLiteral, XsParserUndefinedLiteral, XsParserNumberLiteral, XsParserTextLiteral, XsParserCharLiteral, XsParserIDPrivate, XsParserIDPublic, XsParserDiscard:
		{
			p.SetState(1283)
			p.expression(0)
		}

	case XsParserColon:
		{
			p.SetState(1284)
			p.Match(XsParserColon)
		}
		{
			p.SetState(1285)
			p.TypeType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1288)
		p.Right_paren()
	}

	return localctx
}

// ITypeConversionContext is an interface to support dynamic dispatch.
type ITypeConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConversionContext differentiates from other interfaces.
	IsTypeConversionContext()
}

type TypeConversionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConversionContext() *TypeConversionContext {
	var p = new(TypeConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeConversion
	return p
}

func (*TypeConversionContext) IsTypeConversionContext() {}

func NewTypeConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConversionContext {
	var p = new(TypeConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeConversion

	return p
}

func (s *TypeConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConversionContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *TypeConversionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeConversionContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeConversionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeConversion() (localctx ITypeConversionContext) {
	localctx = NewTypeConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, XsParserRULE_typeConversion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1290)
		p.Match(XsParserColon)
	}
	{
		p.SetState(1291)
		p.Left_paren()
	}
	{
		p.SetState(1292)
		p.TypeType()
	}
	{
		p.SetState(1293)
		p.Right_paren()
	}

	return localctx
}

// IPkgAssignContext is an interface to support dynamic dispatch.
type IPkgAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignContext differentiates from other interfaces.
	IsPkgAssignContext()
}

type PkgAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignContext() *PkgAssignContext {
	var p = new(PkgAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pkgAssign
	return p
}

func (*PkgAssignContext) IsPkgAssignContext() {}

func NewPkgAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignContext {
	var p = new(PkgAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pkgAssign

	return p
}

func (s *PkgAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignContext) AllPkgAssignElement() []IPkgAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) PkgAssignElement(i int) IPkgAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAssignElementContext)
}

func (s *PkgAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *PkgAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PkgAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPkgAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PkgAssign() (localctx IPkgAssignContext) {
	localctx = NewPkgAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, XsParserRULE_pkgAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1295)
		p.PkgAssignElement()
	}
	p.SetState(1301)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1296)
			p.More()
		}
		{
			p.SetState(1297)
			p.PkgAssignElement()
		}

		p.SetState(1303)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAssignElementContext is an interface to support dynamic dispatch.
type IPkgAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAssignElementContext differentiates from other interfaces.
	IsPkgAssignElementContext()
}

type PkgAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAssignElementContext() *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pkgAssignElement
	return p
}

func (*PkgAssignElementContext) IsPkgAssignElementContext() {}

func NewPkgAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAssignElementContext {
	var p = new(PkgAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pkgAssignElement

	return p
}

func (s *PkgAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *PkgAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPkgAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PkgAssignElement() (localctx IPkgAssignElementContext) {
	localctx = NewPkgAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, XsParserRULE_pkgAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.Name()
	}
	{
		p.SetState(1305)
		p.Match(XsParserEqual)
	}
	{
		p.SetState(1306)
		p.expression(0)
	}

	return localctx
}

// IListAssignContext is an interface to support dynamic dispatch.
type IListAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListAssignContext differentiates from other interfaces.
	IsListAssignContext()
}

type ListAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListAssignContext() *ListAssignContext {
	var p = new(ListAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_listAssign
	return p
}

func (*ListAssignContext) IsListAssignContext() {}

func NewListAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListAssignContext {
	var p = new(ListAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_listAssign

	return p
}

func (s *ListAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *ListAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ListAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ListAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitListAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) ListAssign() (localctx IListAssignContext) {
	localctx = NewListAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, XsParserRULE_listAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1308)
		p.expression(0)
	}
	p.SetState(1314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1309)
			p.More()
		}
		{
			p.SetState(1310)
			p.expression(0)
		}

		p.SetState(1316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISetAssignContext is an interface to support dynamic dispatch.
type ISetAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetAssignContext differentiates from other interfaces.
	IsSetAssignContext()
}

type SetAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetAssignContext() *SetAssignContext {
	var p = new(SetAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_setAssign
	return p
}

func (*SetAssignContext) IsSetAssignContext() {}

func NewSetAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetAssignContext {
	var p = new(SetAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_setAssign

	return p
}

func (s *SetAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *SetAssignContext) AllLeft_Brack() []antlr.TerminalNode {
	return s.GetTokens(XsParserLeft_Brack)
}

func (s *SetAssignContext) Left_Brack(i int) antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, i)
}

func (s *SetAssignContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetAssignContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetAssignContext) AllRight_Brack() []antlr.TerminalNode {
	return s.GetTokens(XsParserRight_Brack)
}

func (s *SetAssignContext) Right_Brack(i int) antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, i)
}

func (s *SetAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *SetAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *SetAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSetAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) SetAssign() (localctx ISetAssignContext) {
	localctx = NewSetAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, XsParserRULE_setAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1317)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1318)
		p.expression(0)
	}
	{
		p.SetState(1319)
		p.Match(XsParserRight_Brack)
	}
	p.SetState(1327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1320)
			p.More()
		}
		{
			p.SetState(1321)
			p.Match(XsParserLeft_Brack)
		}
		{
			p.SetState(1322)
			p.expression(0)
		}
		{
			p.SetState(1323)
			p.Match(XsParserRight_Brack)
		}

		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDictionaryAssignContext is an interface to support dynamic dispatch.
type IDictionaryAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryAssignContext differentiates from other interfaces.
	IsDictionaryAssignContext()
}

type DictionaryAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryAssignContext() *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_dictionaryAssign
	return p
}

func (*DictionaryAssignContext) IsDictionaryAssignContext() {}

func NewDictionaryAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryAssignContext {
	var p = new(DictionaryAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_dictionaryAssign

	return p
}

func (s *DictionaryAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryAssignContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *DictionaryAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *DictionaryAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitDictionaryAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) DictionaryAssign() (localctx IDictionaryAssignContext) {
	localctx = NewDictionaryAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, XsParserRULE_dictionaryAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1330)
		p.DictionaryElement()
	}
	p.SetState(1336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1331)
			p.More()
		}
		{
			p.SetState(1332)
			p.DictionaryElement()
		}

		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICallAwaitContext is an interface to support dynamic dispatch.
type ICallAwaitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallAwaitContext differentiates from other interfaces.
	IsCallAwaitContext()
}

type CallAwaitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallAwaitContext() *CallAwaitContext {
	var p = new(CallAwaitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_callAwait
	return p
}

func (*CallAwaitContext) IsCallAwaitContext() {}

func NewCallAwaitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallAwaitContext {
	var p = new(CallAwaitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_callAwait

	return p
}

func (s *CallAwaitContext) GetParser() antlr.Parser { return s.parser }

func (s *CallAwaitContext) Left_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Flow, 0)
}

func (s *CallAwaitContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallAwaitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallAwaitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallAwaitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCallAwait(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) CallAwait() (localctx ICallAwaitContext) {
	localctx = NewCallAwaitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, XsParserRULE_callAwait)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1339)
		p.Match(XsParserLeft_Flow)
	}
	{
		p.SetState(1340)
		p.expression(0)
	}

	return localctx
}

// IListContext is an interface to support dynamic dispatch.
type IListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListContext differentiates from other interfaces.
	IsListContext()
}

type ListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListContext() *ListContext {
	var p = new(ListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_list
	return p
}

func (*ListContext) IsListContext() {}

func NewListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListContext {
	var p = new(ListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_list

	return p
}

func (s *ListContext) GetParser() antlr.Parser { return s.parser }

func (s *ListContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *ListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ListContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *ListContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *ListContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *ListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) List() (localctx IListContext) {
	localctx = NewListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, XsParserRULE_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1342)
		p.Left_brace()
	}
	{
		p.SetState(1343)
		p.expression(0)
	}
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1344)
			p.More()
		}
		{
			p.SetState(1345)
			p.expression(0)
		}

		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1352)
		p.Right_brace()
	}

	return localctx
}

// ISetContext is an interface to support dynamic dispatch.
type ISetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetContext differentiates from other interfaces.
	IsSetContext()
}

type SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetContext() *SetContext {
	var p = new(SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_set
	return p
}

func (*SetContext) IsSetContext() {}

func NewSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetContext {
	var p = new(SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_set

	return p
}

func (s *SetContext) GetParser() antlr.Parser { return s.parser }

func (s *SetContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *SetContext) AllLeft_Brack() []antlr.TerminalNode {
	return s.GetTokens(XsParserLeft_Brack)
}

func (s *SetContext) Left_Brack(i int) antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, i)
}

func (s *SetContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetContext) AllRight_Brack() []antlr.TerminalNode {
	return s.GetTokens(XsParserRight_Brack)
}

func (s *SetContext) Right_Brack(i int) antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, i)
}

func (s *SetContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *SetContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *SetContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Set() (localctx ISetContext) {
	localctx = NewSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, XsParserRULE_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1354)
		p.Left_brace()
	}
	{
		p.SetState(1355)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1356)
		p.expression(0)
	}
	{
		p.SetState(1357)
		p.Match(XsParserRight_Brack)
	}
	p.SetState(1365)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1358)
			p.More()
		}
		{
			p.SetState(1359)
			p.Match(XsParserLeft_Brack)
		}
		{
			p.SetState(1360)
			p.expression(0)
		}
		{
			p.SetState(1361)
			p.Match(XsParserRight_Brack)
		}

		p.SetState(1367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1368)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryContext is an interface to support dynamic dispatch.
type IDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryContext differentiates from other interfaces.
	IsDictionaryContext()
}

type DictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryContext() *DictionaryContext {
	var p = new(DictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_dictionary
	return p
}

func (*DictionaryContext) IsDictionaryContext() {}

func NewDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryContext {
	var p = new(DictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_dictionary

	return p
}

func (s *DictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *DictionaryContext) AllDictionaryElement() []IDictionaryElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem())
	var tst = make([]IDictionaryElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDictionaryElementContext)
		}
	}

	return tst
}

func (s *DictionaryContext) DictionaryElement(i int) IDictionaryElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDictionaryElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDictionaryElementContext)
}

func (s *DictionaryContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *DictionaryContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *DictionaryContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *DictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Dictionary() (localctx IDictionaryContext) {
	localctx = NewDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, XsParserRULE_dictionary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1370)
		p.Left_brace()
	}
	{
		p.SetState(1371)
		p.DictionaryElement()
	}
	p.SetState(1377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1372)
			p.More()
		}
		{
			p.SetState(1373)
			p.DictionaryElement()
		}

		p.SetState(1379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1380)
		p.Right_brace()
	}

	return localctx
}

// IDictionaryElementContext is an interface to support dynamic dispatch.
type IDictionaryElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDictionaryElementContext differentiates from other interfaces.
	IsDictionaryElementContext()
}

type DictionaryElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDictionaryElementContext() *DictionaryElementContext {
	var p = new(DictionaryElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_dictionaryElement
	return p
}

func (*DictionaryElementContext) IsDictionaryElementContext() {}

func NewDictionaryElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DictionaryElementContext {
	var p = new(DictionaryElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_dictionaryElement

	return p
}

func (s *DictionaryElementContext) GetParser() antlr.Parser { return s.parser }

func (s *DictionaryElementContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *DictionaryElementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DictionaryElementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DictionaryElementContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *DictionaryElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DictionaryElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DictionaryElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitDictionaryElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) DictionaryElement() (localctx IDictionaryElementContext) {
	localctx = NewDictionaryElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, XsParserRULE_dictionaryElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1382)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1383)
		p.expression(0)
	}
	{
		p.SetState(1384)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1385)
		p.expression(0)
	}

	return localctx
}

// ISliceContext is an interface to support dynamic dispatch.
type ISliceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceContext differentiates from other interfaces.
	IsSliceContext()
}

type SliceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceContext() *SliceContext {
	var p = new(SliceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_slice
	return p
}

func (*SliceContext) IsSliceContext() {}

func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceContext {
	var p = new(SliceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_slice

	return p
}

func (s *SliceContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceContext) SliceFull() ISliceFullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceFullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceFullContext)
}

func (s *SliceContext) SliceStart() ISliceStartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceStartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceStartContext)
}

func (s *SliceContext) SliceEnd() ISliceEndContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceEndContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceEndContext)
}

func (s *SliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSlice(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Slice() (localctx ISliceContext) {
	localctx = NewSliceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, XsParserRULE_slice)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1387)
			p.SliceFull()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1388)
			p.SliceStart()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1389)
			p.SliceEnd()
		}

	}

	return localctx
}

// ISliceFullContext is an interface to support dynamic dispatch.
type ISliceFullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceFullContext differentiates from other interfaces.
	IsSliceFullContext()
}

type SliceFullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceFullContext() *SliceFullContext {
	var p = new(SliceFullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_sliceFull
	return p
}

func (*SliceFullContext) IsSliceFullContext() {}

func NewSliceFullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceFullContext {
	var p = new(SliceFullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_sliceFull

	return p
}

func (s *SliceFullContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceFullContext) GetOp() antlr.Token { return s.op }

func (s *SliceFullContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceFullContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SliceFullContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceFullContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *SliceFullContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserLess_Equal, 0)
}

func (s *SliceFullContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *SliceFullContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserGreater_Equal, 0)
}

func (s *SliceFullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceFullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceFullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSliceFull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) SliceFull() (localctx ISliceFullContext) {
	localctx = NewSliceFullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, XsParserRULE_sliceFull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1392)
		p.expression(0)
	}
	{
		p.SetState(1393)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceFullContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(XsParserLess_Equal-26))|(1<<(XsParserGreater_Equal-26))|(1<<(XsParserLess-26))|(1<<(XsParserGreater-26)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceFullContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1394)
		p.expression(0)
	}

	return localctx
}

// ISliceStartContext is an interface to support dynamic dispatch.
type ISliceStartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceStartContext differentiates from other interfaces.
	IsSliceStartContext()
}

type SliceStartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceStartContext() *SliceStartContext {
	var p = new(SliceStartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_sliceStart
	return p
}

func (*SliceStartContext) IsSliceStartContext() {}

func NewSliceStartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceStartContext {
	var p = new(SliceStartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_sliceStart

	return p
}

func (s *SliceStartContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceStartContext) GetOp() antlr.Token { return s.op }

func (s *SliceStartContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceStartContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceStartContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *SliceStartContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserLess_Equal, 0)
}

func (s *SliceStartContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *SliceStartContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserGreater_Equal, 0)
}

func (s *SliceStartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceStartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceStartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSliceStart(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) SliceStart() (localctx ISliceStartContext) {
	localctx = NewSliceStartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, XsParserRULE_sliceStart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1396)
		p.expression(0)
	}
	{
		p.SetState(1397)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceStartContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(XsParserLess_Equal-26))|(1<<(XsParserGreater_Equal-26))|(1<<(XsParserLess-26))|(1<<(XsParserGreater-26)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceStartContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISliceEndContext is an interface to support dynamic dispatch.
type ISliceEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsSliceEndContext differentiates from other interfaces.
	IsSliceEndContext()
}

type SliceEndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptySliceEndContext() *SliceEndContext {
	var p = new(SliceEndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_sliceEnd
	return p
}

func (*SliceEndContext) IsSliceEndContext() {}

func NewSliceEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceEndContext {
	var p = new(SliceEndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_sliceEnd

	return p
}

func (s *SliceEndContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceEndContext) GetOp() antlr.Token { return s.op }

func (s *SliceEndContext) SetOp(v antlr.Token) { s.op = v }

func (s *SliceEndContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceEndContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *SliceEndContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserLess_Equal, 0)
}

func (s *SliceEndContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *SliceEndContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserGreater_Equal, 0)
}

func (s *SliceEndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceEndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceEndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitSliceEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) SliceEnd() (localctx ISliceEndContext) {
	localctx = NewSliceEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, XsParserRULE_sliceEnd)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1399)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*SliceEndContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(XsParserLess_Equal-26))|(1<<(XsParserGreater_Equal-26))|(1<<(XsParserLess-26))|(1<<(XsParserGreater-26)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*SliceEndContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1400)
		p.expression(0)
	}

	return localctx
}

// INameSpaceItemContext is an interface to support dynamic dispatch.
type INameSpaceItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameSpaceItemContext differentiates from other interfaces.
	IsNameSpaceItemContext()
}

type NameSpaceItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameSpaceItemContext() *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_nameSpaceItem
	return p
}

func (*NameSpaceItemContext) IsNameSpaceItemContext() {}

func NewNameSpaceItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameSpaceItemContext {
	var p = new(NameSpaceItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_nameSpaceItem

	return p
}

func (s *NameSpaceItemContext) GetParser() antlr.Parser { return s.parser }

func (s *NameSpaceItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameSpaceItemContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameSpaceItemContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameSpaceItemContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *NameSpaceItemContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *NameSpaceItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameSpaceItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameSpaceItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNameSpaceItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NameSpaceItem() (localctx INameSpaceItemContext) {
	localctx = NewNameSpaceItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, XsParserRULE_nameSpaceItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1402)
				p.Id()
			}
			{
				p.SetState(1403)
				p.Call()
			}
			p.SetState(1405)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == XsParserNew_Line {
				{
					p.SetState(1404)
					p.Match(XsParserNew_Line)
				}

			}

		}
		p.SetState(1411)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())
	}
	{
		p.SetState(1412)
		p.Id()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *NameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *NameContext) AllCall() []ICallContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICallContext)(nil)).Elem())
	var tst = make([]ICallContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICallContext)
		}
	}

	return tst
}

func (s *NameContext) Call(i int) ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *NameContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *NameContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, XsParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1414)
		p.Id()
	}
	p.SetState(1423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserDot {
		{
			p.SetState(1415)
			p.Call()
		}
		p.SetState(1417)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == XsParserNew_Line {
			{
				p.SetState(1416)
				p.Match(XsParserNew_Line)
			}

		}
		{
			p.SetState(1419)
			p.Id()
		}

		p.SetState(1425)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITemplateDefineContext is an interface to support dynamic dispatch.
type ITemplateDefineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineContext differentiates from other interfaces.
	IsTemplateDefineContext()
}

type TemplateDefineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineContext() *TemplateDefineContext {
	var p = new(TemplateDefineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_templateDefine
	return p
}

func (*TemplateDefineContext) IsTemplateDefineContext() {}

func NewTemplateDefineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineContext {
	var p = new(TemplateDefineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_templateDefine

	return p
}

func (s *TemplateDefineContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *TemplateDefineContext) AllTemplateDefineItem() []ITemplateDefineItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem())
	var tst = make([]ITemplateDefineItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITemplateDefineItemContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) TemplateDefineItem(i int) ITemplateDefineItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateDefineItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITemplateDefineItemContext)
}

func (s *TemplateDefineContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *TemplateDefineContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateDefineContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateDefineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTemplateDefine(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TemplateDefine() (localctx ITemplateDefineContext) {
	localctx = NewTemplateDefineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, XsParserRULE_templateDefine)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1426)
		p.Match(XsParserLess)
	}
	{
		p.SetState(1427)
		p.TemplateDefineItem()
	}
	p.SetState(1433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1428)
			p.More()
		}
		{
			p.SetState(1429)
			p.TemplateDefineItem()
		}

		p.SetState(1435)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1436)
		p.Match(XsParserGreater)
	}

	return localctx
}

// ITemplateDefineItemContext is an interface to support dynamic dispatch.
type ITemplateDefineItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateDefineItemContext differentiates from other interfaces.
	IsTemplateDefineItemContext()
}

type TemplateDefineItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDefineItemContext() *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_templateDefineItem
	return p
}

func (*TemplateDefineItemContext) IsTemplateDefineItemContext() {}

func NewTemplateDefineItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDefineItemContext {
	var p = new(TemplateDefineItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_templateDefineItem

	return p
}

func (s *TemplateDefineItemContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDefineItemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *TemplateDefineItemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TemplateDefineItemContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *TemplateDefineItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDefineItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDefineItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTemplateDefineItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TemplateDefineItem() (localctx ITemplateDefineItemContext) {
	localctx = NewTemplateDefineItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, XsParserRULE_templateDefineItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1438)
		p.Id()
	}
	p.SetState(1441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserColon {
		{
			p.SetState(1439)
			p.Match(XsParserColon)
		}
		{
			p.SetState(1440)
			p.Id()
		}

	}

	return localctx
}

// ITemplateCallContext is an interface to support dynamic dispatch.
type ITemplateCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateCallContext differentiates from other interfaces.
	IsTemplateCallContext()
}

type TemplateCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateCallContext() *TemplateCallContext {
	var p = new(TemplateCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_templateCall
	return p
}

func (*TemplateCallContext) IsTemplateCallContext() {}

func NewTemplateCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateCallContext {
	var p = new(TemplateCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_templateCall

	return p
}

func (s *TemplateCallContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateCallContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *TemplateCallContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TemplateCallContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *TemplateCallContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TemplateCallContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TemplateCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTemplateCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TemplateCall() (localctx ITemplateCallContext) {
	localctx = NewTemplateCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, XsParserRULE_templateCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1443)
		p.Match(XsParserLess)
	}
	{
		p.SetState(1444)
		p.TypeType()
	}
	p.SetState(1450)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1445)
			p.More()
		}
		{
			p.SetState(1446)
			p.TypeType()
		}

		p.SetState(1452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1453)
		p.Match(XsParserGreater)
	}

	return localctx
}

// ILambdaContext is an interface to support dynamic dispatch.
type ILambdaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsLambdaContext differentiates from other interfaces.
	IsLambdaContext()
}

type LambdaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyLambdaContext() *LambdaContext {
	var p = new(LambdaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_lambda
	return p
}

func (*LambdaContext) IsLambdaContext() {}

func NewLambdaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaContext {
	var p = new(LambdaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_lambda

	return p
}

func (s *LambdaContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaContext) GetT() antlr.Token { return s.t }

func (s *LambdaContext) SetT(v antlr.Token) { s.t = v }

func (s *LambdaContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *LambdaContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *LambdaContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *LambdaContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *LambdaContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *LambdaContext) LambdaIn() ILambdaInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILambdaInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILambdaInContext)
}

func (s *LambdaContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *LambdaContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *LambdaContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *LambdaContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLambda(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Lambda() (localctx ILambdaContext) {
	localctx = NewLambdaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, XsParserRULE_lambda)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1488)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 149, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1455)
			p.Left_brace()
		}
		p.SetState(1457)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(1456)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1459)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1463)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == XsParserNew_Line {
			{
				p.SetState(1460)
				p.Match(XsParserNew_Line)
			}

			p.SetState(1465)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1466)
			p.ExpressionList()
		}
		{
			p.SetState(1467)
			p.Right_brace()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1469)
			p.Left_brace()
		}
		p.SetState(1471)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(XsParserTypeI8-62))|(1<<(XsParserTypeU8-62))|(1<<(XsParserTypeI16-62))|(1<<(XsParserTypeU16-62))|(1<<(XsParserTypeI32-62))|(1<<(XsParserTypeU32-62))|(1<<(XsParserTypeI64-62))|(1<<(XsParserTypeU64-62))|(1<<(XsParserTypeF32-62))|(1<<(XsParserTypeF64-62))|(1<<(XsParserTypeChr-62))|(1<<(XsParserTypeStr-62))|(1<<(XsParserTypeBool-62))|(1<<(XsParserTypeInt-62))|(1<<(XsParserTypeNum-62))|(1<<(XsParserIDPrivate-62))|(1<<(XsParserIDPublic-62)))) != 0) {
			{
				p.SetState(1470)
				p.LambdaIn()
			}

		}
		{
			p.SetState(1473)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LambdaContext).t = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LambdaContext).t = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1474)
					p.Match(XsParserNew_Line)
				}

			}
			p.SetState(1479)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())
		}
		p.SetState(1483)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1480)
					p.FunctionSupportStatement()
				}

			}
			p.SetState(1485)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())
		}
		{
			p.SetState(1486)
			p.Right_brace()
		}

	}

	return localctx
}

// ILambdaInContext is an interface to support dynamic dispatch.
type ILambdaInContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLambdaInContext differentiates from other interfaces.
	IsLambdaInContext()
}

type LambdaInContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaInContext() *LambdaInContext {
	var p = new(LambdaInContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_lambdaIn
	return p
}

func (*LambdaInContext) IsLambdaInContext() {}

func NewLambdaInContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaInContext {
	var p = new(LambdaInContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_lambdaIn

	return p
}

func (s *LambdaInContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaInContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *LambdaInContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *LambdaInContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *LambdaInContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *LambdaInContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaInContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaInContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLambdaIn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LambdaIn() (localctx ILambdaInContext) {
	localctx = NewLambdaInContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, XsParserRULE_lambdaIn)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1490)
		p.Id()
	}
	p.SetState(1496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1491)
			p.More()
		}
		{
			p.SetState(1492)
			p.Id()
		}

		p.SetState(1498)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPkgAnonymousContext is an interface to support dynamic dispatch.
type IPkgAnonymousContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousContext differentiates from other interfaces.
	IsPkgAnonymousContext()
}

type PkgAnonymousContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousContext() *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pkgAnonymous
	return p
}

func (*PkgAnonymousContext) IsPkgAnonymousContext() {}

func NewPkgAnonymousContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousContext {
	var p = new(PkgAnonymousContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pkgAnonymous

	return p
}

func (s *PkgAnonymousContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousContext) PkgAnonymousAssign() IPkgAnonymousAssignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignContext)
}

func (s *PkgAnonymousContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPkgAnonymous(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PkgAnonymous() (localctx IPkgAnonymousContext) {
	localctx = NewPkgAnonymousContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, XsParserRULE_pkgAnonymous)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1499)
		p.PkgAnonymousAssign()
	}

	return localctx
}

// IPkgAnonymousAssignContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignContext differentiates from other interfaces.
	IsPkgAnonymousAssignContext()
}

type PkgAnonymousAssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignContext() *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pkgAnonymousAssign
	return p
}

func (*PkgAnonymousAssignContext) IsPkgAnonymousAssignContext() {}

func NewPkgAnonymousAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignContext {
	var p = new(PkgAnonymousAssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pkgAnonymousAssign

	return p
}

func (s *PkgAnonymousAssignContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *PkgAnonymousAssignContext) AllPkgAnonymousAssignElement() []IPkgAnonymousAssignElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem())
	var tst = make([]IPkgAnonymousAssignElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPkgAnonymousAssignElementContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) PkgAnonymousAssignElement(i int) IPkgAnonymousAssignElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPkgAnonymousAssignElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPkgAnonymousAssignElementContext)
}

func (s *PkgAnonymousAssignContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *PkgAnonymousAssignContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *PkgAnonymousAssignContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *PkgAnonymousAssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPkgAnonymousAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PkgAnonymousAssign() (localctx IPkgAnonymousAssignContext) {
	localctx = NewPkgAnonymousAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, XsParserRULE_pkgAnonymousAssign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1501)
		p.Left_brace()
	}
	{
		p.SetState(1502)
		p.PkgAnonymousAssignElement()
	}
	p.SetState(1508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1503)
			p.More()
		}
		{
			p.SetState(1504)
			p.PkgAnonymousAssignElement()
		}

		p.SetState(1510)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1511)
		p.Right_brace()
	}

	return localctx
}

// IPkgAnonymousAssignElementContext is an interface to support dynamic dispatch.
type IPkgAnonymousAssignElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPkgAnonymousAssignElementContext differentiates from other interfaces.
	IsPkgAnonymousAssignElementContext()
}

type PkgAnonymousAssignElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPkgAnonymousAssignElementContext() *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pkgAnonymousAssignElement
	return p
}

func (*PkgAnonymousAssignElementContext) IsPkgAnonymousAssignElementContext() {}

func NewPkgAnonymousAssignElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PkgAnonymousAssignElementContext {
	var p = new(PkgAnonymousAssignElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pkgAnonymousAssignElement

	return p
}

func (s *PkgAnonymousAssignElementContext) GetParser() antlr.Parser { return s.parser }

func (s *PkgAnonymousAssignElementContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PkgAnonymousAssignElementContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *PkgAnonymousAssignElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PkgAnonymousAssignElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PkgAnonymousAssignElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PkgAnonymousAssignElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPkgAnonymousAssignElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PkgAnonymousAssignElement() (localctx IPkgAnonymousAssignElementContext) {
	localctx = NewPkgAnonymousAssignElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, XsParserRULE_pkgAnonymousAssignElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1513)
		p.Name()
	}
	{
		p.SetState(1514)
		p.Match(XsParserEqual)
	}
	{
		p.SetState(1515)
		p.expression(0)
	}

	return localctx
}

// IFunctionExpressionContext is an interface to support dynamic dispatch.
type IFunctionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsFunctionExpressionContext differentiates from other interfaces.
	IsFunctionExpressionContext()
}

type FunctionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyFunctionExpressionContext() *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_functionExpression
	return p
}

func (*FunctionExpressionContext) IsFunctionExpressionContext() {}

func NewFunctionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionExpressionContext {
	var p = new(FunctionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_functionExpression

	return p
}

func (s *FunctionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionExpressionContext) GetT() antlr.Token { return s.t }

func (s *FunctionExpressionContext) SetT(v antlr.Token) { s.t = v }

func (s *FunctionExpressionContext) ParameterClauseIn() IParameterClauseInContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseInContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseInContext)
}

func (s *FunctionExpressionContext) ParameterClauseOut() IParameterClauseOutContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterClauseOutContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterClauseOutContext)
}

func (s *FunctionExpressionContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *FunctionExpressionContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *FunctionExpressionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *FunctionExpressionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *FunctionExpressionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *FunctionExpressionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *FunctionExpressionContext) AllFunctionSupportStatement() []IFunctionSupportStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem())
	var tst = make([]IFunctionSupportStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionSupportStatementContext)
		}
	}

	return tst
}

func (s *FunctionExpressionContext) FunctionSupportStatement(i int) IFunctionSupportStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSupportStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionSupportStatementContext)
}

func (s *FunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitFunctionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) FunctionExpression() (localctx IFunctionExpressionContext) {
	localctx = NewFunctionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, XsParserRULE_functionExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1517)
		p.ParameterClauseIn()
	}
	{
		p.SetState(1518)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*FunctionExpressionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*FunctionExpressionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(1519)
			p.Match(XsParserNew_Line)
		}

		p.SetState(1524)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1525)
		p.ParameterClauseOut()
	}
	{
		p.SetState(1526)
		p.Left_brace()
	}
	p.SetState(1530)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1527)
				p.FunctionSupportStatement()
			}

		}
		p.SetState(1532)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext())
	}
	{
		p.SetState(1533)
		p.Right_brace()
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TupleExpressionContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, XsParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1535)
		p.Left_paren()
	}
	{
		p.SetState(1536)
		p.expression(0)
	}
	p.SetState(1542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1537)
			p.More()
		}
		{
			p.SetState(1538)
			p.expression(0)
		}

		p.SetState(1544)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1545)
		p.Right_paren()
	}

	return localctx
}

// IPlusMinusContext is an interface to support dynamic dispatch.
type IPlusMinusContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPlusMinusContext differentiates from other interfaces.
	IsPlusMinusContext()
}

type PlusMinusContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPlusMinusContext() *PlusMinusContext {
	var p = new(PlusMinusContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_plusMinus
	return p
}

func (*PlusMinusContext) IsPlusMinusContext() {}

func NewPlusMinusContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PlusMinusContext {
	var p = new(PlusMinusContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_plusMinus

	return p
}

func (s *PlusMinusContext) GetParser() antlr.Parser { return s.parser }

func (s *PlusMinusContext) Add() IAddContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAddContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAddContext)
}

func (s *PlusMinusContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PlusMinusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PlusMinusContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PlusMinusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPlusMinus(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) PlusMinus() (localctx IPlusMinusContext) {
	localctx = NewPlusMinusContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, XsParserRULE_plusMinus)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1547)
		p.Add()
	}
	{
		p.SetState(1548)
		p.expression(0)
	}

	return localctx
}

// INegateContext is an interface to support dynamic dispatch.
type INegateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegateContext differentiates from other interfaces.
	IsNegateContext()
}

type NegateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegateContext() *NegateContext {
	var p = new(NegateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_negate
	return p
}

func (*NegateContext) IsNegateContext() {}

func NewNegateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegateContext {
	var p = new(NegateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_negate

	return p
}

func (s *NegateContext) GetParser() antlr.Parser { return s.parser }

func (s *NegateContext) Wave() IWaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaveContext)
}

func (s *NegateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NegateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNegate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Negate() (localctx INegateContext) {
	localctx = NewNegateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, XsParserRULE_negate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1550)
		p.Wave()
	}
	{
		p.SetState(1551)
		p.expression(0)
	}

	return localctx
}

// ILinqContext is an interface to support dynamic dispatch.
type ILinqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqContext differentiates from other interfaces.
	IsLinqContext()
}

type LinqContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqContext() *LinqContext {
	var p = new(LinqContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_linq
	return p
}

func (*LinqContext) IsLinqContext() {}

func NewLinqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqContext {
	var p = new(LinqContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_linq

	return p
}

func (s *LinqContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqContext) GetK() antlr.Token { return s.k }

func (s *LinqContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqContext) LinqHeadKeyword() ILinqHeadKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadKeywordContext)
}

func (s *LinqContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *LinqContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *LinqContext) LinqSelect() antlr.TerminalNode {
	return s.GetToken(XsParserLinqSelect, 0)
}

func (s *LinqContext) LinqBy() antlr.TerminalNode {
	return s.GetToken(XsParserLinqBy, 0)
}

func (s *LinqContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *LinqContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *LinqContext) AllLinqItem() []ILinqItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILinqItemContext)(nil)).Elem())
	var tst = make([]ILinqItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILinqItemContext)
		}
	}

	return tst
}

func (s *LinqContext) LinqItem(i int) ILinqItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILinqItemContext)
}

func (s *LinqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLinq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Linq() (localctx ILinqContext) {
	localctx = NewLinqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, XsParserRULE_linq)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1553)
		p.LinqHeadKeyword()
	}
	p.SetState(1555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1554)
			p.Match(XsParserNew_Line)
		}

	}
	{
		p.SetState(1557)
		p.expression(0)
	}
	{
		p.SetState(1558)
		p.Match(XsParserRight_Arrow)
	}
	p.SetState(1560)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1559)
			p.Match(XsParserNew_Line)
		}

	}
	p.SetState(1563)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1562)
				p.LinqItem()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1565)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext())
	}
	{
		p.SetState(1567)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LinqContext).k = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserLinqBy || _la == XsParserLinqSelect) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LinqContext).k = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1569)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1568)
			p.Match(XsParserNew_Line)
		}

	}
	{
		p.SetState(1571)
		p.expression(0)
	}

	return localctx
}

// ILinqItemContext is an interface to support dynamic dispatch.
type ILinqItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqItemContext differentiates from other interfaces.
	IsLinqItemContext()
}

type LinqItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqItemContext() *LinqItemContext {
	var p = new(LinqItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_linqItem
	return p
}

func (*LinqItemContext) IsLinqItemContext() {}

func NewLinqItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqItemContext {
	var p = new(LinqItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_linqItem

	return p
}

func (s *LinqItemContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqItemContext) LinqKeyword() ILinqKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqKeywordContext)
}

func (s *LinqItemContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *LinqItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LinqItemContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *LinqItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLinqItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LinqItem() (localctx ILinqItemContext) {
	localctx = NewLinqItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, XsParserRULE_linqItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1573)
		p.LinqKeyword()
	}
	p.SetState(1575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(XsParserLeft_Flow-37))|(1<<(XsParserLess-37))|(1<<(XsParserLeft_Paren-37))|(1<<(XsParserLeft_Brace-37))|(1<<(XsParserLeft_Brack-37))|(1<<(XsParserQuestion-37))|(1<<(XsParserBang-37))|(1<<(XsParserWave-37))|(1<<(XsParserAdd-37))|(1<<(XsParserSub-37))|(1<<(XsParserTypeI8-37))|(1<<(XsParserTypeU8-37))|(1<<(XsParserTypeI16-37))|(1<<(XsParserTypeU16-37))|(1<<(XsParserTypeI32-37))|(1<<(XsParserTypeU32-37))|(1<<(XsParserTypeI64-37)))) != 0) || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(XsParserTypeU64-69))|(1<<(XsParserTypeF32-69))|(1<<(XsParserTypeF64-69))|(1<<(XsParserTypeChr-69))|(1<<(XsParserTypeStr-69))|(1<<(XsParserTypeBool-69))|(1<<(XsParserTypeInt-69))|(1<<(XsParserTypeNum-69))|(1<<(XsParserTrueLiteral-69))|(1<<(XsParserFalseLiteral-69))|(1<<(XsParserUndefinedLiteral-69))|(1<<(XsParserNumberLiteral-69))|(1<<(XsParserTextLiteral-69))|(1<<(XsParserCharLiteral-69))|(1<<(XsParserIDPrivate-69))|(1<<(XsParserIDPublic-69))|(1<<(XsParserDiscard-69)))) != 0) {
		{
			p.SetState(1574)
			p.expression(0)
		}

	}
	{
		p.SetState(1577)
		p.Match(XsParserRight_Arrow)
	}
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1578)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// ILinqKeywordContext is an interface to support dynamic dispatch.
type ILinqKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinqKeywordContext differentiates from other interfaces.
	IsLinqKeywordContext()
}

type LinqKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinqKeywordContext() *LinqKeywordContext {
	var p = new(LinqKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_linqKeyword
	return p
}

func (*LinqKeywordContext) IsLinqKeywordContext() {}

func NewLinqKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqKeywordContext {
	var p = new(LinqKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_linqKeyword

	return p
}

func (s *LinqKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqKeywordContext) LinqHeadKeyword() ILinqHeadKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqHeadKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqHeadKeywordContext)
}

func (s *LinqKeywordContext) LinqBodyKeyword() ILinqBodyKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqBodyKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqBodyKeywordContext)
}

func (s *LinqKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLinqKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LinqKeyword() (localctx ILinqKeywordContext) {
	localctx = NewLinqKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, XsParserRULE_linqKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1583)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserLinqFrom:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1581)
			p.LinqHeadKeyword()
		}

	case XsParserLinqBy, XsParserLinqSelect, XsParserLinqWhere, XsParserLinqGroup, XsParserLinqInto, XsParserLinqOrderby, XsParserLinqJoin, XsParserLinqLet, XsParserLinqIn, XsParserLinqOn, XsParserLinqEquals, XsParserLinqAscending, XsParserLinqDescending:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1582)
			p.LinqBodyKeyword()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILinqHeadKeywordContext is an interface to support dynamic dispatch.
type ILinqHeadKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqHeadKeywordContext differentiates from other interfaces.
	IsLinqHeadKeywordContext()
}

type LinqHeadKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqHeadKeywordContext() *LinqHeadKeywordContext {
	var p = new(LinqHeadKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_linqHeadKeyword
	return p
}

func (*LinqHeadKeywordContext) IsLinqHeadKeywordContext() {}

func NewLinqHeadKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqHeadKeywordContext {
	var p = new(LinqHeadKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_linqHeadKeyword

	return p
}

func (s *LinqHeadKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqHeadKeywordContext) GetK() antlr.Token { return s.k }

func (s *LinqHeadKeywordContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqHeadKeywordContext) LinqFrom() antlr.TerminalNode {
	return s.GetToken(XsParserLinqFrom, 0)
}

func (s *LinqHeadKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqHeadKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqHeadKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLinqHeadKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LinqHeadKeyword() (localctx ILinqHeadKeywordContext) {
	localctx = NewLinqHeadKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, XsParserRULE_linqHeadKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1585)

		var _m = p.Match(XsParserLinqFrom)

		localctx.(*LinqHeadKeywordContext).k = _m
	}

	return localctx
}

// ILinqBodyKeywordContext is an interface to support dynamic dispatch.
type ILinqBodyKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetK returns the k token.
	GetK() antlr.Token

	// SetK sets the k token.
	SetK(antlr.Token)

	// IsLinqBodyKeywordContext differentiates from other interfaces.
	IsLinqBodyKeywordContext()
}

type LinqBodyKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	k      antlr.Token
}

func NewEmptyLinqBodyKeywordContext() *LinqBodyKeywordContext {
	var p = new(LinqBodyKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_linqBodyKeyword
	return p
}

func (*LinqBodyKeywordContext) IsLinqBodyKeywordContext() {}

func NewLinqBodyKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinqBodyKeywordContext {
	var p = new(LinqBodyKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_linqBodyKeyword

	return p
}

func (s *LinqBodyKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *LinqBodyKeywordContext) GetK() antlr.Token { return s.k }

func (s *LinqBodyKeywordContext) SetK(v antlr.Token) { s.k = v }

func (s *LinqBodyKeywordContext) LinqSelect() antlr.TerminalNode {
	return s.GetToken(XsParserLinqSelect, 0)
}

func (s *LinqBodyKeywordContext) LinqBy() antlr.TerminalNode {
	return s.GetToken(XsParserLinqBy, 0)
}

func (s *LinqBodyKeywordContext) LinqWhere() antlr.TerminalNode {
	return s.GetToken(XsParserLinqWhere, 0)
}

func (s *LinqBodyKeywordContext) LinqGroup() antlr.TerminalNode {
	return s.GetToken(XsParserLinqGroup, 0)
}

func (s *LinqBodyKeywordContext) LinqInto() antlr.TerminalNode {
	return s.GetToken(XsParserLinqInto, 0)
}

func (s *LinqBodyKeywordContext) LinqOrderby() antlr.TerminalNode {
	return s.GetToken(XsParserLinqOrderby, 0)
}

func (s *LinqBodyKeywordContext) LinqJoin() antlr.TerminalNode {
	return s.GetToken(XsParserLinqJoin, 0)
}

func (s *LinqBodyKeywordContext) LinqLet() antlr.TerminalNode {
	return s.GetToken(XsParserLinqLet, 0)
}

func (s *LinqBodyKeywordContext) LinqIn() antlr.TerminalNode {
	return s.GetToken(XsParserLinqIn, 0)
}

func (s *LinqBodyKeywordContext) LinqOn() antlr.TerminalNode {
	return s.GetToken(XsParserLinqOn, 0)
}

func (s *LinqBodyKeywordContext) LinqEquals() antlr.TerminalNode {
	return s.GetToken(XsParserLinqEquals, 0)
}

func (s *LinqBodyKeywordContext) LinqAscending() antlr.TerminalNode {
	return s.GetToken(XsParserLinqAscending, 0)
}

func (s *LinqBodyKeywordContext) LinqDescending() antlr.TerminalNode {
	return s.GetToken(XsParserLinqDescending, 0)
}

func (s *LinqBodyKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinqBodyKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinqBodyKeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLinqBodyKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) LinqBodyKeyword() (localctx ILinqBodyKeywordContext) {
	localctx = NewLinqBodyKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, XsParserRULE_linqBodyKeyword)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1587)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*LinqBodyKeywordContext).k = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*LinqBodyKeywordContext).k = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringExpressionContext is an interface to support dynamic dispatch.
type IStringExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionContext differentiates from other interfaces.
	IsStringExpressionContext()
}

type StringExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionContext() *StringExpressionContext {
	var p = new(StringExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_stringExpression
	return p
}

func (*StringExpressionContext) IsStringExpressionContext() {}

func NewStringExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionContext {
	var p = new(StringExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_stringExpression

	return p
}

func (s *StringExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTextLiteral, 0)
}

func (s *StringExpressionContext) AllStringExpressionElement() []IStringExpressionElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem())
	var tst = make([]IStringExpressionElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStringExpressionElementContext)
		}
	}

	return tst
}

func (s *StringExpressionContext) StringExpressionElement(i int) IStringExpressionElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringExpressionElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStringExpressionElementContext)
}

func (s *StringExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitStringExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) StringExpression() (localctx IStringExpressionContext) {
	localctx = NewStringExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, XsParserRULE_stringExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1589)
		p.Match(XsParserTextLiteral)
	}
	p.SetState(1591)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1590)
				p.StringExpressionElement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1593)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext())
	}

	return localctx
}

// IStringExpressionElementContext is an interface to support dynamic dispatch.
type IStringExpressionElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringExpressionElementContext differentiates from other interfaces.
	IsStringExpressionElementContext()
}

type StringExpressionElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringExpressionElementContext() *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_stringExpressionElement
	return p
}

func (*StringExpressionElementContext) IsStringExpressionElementContext() {}

func NewStringExpressionElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringExpressionElementContext {
	var p = new(StringExpressionElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_stringExpressionElement

	return p
}

func (s *StringExpressionElementContext) GetParser() antlr.Parser { return s.parser }

func (s *StringExpressionElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StringExpressionElementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTextLiteral, 0)
}

func (s *StringExpressionElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringExpressionElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringExpressionElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitStringExpressionElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) StringExpressionElement() (localctx IStringExpressionElementContext) {
	localctx = NewStringExpressionElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, XsParserRULE_stringExpressionElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1595)
		p.expression(0)
	}
	{
		p.SetState(1596)
		p.Match(XsParserTextLiteral)
	}

	return localctx
}

// IDataStatementContext is an interface to support dynamic dispatch.
type IDataStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsDataStatementContext differentiates from other interfaces.
	IsDataStatementContext()
}

type DataStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyDataStatementContext() *DataStatementContext {
	var p = new(DataStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_dataStatement
	return p
}

func (*DataStatementContext) IsDataStatementContext() {}

func NewDataStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataStatementContext {
	var p = new(DataStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_dataStatement

	return p
}

func (s *DataStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DataStatementContext) GetT() antlr.Token { return s.t }

func (s *DataStatementContext) SetT(v antlr.Token) { s.t = v }

func (s *DataStatementContext) FloatExpr() IFloatExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFloatExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFloatExprContext)
}

func (s *DataStatementContext) IntegerExpr() IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *DataStatementContext) TextLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTextLiteral, 0)
}

func (s *DataStatementContext) CharLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserCharLiteral, 0)
}

func (s *DataStatementContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTrueLiteral, 0)
}

func (s *DataStatementContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserFalseLiteral, 0)
}

func (s *DataStatementContext) NilExpr() INilExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INilExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INilExprContext)
}

func (s *DataStatementContext) UndefinedLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserUndefinedLiteral, 0)
}

func (s *DataStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitDataStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) DataStatement() (localctx IDataStatementContext) {
	localctx = NewDataStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, XsParserRULE_dataStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1598)
			p.FloatExpr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1599)
			p.IntegerExpr()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1600)

			var _m = p.Match(XsParserTextLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1601)

			var _m = p.Match(XsParserCharLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1602)

			var _m = p.Match(XsParserTrueLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1603)

			var _m = p.Match(XsParserFalseLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1604)
			p.NilExpr()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1605)

			var _m = p.Match(XsParserUndefinedLiteral)

			localctx.(*DataStatementContext).t = _m
		}

	}

	return localctx
}

// IFloatExprContext is an interface to support dynamic dispatch.
type IFloatExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFloatExprContext differentiates from other interfaces.
	IsFloatExprContext()
}

type FloatExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatExprContext() *FloatExprContext {
	var p = new(FloatExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_floatExpr
	return p
}

func (*FloatExprContext) IsFloatExprContext() {}

func NewFloatExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatExprContext {
	var p = new(FloatExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_floatExpr

	return p
}

func (s *FloatExprContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatExprContext) AllIntegerExpr() []IIntegerExprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem())
	var tst = make([]IIntegerExprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntegerExprContext)
		}
	}

	return tst
}

func (s *FloatExprContext) IntegerExpr(i int) IIntegerExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerExprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntegerExprContext)
}

func (s *FloatExprContext) Call() ICallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallContext)
}

func (s *FloatExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitFloatExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) FloatExpr() (localctx IFloatExprContext) {
	localctx = NewFloatExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, XsParserRULE_floatExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1608)
		p.IntegerExpr()
	}
	{
		p.SetState(1609)
		p.Call()
	}
	{
		p.SetState(1610)
		p.IntegerExpr()
	}

	return localctx
}

// IIntegerExprContext is an interface to support dynamic dispatch.
type IIntegerExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerExprContext differentiates from other interfaces.
	IsIntegerExprContext()
}

type IntegerExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerExprContext() *IntegerExprContext {
	var p = new(IntegerExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_integerExpr
	return p
}

func (*IntegerExprContext) IsIntegerExprContext() {}

func NewIntegerExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerExprContext {
	var p = new(IntegerExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_integerExpr

	return p
}

func (s *IntegerExprContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerExprContext) AllNumberLiteral() []antlr.TerminalNode {
	return s.GetTokens(XsParserNumberLiteral)
}

func (s *IntegerExprContext) NumberLiteral(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNumberLiteral, i)
}

func (s *IntegerExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitIntegerExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) IntegerExpr() (localctx IIntegerExprContext) {
	localctx = NewIntegerExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, XsParserRULE_integerExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1612)
				p.Match(XsParserNumberLiteral)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1615)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeNotNullContext is an interface to support dynamic dispatch.
type ITypeNotNullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNotNullContext differentiates from other interfaces.
	IsTypeNotNullContext()
}

type TypeNotNullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNotNullContext() *TypeNotNullContext {
	var p = new(TypeNotNullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeNotNull
	return p
}

func (*TypeNotNullContext) IsTypeNotNullContext() {}

func NewTypeNotNullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNotNullContext {
	var p = new(TypeNotNullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeNotNull

	return p
}

func (s *TypeNotNullContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNotNullContext) TypeTuple() ITypeTupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTupleContext)
}

func (s *TypeNotNullContext) TypeArray() ITypeArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeArrayContext)
}

func (s *TypeNotNullContext) TypeList() ITypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeNotNullContext) TypeSet() ITypeSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSetContext)
}

func (s *TypeNotNullContext) TypeDictionary() ITypeDictionaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDictionaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDictionaryContext)
}

func (s *TypeNotNullContext) TypeChannel() ITypeChannelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeChannelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeChannelContext)
}

func (s *TypeNotNullContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *TypeNotNullContext) TypePackage() ITypePackageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypePackageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypePackageContext)
}

func (s *TypeNotNullContext) TypeFunction() ITypeFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionContext)
}

func (s *TypeNotNullContext) TypeAny() ITypeAnyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnyContext)
}

func (s *TypeNotNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNotNullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNotNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeNotNull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeNotNull() (localctx ITypeNotNullContext) {
	localctx = NewTypeNotNullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, XsParserRULE_typeNotNull)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1627)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1617)
			p.TypeTuple()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1618)
			p.TypeArray()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1619)
			p.TypeList()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1620)
			p.TypeSet()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1621)
			p.TypeDictionary()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1622)
			p.TypeChannel()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1623)
			p.TypeBasic()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1624)
			p.TypePackage()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1625)
			p.TypeFunction()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1626)
			p.TypeAny()
		}

	}

	return localctx
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeReference
	return p
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) Bang() antlr.TerminalNode {
	return s.GetToken(XsParserBang, 0)
}

func (s *TypeReferenceContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeReferenceContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, XsParserRULE_typeReference)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1629)
		p.Match(XsParserBang)
	}
	p.SetState(1632)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserLinqFrom, XsParserLinqBy, XsParserLinqSelect, XsParserLinqWhere, XsParserLinqGroup, XsParserLinqInto, XsParserLinqOrderby, XsParserLinqJoin, XsParserLinqLet, XsParserLinqIn, XsParserLinqOn, XsParserLinqEquals, XsParserLinqAscending, XsParserLinqDescending, XsParserEvent, XsParserLeft_Paren, XsParserLeft_Brace, XsParserLeft_Brack, XsParserTypeI8, XsParserTypeU8, XsParserTypeI16, XsParserTypeU16, XsParserTypeI32, XsParserTypeU32, XsParserTypeI64, XsParserTypeU64, XsParserTypeF32, XsParserTypeF64, XsParserTypeChr, XsParserTypeStr, XsParserTypeBool, XsParserTypeInt, XsParserTypeNum, XsParserIDPrivate, XsParserIDPublic:
		{
			p.SetState(1630)
			p.TypeNotNull()
		}

	case XsParserQuestion:
		{
			p.SetState(1631)
			p.TypeNullable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNullableContext is an interface to support dynamic dispatch.
type ITypeNullableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNullableContext differentiates from other interfaces.
	IsTypeNullableContext()
}

type TypeNullableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNullableContext() *TypeNullableContext {
	var p = new(TypeNullableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeNullable
	return p
}

func (*TypeNullableContext) IsTypeNullableContext() {}

func NewTypeNullableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNullableContext {
	var p = new(TypeNullableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeNullable

	return p
}

func (s *TypeNullableContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNullableContext) Question() antlr.TerminalNode {
	return s.GetToken(XsParserQuestion, 0)
}

func (s *TypeNullableContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeNullableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNullableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNullableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeNullable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeNullable() (localctx ITypeNullableContext) {
	localctx = NewTypeNullableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, XsParserRULE_typeNullable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1634)
		p.Match(XsParserQuestion)
	}
	{
		p.SetState(1635)
		p.TypeNotNull()
	}

	return localctx
}

// ITypeTypeContext is an interface to support dynamic dispatch.
type ITypeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTypeContext differentiates from other interfaces.
	IsTypeTypeContext()
}

type TypeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTypeContext() *TypeTypeContext {
	var p = new(TypeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeType
	return p
}

func (*TypeTypeContext) IsTypeTypeContext() {}

func NewTypeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTypeContext {
	var p = new(TypeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeType

	return p
}

func (s *TypeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTypeContext) TypeNotNull() ITypeNotNullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNotNullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNotNullContext)
}

func (s *TypeTypeContext) TypeNullable() ITypeNullableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNullableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNullableContext)
}

func (s *TypeTypeContext) TypeReference() ITypeReferenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeReferenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *TypeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeType() (localctx ITypeTypeContext) {
	localctx = NewTypeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, XsParserRULE_typeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1640)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserLinqFrom, XsParserLinqBy, XsParserLinqSelect, XsParserLinqWhere, XsParserLinqGroup, XsParserLinqInto, XsParserLinqOrderby, XsParserLinqJoin, XsParserLinqLet, XsParserLinqIn, XsParserLinqOn, XsParserLinqEquals, XsParserLinqAscending, XsParserLinqDescending, XsParserEvent, XsParserLeft_Paren, XsParserLeft_Brace, XsParserLeft_Brack, XsParserTypeI8, XsParserTypeU8, XsParserTypeI16, XsParserTypeU16, XsParserTypeI32, XsParserTypeU32, XsParserTypeI64, XsParserTypeU64, XsParserTypeF32, XsParserTypeF64, XsParserTypeChr, XsParserTypeStr, XsParserTypeBool, XsParserTypeInt, XsParserTypeNum, XsParserIDPrivate, XsParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1637)
			p.TypeNotNull()
		}

	case XsParserQuestion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1638)
			p.TypeNullable()
		}

	case XsParserBang:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1639)
			p.TypeReference()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeTupleContext is an interface to support dynamic dispatch.
type ITypeTupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeTupleContext differentiates from other interfaces.
	IsTypeTupleContext()
}

type TypeTupleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeTupleContext() *TypeTupleContext {
	var p = new(TypeTupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeTuple
	return p
}

func (*TypeTupleContext) IsTypeTupleContext() {}

func NewTypeTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeTupleContext {
	var p = new(TypeTupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeTuple

	return p
}

func (s *TypeTupleContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeTupleContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeTupleContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeTupleContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeTupleContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeTupleContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeTupleContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeTupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeTupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeTupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeTuple() (localctx ITypeTupleContext) {
	localctx = NewTypeTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, XsParserRULE_typeTuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1642)
		p.Left_paren()
	}
	{
		p.SetState(1643)
		p.TypeType()
	}
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == XsParserComma {
		{
			p.SetState(1644)
			p.More()
		}
		{
			p.SetState(1645)
			p.TypeType()
		}

		p.SetState(1649)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1651)
		p.Right_paren()
	}

	return localctx
}

// ITypeArrayContext is an interface to support dynamic dispatch.
type ITypeArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeArrayContext differentiates from other interfaces.
	IsTypeArrayContext()
}

type TypeArrayContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArrayContext() *TypeArrayContext {
	var p = new(TypeArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeArray
	return p
}

func (*TypeArrayContext) IsTypeArrayContext() {}

func NewTypeArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArrayContext {
	var p = new(TypeArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeArray

	return p
}

func (s *TypeArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArrayContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *TypeArrayContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *TypeArrayContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *TypeArrayContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeArray(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeArray() (localctx ITypeArrayContext) {
	localctx = NewTypeArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, XsParserRULE_typeArray)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1653)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1654)
		p.Match(XsParserColon)
	}
	{
		p.SetState(1655)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1656)
		p.TypeType()
	}

	return localctx
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeList
	return p
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *TypeListContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *TypeListContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, XsParserRULE_typeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1658)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1659)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1660)
		p.TypeType()
	}

	return localctx
}

// ITypeSetContext is an interface to support dynamic dispatch.
type ITypeSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSetContext differentiates from other interfaces.
	IsTypeSetContext()
}

type TypeSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSetContext() *TypeSetContext {
	var p = new(TypeSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeSet
	return p
}

func (*TypeSetContext) IsTypeSetContext() {}

func NewTypeSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSetContext {
	var p = new(TypeSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeSet

	return p
}

func (s *TypeSetContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSetContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *TypeSetContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeSetContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *TypeSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeSet() (localctx ITypeSetContext) {
	localctx = NewTypeSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, XsParserRULE_typeSet)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1663)
		p.TypeType()
	}
	{
		p.SetState(1664)
		p.Match(XsParserRight_Brack)
	}

	return localctx
}

// ITypeDictionaryContext is an interface to support dynamic dispatch.
type ITypeDictionaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDictionaryContext differentiates from other interfaces.
	IsTypeDictionaryContext()
}

type TypeDictionaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDictionaryContext() *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeDictionary
	return p
}

func (*TypeDictionaryContext) IsTypeDictionaryContext() {}

func NewTypeDictionaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDictionaryContext {
	var p = new(TypeDictionaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeDictionary

	return p
}

func (s *TypeDictionaryContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDictionaryContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *TypeDictionaryContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeDictionaryContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeDictionaryContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *TypeDictionaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDictionaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDictionaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeDictionary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeDictionary() (localctx ITypeDictionaryContext) {
	localctx = NewTypeDictionaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, XsParserRULE_typeDictionary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1666)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1667)
		p.TypeType()
	}
	{
		p.SetState(1668)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1669)
		p.TypeType()
	}

	return localctx
}

// ITypeChannelContext is an interface to support dynamic dispatch.
type ITypeChannelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeChannelContext differentiates from other interfaces.
	IsTypeChannelContext()
}

type TypeChannelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeChannelContext() *TypeChannelContext {
	var p = new(TypeChannelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeChannel
	return p
}

func (*TypeChannelContext) IsTypeChannelContext() {}

func NewTypeChannelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeChannelContext {
	var p = new(TypeChannelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeChannel

	return p
}

func (s *TypeChannelContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeChannelContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *TypeChannelContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *TypeChannelContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *TypeChannelContext) TypeType() ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeChannelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeChannelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeChannelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeChannel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeChannel() (localctx ITypeChannelContext) {
	localctx = NewTypeChannelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, XsParserRULE_typeChannel)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1671)
		p.Match(XsParserLeft_Brack)
	}
	{
		p.SetState(1672)
		p.Match(XsParserRight_Arrow)
	}
	{
		p.SetState(1673)
		p.Match(XsParserRight_Brack)
	}
	{
		p.SetState(1674)
		p.TypeType()
	}

	return localctx
}

// ITypePackageContext is an interface to support dynamic dispatch.
type ITypePackageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypePackageContext differentiates from other interfaces.
	IsTypePackageContext()
}

type TypePackageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypePackageContext() *TypePackageContext {
	var p = new(TypePackageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typePackage
	return p
}

func (*TypePackageContext) IsTypePackageContext() {}

func NewTypePackageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypePackageContext {
	var p = new(TypePackageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typePackage

	return p
}

func (s *TypePackageContext) GetParser() antlr.Parser { return s.parser }

func (s *TypePackageContext) NameSpaceItem() INameSpaceItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameSpaceItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameSpaceItemContext)
}

func (s *TypePackageContext) TemplateCall() ITemplateCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateCallContext)
}

func (s *TypePackageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypePackageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypePackageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypePackage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypePackage() (localctx ITypePackageContext) {
	localctx = NewTypePackageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, XsParserRULE_typePackage)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1676)
		p.NameSpaceItem()
	}
	p.SetState(1678)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1677)
			p.TemplateCall()
		}

	}

	return localctx
}

// ITypeFunctionContext is an interface to support dynamic dispatch.
type ITypeFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeFunctionContext differentiates from other interfaces.
	IsTypeFunctionContext()
}

type TypeFunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeFunctionContext() *TypeFunctionContext {
	var p = new(TypeFunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeFunction
	return p
}

func (*TypeFunctionContext) IsTypeFunctionContext() {}

func NewTypeFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionContext {
	var p = new(TypeFunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeFunction

	return p
}

func (s *TypeFunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionContext) GetT() antlr.Token { return s.t }

func (s *TypeFunctionContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeFunctionContext) AllTypeFunctionParameterClause() []ITypeFunctionParameterClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem())
	var tst = make([]ITypeFunctionParameterClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeFunctionParameterClauseContext)
		}
	}

	return tst
}

func (s *TypeFunctionContext) TypeFunctionParameterClause(i int) ITypeFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeFunctionParameterClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeFunctionParameterClauseContext)
}

func (s *TypeFunctionContext) Right_Arrow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Arrow, 0)
}

func (s *TypeFunctionContext) Right_Flow() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Flow, 0)
}

func (s *TypeFunctionContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *TypeFunctionContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *TypeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeFunction() (localctx ITypeFunctionContext) {
	localctx = NewTypeFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, XsParserRULE_typeFunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1680)
		p.TypeFunctionParameterClause()
	}
	{
		p.SetState(1681)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*TypeFunctionContext).t = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserRight_Arrow || _la == XsParserRight_Flow) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*TypeFunctionContext).t = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(1682)
			p.Match(XsParserNew_Line)
		}

		p.SetState(1687)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1688)
		p.TypeFunctionParameterClause()
	}

	return localctx
}

// ITypeAnyContext is an interface to support dynamic dispatch.
type ITypeAnyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnyContext differentiates from other interfaces.
	IsTypeAnyContext()
}

type TypeAnyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnyContext() *TypeAnyContext {
	var p = new(TypeAnyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeAny
	return p
}

func (*TypeAnyContext) IsTypeAnyContext() {}

func NewTypeAnyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnyContext {
	var p = new(TypeAnyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeAny

	return p
}

func (s *TypeAnyContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnyContext) Left_brace() ILeft_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_braceContext)
}

func (s *TypeAnyContext) Right_brace() IRight_braceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_braceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_braceContext)
}

func (s *TypeAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeAny(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeAny() (localctx ITypeAnyContext) {
	localctx = NewTypeAnyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, XsParserRULE_typeAny)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1690)
		p.Left_brace()
	}
	{
		p.SetState(1691)
		p.Right_brace()
	}

	return localctx
}

// ITypeFunctionParameterClauseContext is an interface to support dynamic dispatch.
type ITypeFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeFunctionParameterClauseContext differentiates from other interfaces.
	IsTypeFunctionParameterClauseContext()
}

type TypeFunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeFunctionParameterClauseContext() *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeFunctionParameterClause
	return p
}

func (*TypeFunctionParameterClauseContext) IsTypeFunctionParameterClauseContext() {}

func NewTypeFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeFunctionParameterClauseContext {
	var p = new(TypeFunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeFunctionParameterClause

	return p
}

func (s *TypeFunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeFunctionParameterClauseContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *TypeFunctionParameterClauseContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *TypeFunctionParameterClauseContext) AllTypeType() []ITypeTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem())
	var tst = make([]ITypeTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeTypeContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) TypeType(i int) ITypeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeTypeContext)
}

func (s *TypeFunctionParameterClauseContext) AllMore() []IMoreContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMoreContext)(nil)).Elem())
	var tst = make([]IMoreContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMoreContext)
		}
	}

	return tst
}

func (s *TypeFunctionParameterClauseContext) More(i int) IMoreContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMoreContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMoreContext)
}

func (s *TypeFunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeFunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeFunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeFunctionParameterClause() (localctx ITypeFunctionParameterClauseContext) {
	localctx = NewTypeFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, XsParserRULE_typeFunctionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1693)
		p.Left_paren()
	}
	p.SetState(1695)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserLinqFrom)|(1<<XsParserLinqBy)|(1<<XsParserLinqSelect)|(1<<XsParserLinqWhere)|(1<<XsParserLinqGroup)|(1<<XsParserLinqInto)|(1<<XsParserLinqOrderby)|(1<<XsParserLinqJoin)|(1<<XsParserLinqLet)|(1<<XsParserLinqIn)|(1<<XsParserLinqOn)|(1<<XsParserLinqEquals)|(1<<XsParserLinqAscending)|(1<<XsParserLinqDescending)|(1<<XsParserEvent))) != 0) || (((_la-42)&-(0x1f+1)) == 0 && ((1<<uint((_la-42)))&((1<<(XsParserLeft_Paren-42))|(1<<(XsParserLeft_Brace-42))|(1<<(XsParserLeft_Brack-42))|(1<<(XsParserQuestion-42))|(1<<(XsParserBang-42))|(1<<(XsParserTypeI8-42))|(1<<(XsParserTypeU8-42))|(1<<(XsParserTypeI16-42))|(1<<(XsParserTypeU16-42))|(1<<(XsParserTypeI32-42))|(1<<(XsParserTypeU32-42))|(1<<(XsParserTypeI64-42))|(1<<(XsParserTypeU64-42))|(1<<(XsParserTypeF32-42))|(1<<(XsParserTypeF64-42))|(1<<(XsParserTypeChr-42))|(1<<(XsParserTypeStr-42)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(XsParserTypeBool-74))|(1<<(XsParserTypeInt-74))|(1<<(XsParserTypeNum-74))|(1<<(XsParserIDPrivate-74))|(1<<(XsParserIDPublic-74)))) != 0) {
		{
			p.SetState(1694)
			p.TypeType()
		}

	}
	p.SetState(1702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserComma {
		{
			p.SetState(1697)
			p.More()
		}
		{
			p.SetState(1698)
			p.TypeType()
		}

		p.SetState(1704)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1705)
		p.Right_paren()
	}

	return localctx
}

// ITypeBasicContext is an interface to support dynamic dispatch.
type ITypeBasicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsTypeBasicContext differentiates from other interfaces.
	IsTypeBasicContext()
}

type TypeBasicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyTypeBasicContext() *TypeBasicContext {
	var p = new(TypeBasicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_typeBasic
	return p
}

func (*TypeBasicContext) IsTypeBasicContext() {}

func NewTypeBasicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeBasicContext {
	var p = new(TypeBasicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_typeBasic

	return p
}

func (s *TypeBasicContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeBasicContext) GetT() antlr.Token { return s.t }

func (s *TypeBasicContext) SetT(v antlr.Token) { s.t = v }

func (s *TypeBasicContext) TypeI8() antlr.TerminalNode {
	return s.GetToken(XsParserTypeI8, 0)
}

func (s *TypeBasicContext) TypeU8() antlr.TerminalNode {
	return s.GetToken(XsParserTypeU8, 0)
}

func (s *TypeBasicContext) TypeI16() antlr.TerminalNode {
	return s.GetToken(XsParserTypeI16, 0)
}

func (s *TypeBasicContext) TypeU16() antlr.TerminalNode {
	return s.GetToken(XsParserTypeU16, 0)
}

func (s *TypeBasicContext) TypeI32() antlr.TerminalNode {
	return s.GetToken(XsParserTypeI32, 0)
}

func (s *TypeBasicContext) TypeU32() antlr.TerminalNode {
	return s.GetToken(XsParserTypeU32, 0)
}

func (s *TypeBasicContext) TypeI64() antlr.TerminalNode {
	return s.GetToken(XsParserTypeI64, 0)
}

func (s *TypeBasicContext) TypeU64() antlr.TerminalNode {
	return s.GetToken(XsParserTypeU64, 0)
}

func (s *TypeBasicContext) TypeF32() antlr.TerminalNode {
	return s.GetToken(XsParserTypeF32, 0)
}

func (s *TypeBasicContext) TypeF64() antlr.TerminalNode {
	return s.GetToken(XsParserTypeF64, 0)
}

func (s *TypeBasicContext) TypeChr() antlr.TerminalNode {
	return s.GetToken(XsParserTypeChr, 0)
}

func (s *TypeBasicContext) TypeStr() antlr.TerminalNode {
	return s.GetToken(XsParserTypeStr, 0)
}

func (s *TypeBasicContext) TypeBool() antlr.TerminalNode {
	return s.GetToken(XsParserTypeBool, 0)
}

func (s *TypeBasicContext) TypeInt() antlr.TerminalNode {
	return s.GetToken(XsParserTypeInt, 0)
}

func (s *TypeBasicContext) TypeNum() antlr.TerminalNode {
	return s.GetToken(XsParserTypeNum, 0)
}

func (s *TypeBasicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeBasicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeBasicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitTypeBasic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) TypeBasic() (localctx ITypeBasicContext) {
	localctx = NewTypeBasicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, XsParserRULE_typeBasic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1722)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserTypeI8:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1707)

			var _m = p.Match(XsParserTypeI8)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeU8:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1708)

			var _m = p.Match(XsParserTypeU8)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeI16:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1709)

			var _m = p.Match(XsParserTypeI16)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeU16:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1710)

			var _m = p.Match(XsParserTypeU16)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeI32:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1711)

			var _m = p.Match(XsParserTypeI32)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeU32:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1712)

			var _m = p.Match(XsParserTypeU32)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeI64:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1713)

			var _m = p.Match(XsParserTypeI64)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeU64:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1714)

			var _m = p.Match(XsParserTypeU64)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeF32:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1715)

			var _m = p.Match(XsParserTypeF32)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeF64:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1716)

			var _m = p.Match(XsParserTypeF64)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeChr:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1717)

			var _m = p.Match(XsParserTypeChr)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeStr:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1718)

			var _m = p.Match(XsParserTypeStr)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeBool:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1719)

			var _m = p.Match(XsParserTypeBool)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeInt:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1720)

			var _m = p.Match(XsParserTypeInt)

			localctx.(*TypeBasicContext).t = _m
		}

	case XsParserTypeNum:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1721)

			var _m = p.Match(XsParserTypeNum)

			localctx.(*TypeBasicContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INilExprContext is an interface to support dynamic dispatch.
type INilExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNilExprContext differentiates from other interfaces.
	IsNilExprContext()
}

type NilExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNilExprContext() *NilExprContext {
	var p = new(NilExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_nilExpr
	return p
}

func (*NilExprContext) IsNilExprContext() {}

func NewNilExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NilExprContext {
	var p = new(NilExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_nilExpr

	return p
}

func (s *NilExprContext) GetParser() antlr.Parser { return s.parser }

func (s *NilExprContext) Left_paren() ILeft_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeft_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeft_parenContext)
}

func (s *NilExprContext) Right_paren() IRight_parenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRight_parenContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRight_parenContext)
}

func (s *NilExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NilExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NilExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitNilExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) NilExpr() (localctx INilExprContext) {
	localctx = NewNilExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, XsParserRULE_nilExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1724)
		p.Left_paren()
	}
	{
		p.SetState(1725)
		p.Right_paren()
	}

	return localctx
}

// IBoolExprContext is an interface to support dynamic dispatch.
type IBoolExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetT returns the t token.
	GetT() antlr.Token

	// SetT sets the t token.
	SetT(antlr.Token)

	// IsBoolExprContext differentiates from other interfaces.
	IsBoolExprContext()
}

type BoolExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	t      antlr.Token
}

func NewEmptyBoolExprContext() *BoolExprContext {
	var p = new(BoolExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_boolExpr
	return p
}

func (*BoolExprContext) IsBoolExprContext() {}

func NewBoolExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolExprContext {
	var p = new(BoolExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_boolExpr

	return p
}

func (s *BoolExprContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolExprContext) GetT() antlr.Token { return s.t }

func (s *BoolExprContext) SetT(v antlr.Token) { s.t = v }

func (s *BoolExprContext) TrueLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserTrueLiteral, 0)
}

func (s *BoolExprContext) FalseLiteral() antlr.TerminalNode {
	return s.GetToken(XsParserFalseLiteral, 0)
}

func (s *BoolExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitBoolExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) BoolExpr() (localctx IBoolExprContext) {
	localctx = NewBoolExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, XsParserRULE_boolExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1729)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserTrueLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1727)

			var _m = p.Match(XsParserTrueLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	case XsParserFalseLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1728)

			var _m = p.Match(XsParserFalseLiteral)

			localctx.(*BoolExprContext).t = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IJudgeTypeContext is an interface to support dynamic dispatch.
type IJudgeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsJudgeTypeContext differentiates from other interfaces.
	IsJudgeTypeContext()
}

type JudgeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyJudgeTypeContext() *JudgeTypeContext {
	var p = new(JudgeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judgeType
	return p
}

func (*JudgeTypeContext) IsJudgeTypeContext() {}

func NewJudgeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeTypeContext {
	var p = new(JudgeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judgeType

	return p
}

func (s *JudgeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeTypeContext) GetOp() antlr.Token { return s.op }

func (s *JudgeTypeContext) SetOp(v antlr.Token) { s.op = v }

func (s *JudgeTypeContext) Colon() antlr.TerminalNode {
	return s.GetToken(XsParserColon, 0)
}

func (s *JudgeTypeContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual_Equal, 0)
}

func (s *JudgeTypeContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserNot_Equal, 0)
}

func (s *JudgeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudgeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) JudgeType() (localctx IJudgeTypeContext) {
	localctx = NewJudgeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, XsParserRULE_judgeType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1731)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JudgeTypeContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserEqual_Equal || _la == XsParserNot_Equal) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JudgeTypeContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1732)
		p.Match(XsParserColon)
	}

	return localctx
}

// IJudgeContext is an interface to support dynamic dispatch.
type IJudgeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsJudgeContext differentiates from other interfaces.
	IsJudgeContext()
}

type JudgeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyJudgeContext() *JudgeContext {
	var p = new(JudgeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_judge
	return p
}

func (*JudgeContext) IsJudgeContext() {}

func NewJudgeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JudgeContext {
	var p = new(JudgeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_judge

	return p
}

func (s *JudgeContext) GetParser() antlr.Parser { return s.parser }

func (s *JudgeContext) GetOp() antlr.Token { return s.op }

func (s *JudgeContext) SetOp(v antlr.Token) { s.op = v }

func (s *JudgeContext) Or() antlr.TerminalNode {
	return s.GetToken(XsParserOr, 0)
}

func (s *JudgeContext) And() antlr.TerminalNode {
	return s.GetToken(XsParserAnd, 0)
}

func (s *JudgeContext) Equal_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual_Equal, 0)
}

func (s *JudgeContext) Not_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserNot_Equal, 0)
}

func (s *JudgeContext) Less_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserLess_Equal, 0)
}

func (s *JudgeContext) Greater_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserGreater_Equal, 0)
}

func (s *JudgeContext) Less() antlr.TerminalNode {
	return s.GetToken(XsParserLess, 0)
}

func (s *JudgeContext) Greater() antlr.TerminalNode {
	return s.GetToken(XsParserGreater, 0)
}

func (s *JudgeContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *JudgeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JudgeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JudgeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitJudge(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Judge() (localctx IJudgeContext) {
	localctx = NewJudgeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, XsParserRULE_judge)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1734)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*JudgeContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserEqual_Equal)|(1<<XsParserLess_Equal)|(1<<XsParserGreater_Equal)|(1<<XsParserNot_Equal))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(XsParserLess-39))|(1<<(XsParserGreater-39))|(1<<(XsParserAnd-39))|(1<<(XsParserOr-39)))) != 0)) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*JudgeContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1736)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1735)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IAssignContext is an interface to support dynamic dispatch.
type IAssignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAssignContext differentiates from other interfaces.
	IsAssignContext()
}

type AssignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAssignContext() *AssignContext {
	var p = new(AssignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_assign
	return p
}

func (*AssignContext) IsAssignContext() {}

func NewAssignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignContext {
	var p = new(AssignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_assign

	return p
}

func (s *AssignContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignContext) GetOp() antlr.Token { return s.op }

func (s *AssignContext) SetOp(v antlr.Token) { s.op = v }

func (s *AssignContext) Equal() antlr.TerminalNode {
	return s.GetToken(XsParserEqual, 0)
}

func (s *AssignContext) Add_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserAdd_Equal, 0)
}

func (s *AssignContext) Sub_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserSub_Equal, 0)
}

func (s *AssignContext) Mul_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserMul_Equal, 0)
}

func (s *AssignContext) Div_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserDiv_Equal, 0)
}

func (s *AssignContext) Mod_Equal() antlr.TerminalNode {
	return s.GetToken(XsParserMod_Equal, 0)
}

func (s *AssignContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *AssignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAssign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Assign() (localctx IAssignContext) {
	localctx = NewAssignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, XsParserRULE_assign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1738)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AssignContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-19)&-(0x1f+1)) == 0 && ((1<<uint((_la-19)))&((1<<(XsParserAdd_Equal-19))|(1<<(XsParserSub_Equal-19))|(1<<(XsParserMul_Equal-19))|(1<<(XsParserDiv_Equal-19))|(1<<(XsParserMod_Equal-19))|(1<<(XsParserEqual-19)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AssignContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1740)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1739)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IAddContext is an interface to support dynamic dispatch.
type IAddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsAddContext differentiates from other interfaces.
	IsAddContext()
}

type AddContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyAddContext() *AddContext {
	var p = new(AddContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_add
	return p
}

func (*AddContext) IsAddContext() {}

func NewAddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AddContext {
	var p = new(AddContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_add

	return p
}

func (s *AddContext) GetParser() antlr.Parser { return s.parser }

func (s *AddContext) GetOp() antlr.Token { return s.op }

func (s *AddContext) SetOp(v antlr.Token) { s.op = v }

func (s *AddContext) Add() antlr.TerminalNode {
	return s.GetToken(XsParserAdd, 0)
}

func (s *AddContext) Sub() antlr.TerminalNode {
	return s.GetToken(XsParserSub, 0)
}

func (s *AddContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AddContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitAdd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Add() (localctx IAddContext) {
	localctx = NewAddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, XsParserRULE_add)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1742)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*AddContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserAdd || _la == XsParserSub) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*AddContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1744)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1743)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IMulContext is an interface to support dynamic dispatch.
type IMulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsMulContext differentiates from other interfaces.
	IsMulContext()
}

type MulContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyMulContext() *MulContext {
	var p = new(MulContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_mul
	return p
}

func (*MulContext) IsMulContext() {}

func NewMulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MulContext {
	var p = new(MulContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_mul

	return p
}

func (s *MulContext) GetParser() antlr.Parser { return s.parser }

func (s *MulContext) GetOp() antlr.Token { return s.op }

func (s *MulContext) SetOp(v antlr.Token) { s.op = v }

func (s *MulContext) Mul() antlr.TerminalNode {
	return s.GetToken(XsParserMul, 0)
}

func (s *MulContext) Div() antlr.TerminalNode {
	return s.GetToken(XsParserDiv, 0)
}

func (s *MulContext) Mod() antlr.TerminalNode {
	return s.GetToken(XsParserMod, 0)
}

func (s *MulContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MulContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitMul(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Mul() (localctx IMulContext) {
	localctx = NewMulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, XsParserRULE_mul)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1746)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*MulContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(XsParserMul-56))|(1<<(XsParserDiv-56))|(1<<(XsParserMod-56)))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*MulContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1747)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IPowContext is an interface to support dynamic dispatch.
type IPowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsPowContext differentiates from other interfaces.
	IsPowContext()
}

type PowContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyPowContext() *PowContext {
	var p = new(PowContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_pow
	return p
}

func (*PowContext) IsPowContext() {}

func NewPowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PowContext {
	var p = new(PowContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_pow

	return p
}

func (s *PowContext) GetParser() antlr.Parser { return s.parser }

func (s *PowContext) GetOp() antlr.Token { return s.op }

func (s *PowContext) SetOp(v antlr.Token) { s.op = v }

func (s *PowContext) Pow() antlr.TerminalNode {
	return s.GetToken(XsParserPow, 0)
}

func (s *PowContext) Root() antlr.TerminalNode {
	return s.GetToken(XsParserRoot, 0)
}

func (s *PowContext) Log() antlr.TerminalNode {
	return s.GetToken(XsParserLog, 0)
}

func (s *PowContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *PowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitPow(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Pow() (localctx IPowContext) {
	localctx = NewPowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, XsParserRULE_pow)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1750)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*PowContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<XsParserPow)|(1<<XsParserRoot)|(1<<XsParserLog))) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*PowContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == XsParserNew_Line {
		{
			p.SetState(1751)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// ICallContext is an interface to support dynamic dispatch.
type ICallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsCallContext differentiates from other interfaces.
	IsCallContext()
}

type CallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyCallContext() *CallContext {
	var p = new(CallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_call
	return p
}

func (*CallContext) IsCallContext() {}

func NewCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallContext {
	var p = new(CallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_call

	return p
}

func (s *CallContext) GetParser() antlr.Parser { return s.parser }

func (s *CallContext) GetOp() antlr.Token { return s.op }

func (s *CallContext) SetOp(v antlr.Token) { s.op = v }

func (s *CallContext) Dot() antlr.TerminalNode {
	return s.GetToken(XsParserDot, 0)
}

func (s *CallContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *CallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Call() (localctx ICallContext) {
	localctx = NewCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, XsParserRULE_call)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1754)

		var _m = p.Match(XsParserDot)

		localctx.(*CallContext).op = _m
	}
	p.SetState(1756)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1755)
			p.Match(XsParserNew_Line)
		}

	}

	return localctx
}

// IWaveContext is an interface to support dynamic dispatch.
type IWaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsWaveContext differentiates from other interfaces.
	IsWaveContext()
}

type WaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyWaveContext() *WaveContext {
	var p = new(WaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_wave
	return p
}

func (*WaveContext) IsWaveContext() {}

func NewWaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WaveContext {
	var p = new(WaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_wave

	return p
}

func (s *WaveContext) GetParser() antlr.Parser { return s.parser }

func (s *WaveContext) GetOp() antlr.Token { return s.op }

func (s *WaveContext) SetOp(v antlr.Token) { s.op = v }

func (s *WaveContext) Wave() antlr.TerminalNode {
	return s.GetToken(XsParserWave, 0)
}

func (s *WaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitWave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Wave() (localctx IWaveContext) {
	localctx = NewWaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, XsParserRULE_wave)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1758)

		var _m = p.Match(XsParserWave)

		localctx.(*WaveContext).op = _m
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) AllIdItem() []IIdItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdItemContext)(nil)).Elem())
	var tst = make([]IIdItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdItemContext)
		}
	}

	return tst
}

func (s *IdContext) IdItem(i int) IIdItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdItemContext)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, XsParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1761)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1760)
				p.IdItem()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1763)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext())
	}

	return localctx
}

// IIdItemContext is an interface to support dynamic dispatch.
type IIdItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsIdItemContext differentiates from other interfaces.
	IsIdItemContext()
}

type IdItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyIdItemContext() *IdItemContext {
	var p = new(IdItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_idItem
	return p
}

func (*IdItemContext) IsIdItemContext() {}

func NewIdItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdItemContext {
	var p = new(IdItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_idItem

	return p
}

func (s *IdItemContext) GetParser() antlr.Parser { return s.parser }

func (s *IdItemContext) GetOp() antlr.Token { return s.op }

func (s *IdItemContext) SetOp(v antlr.Token) { s.op = v }

func (s *IdItemContext) IDPublic() antlr.TerminalNode {
	return s.GetToken(XsParserIDPublic, 0)
}

func (s *IdItemContext) IDPrivate() antlr.TerminalNode {
	return s.GetToken(XsParserIDPrivate, 0)
}

func (s *IdItemContext) TypeBasic() ITypeBasicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeBasicContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeBasicContext)
}

func (s *IdItemContext) LinqKeyword() ILinqKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinqKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinqKeywordContext)
}

func (s *IdItemContext) Event() antlr.TerminalNode {
	return s.GetToken(XsParserEvent, 0)
}

func (s *IdItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitIdItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) IdItem() (localctx IIdItemContext) {
	localctx = NewIdItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, XsParserRULE_idItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1769)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case XsParserIDPrivate, XsParserIDPublic:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1765)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IdItemContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == XsParserIDPrivate || _la == XsParserIDPublic) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IdItemContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case XsParserTypeI8, XsParserTypeU8, XsParserTypeI16, XsParserTypeU16, XsParserTypeI32, XsParserTypeU32, XsParserTypeI64, XsParserTypeU64, XsParserTypeF32, XsParserTypeF64, XsParserTypeChr, XsParserTypeStr, XsParserTypeBool, XsParserTypeInt, XsParserTypeNum:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1766)
			p.TypeBasic()
		}

	case XsParserLinqFrom, XsParserLinqBy, XsParserLinqSelect, XsParserLinqWhere, XsParserLinqGroup, XsParserLinqInto, XsParserLinqOrderby, XsParserLinqJoin, XsParserLinqLet, XsParserLinqIn, XsParserLinqOn, XsParserLinqEquals, XsParserLinqAscending, XsParserLinqDescending:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1767)
			p.LinqKeyword()
		}

	case XsParserEvent:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1768)
			p.Match(XsParserEvent)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEndContext is an interface to support dynamic dispatch.
type IEndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEndContext differentiates from other interfaces.
	IsEndContext()
}

type EndContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEndContext() *EndContext {
	var p = new(EndContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_end
	return p
}

func (*EndContext) IsEndContext() {}

func NewEndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EndContext {
	var p = new(EndContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_end

	return p
}

func (s *EndContext) GetParser() antlr.Parser { return s.parser }

func (s *EndContext) Semi() antlr.TerminalNode {
	return s.GetToken(XsParserSemi, 0)
}

func (s *EndContext) New_Line() antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, 0)
}

func (s *EndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EndContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitEnd(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) End() (localctx IEndContext) {
	localctx = NewEndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, XsParserRULE_end)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1771)
		_la = p.GetTokenStream().LA(1)

		if !(_la == XsParserSemi || _la == XsParserNew_Line) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IMoreContext is an interface to support dynamic dispatch.
type IMoreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMoreContext differentiates from other interfaces.
	IsMoreContext()
}

type MoreContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMoreContext() *MoreContext {
	var p = new(MoreContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_more
	return p
}

func (*MoreContext) IsMoreContext() {}

func NewMoreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MoreContext {
	var p = new(MoreContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_more

	return p
}

func (s *MoreContext) GetParser() antlr.Parser { return s.parser }

func (s *MoreContext) Comma() antlr.TerminalNode {
	return s.GetToken(XsParserComma, 0)
}

func (s *MoreContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *MoreContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *MoreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MoreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MoreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitMore(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) More() (localctx IMoreContext) {
	localctx = NewMoreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, XsParserRULE_more)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1773)
		p.Match(XsParserComma)
	}
	p.SetState(1777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(1774)
			p.Match(XsParserNew_Line)
		}

		p.SetState(1779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILeft_braceContext is an interface to support dynamic dispatch.
type ILeft_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_braceContext differentiates from other interfaces.
	IsLeft_braceContext()
}

type Left_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_braceContext() *Left_braceContext {
	var p = new(Left_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_left_brace
	return p
}

func (*Left_braceContext) IsLeft_braceContext() {}

func NewLeft_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_braceContext {
	var p = new(Left_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_left_brace

	return p
}

func (s *Left_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_braceContext) Left_Brace() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brace, 0)
}

func (s *Left_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *Left_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *Left_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLeft_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Left_brace() (localctx ILeft_braceContext) {
	localctx = NewLeft_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, XsParserRULE_left_brace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1780)
		p.Match(XsParserLeft_Brace)
	}
	p.SetState(1784)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1781)
				p.Match(XsParserNew_Line)
			}

		}
		p.SetState(1786)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_braceContext is an interface to support dynamic dispatch.
type IRight_braceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_braceContext differentiates from other interfaces.
	IsRight_braceContext()
}

type Right_braceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_braceContext() *Right_braceContext {
	var p = new(Right_braceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_right_brace
	return p
}

func (*Right_braceContext) IsRight_braceContext() {}

func NewRight_braceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_braceContext {
	var p = new(Right_braceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_right_brace

	return p
}

func (s *Right_braceContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_braceContext) Right_Brace() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brace, 0)
}

func (s *Right_braceContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *Right_braceContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *Right_braceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_braceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_braceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitRight_brace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Right_brace() (localctx IRight_braceContext) {
	localctx = NewRight_braceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, XsParserRULE_right_brace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(1787)
			p.Match(XsParserNew_Line)
		}

		p.SetState(1792)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1793)
		p.Match(XsParserRight_Brace)
	}

	return localctx
}

// ILeft_parenContext is an interface to support dynamic dispatch.
type ILeft_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_parenContext differentiates from other interfaces.
	IsLeft_parenContext()
}

type Left_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_parenContext() *Left_parenContext {
	var p = new(Left_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_left_paren
	return p
}

func (*Left_parenContext) IsLeft_parenContext() {}

func NewLeft_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_parenContext {
	var p = new(Left_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_left_paren

	return p
}

func (s *Left_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_parenContext) Left_Paren() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Paren, 0)
}

func (s *Left_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLeft_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Left_paren() (localctx ILeft_parenContext) {
	localctx = NewLeft_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, XsParserRULE_left_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1795)
		p.Match(XsParserLeft_Paren)
	}

	return localctx
}

// IRight_parenContext is an interface to support dynamic dispatch.
type IRight_parenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_parenContext differentiates from other interfaces.
	IsRight_parenContext()
}

type Right_parenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_parenContext() *Right_parenContext {
	var p = new(Right_parenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_right_paren
	return p
}

func (*Right_parenContext) IsRight_parenContext() {}

func NewRight_parenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_parenContext {
	var p = new(Right_parenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_right_paren

	return p
}

func (s *Right_parenContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_parenContext) Right_Paren() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Paren, 0)
}

func (s *Right_parenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_parenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_parenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitRight_paren(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Right_paren() (localctx IRight_parenContext) {
	localctx = NewRight_parenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, XsParserRULE_right_paren)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1797)
		p.Match(XsParserRight_Paren)
	}

	return localctx
}

// ILeft_brackContext is an interface to support dynamic dispatch.
type ILeft_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeft_brackContext differentiates from other interfaces.
	IsLeft_brackContext()
}

type Left_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeft_brackContext() *Left_brackContext {
	var p = new(Left_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_left_brack
	return p
}

func (*Left_brackContext) IsLeft_brackContext() {}

func NewLeft_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Left_brackContext {
	var p = new(Left_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_left_brack

	return p
}

func (s *Left_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Left_brackContext) Left_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserLeft_Brack, 0)
}

func (s *Left_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *Left_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *Left_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Left_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Left_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitLeft_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Left_brack() (localctx ILeft_brackContext) {
	localctx = NewLeft_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, XsParserRULE_left_brack)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1799)
		p.Match(XsParserLeft_Brack)
	}
	p.SetState(1803)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1800)
				p.Match(XsParserNew_Line)
			}

		}
		p.SetState(1805)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext())
	}

	return localctx
}

// IRight_brackContext is an interface to support dynamic dispatch.
type IRight_brackContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRight_brackContext differentiates from other interfaces.
	IsRight_brackContext()
}

type Right_brackContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRight_brackContext() *Right_brackContext {
	var p = new(Right_brackContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = XsParserRULE_right_brack
	return p
}

func (*Right_brackContext) IsRight_brackContext() {}

func NewRight_brackContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Right_brackContext {
	var p = new(Right_brackContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = XsParserRULE_right_brack

	return p
}

func (s *Right_brackContext) GetParser() antlr.Parser { return s.parser }

func (s *Right_brackContext) Right_Brack() antlr.TerminalNode {
	return s.GetToken(XsParserRight_Brack, 0)
}

func (s *Right_brackContext) AllNew_Line() []antlr.TerminalNode {
	return s.GetTokens(XsParserNew_Line)
}

func (s *Right_brackContext) New_Line(i int) antlr.TerminalNode {
	return s.GetToken(XsParserNew_Line, i)
}

func (s *Right_brackContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Right_brackContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Right_brackContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case XsParserVisitor:
		return t.VisitRight_brack(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *XsParser) Right_brack() (localctx IRight_brackContext) {
	localctx = NewRight_brackContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, XsParserRULE_right_brack)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == XsParserNew_Line {
		{
			p.SetState(1806)
			p.Match(XsParserNew_Line)
		}

		p.SetState(1811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1812)
		p.Match(XsParserRight_Brack)
	}

	return localctx
}

func (p *XsParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 60:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 61:
		var t *CallExpressionContext = nil
		if localctx != nil {
			t = localctx.(*CallExpressionContext)
		}
		return p.CallExpression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *XsParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *XsParser) CallExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
