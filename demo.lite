"lite" {
    "System"
}

Main(->) {
    n0 _ = <node>(0)
    n1 _ = <node>(1)
    n2 _ = <node>(2)
    n3 _ = <node>(3)
    n4 _ = <node>(4)
    n5 _ = <node>(5)
    n6 _ = <node>(6)

    n0.left = n1
    n0.right = n2

    n1.left = n3
    n1.right = n4

    n2.left = n5
    n2.right = n6

    print("Pre Order Traverse")
    pre_order_traverse(n0)
    print("Middle Order Traverse")
    middle_order_traverse(n0)
    print("Post Order Traverse")
    post_order_traverse(n0)

    n7 _ = inverse_node(n0)
    print("Inverse node")
    pre_order_traverse(n7)

    arr _ = {9,1,5,8,3,7,4,6,2}
    simple_sort(arr)
    arr = {9,1,5,8,3,7,4,6,2}
    bubble_sort(arr)
    arr = {9,1,5,8,3,7,4,6,2}
    quick_sort(arr)

    print("Filter Array")
    arr = filter_list(arr, {it->it > 4})
    arr @ ea {
        print(ea) 
    }

    print("oop")
    app _ = <app>("test", "Windows")
    app.start()
    app.stop()
    shutdown(app)
    read()
}

pre_order_traverse(node ?node->) {
    node ? nil { 
        <- 
    }
    print(node.value)
    pre_order_traverse(node.left)
    pre_order_traverse(node.right)
}

post_order_traverse(node ?node->) {
    node ? nil { 
        <-
    }
    post_order_traverse(node.left)
    post_order_traverse(node.right)
    print(node.value)
}

middle_order_traverse(node ?node->) {
    node ? nil { 
        <-
    }
    middle_order_traverse(node.left)
    print(node.value)
    middle_order_traverse(node.right)
}

inverse_node(node ?node -> node ?node) {
    node ? nil { 
        <- nil
    }
    node.left = inverse_node(node.left)
    node.right = inverse_node(node.right)

    temp _ = <node>(node.value)
    temp.left = node.right
    temp.right = node.left
    <- temp
}

swap(list []int, i int, j int->) {
    (list[i], list[j]) = (list[j], list[i])
}

simple_sort(list []int->) {
    print("Simple Sort")
    [0 < list.len] @ i {
        [i+1 < list.len] @ j {
            ? list[i] > list[j] {
                swap(list, i , j)
            }
        }
    }
    list @ ea { 
        print(ea) 
    }
}

bubble_sort(list []int->) {
    print("Bubble Sort")
    [0 < list.len] @ i {
        [list.len-2 >= i] @ j {
            ? list[j] > list[j+1] {
                swap(list, j , j+1)
            }
        }
    }
    list @ ea { 
        print(ea) 
    }
}

quick_sort(list []int->) {
    print("Quick Sort")
    quick_sort_implement(list, 0, list.len-1)
    list @ ea { 
        print(ea) 
    }
}

quick_sort_implement(list []int, low int, high int->) {
    pivot _ = 0
    ? low < high {
        pivot = partition(list, low, high)

        quick_sort_implement(list, low, pivot-1)
        quick_sort_implement(list, pivot+1, high)
    }
}

partition(list []int, low int, high int -> position int) {
    pivot_key _ = list[low]
    
    @ low < high {
        @ low < high & list[high] >= pivot_key {
            high -= 1
        }
        swap(list, low, high)
        @ low < high & list[low] <= pivot_key {
            low += 1
        }
        swap(list, low, high)
    }

    <- low
}

filter_list(list []int, fn (int -> bool) -> l []int) {
    filter _ = []int{}

    list @ ea {
        ? fn(ea) {
            filter += ea
        }
    }
    <- filter
}

shutdown(ctrl control->) {
    ctrl.shutdown()
}

node -> {
    value int
    left ?node
    right ?node
}
me node <>(value int) {
    me.value = value
}

control <- {
    shutdown(->)
}

program -> {
    _ control
    name str
    _running _ = false
} 
me program <>(name str) {
    me.name = name
}

me program -> {
    start(->) {
        print("Start")
        me._running = true
    }
    stop(->) {
        print("Stop")
        me._running = false
    }
    shutdown(->) {
        print("shutdown")
        me._running = false
    }
}

app -> {
    _ program
    platform str
}
me app <> (name str, platform str)(name) {
    me.platform = platform
}
