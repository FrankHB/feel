"Lite" {
    "System"
}

Main() -> () {
    N0 := <Node>(0)
    N1 := <Node>(1)
    N2 := <Node>(2)
    N3 := <Node>(3)
    N4 := <Node>(4)
    N5 := <Node>(5)
    N6 := <Node>(6)

    N0.left = N1
    N0.right = N2

    N1.left = N3
    N1.right = N4

    N2.left = N5
    N2.right = N6

    Print("Pre Order Traverse")
    PreOrderTraverse(N0)
    Print("Middle Order Traverse")
    MiddleOrderTraverse(N0)
    Print("Post Order Traverse")
    PostOrderTraverse(N0)

    N7 := InverseNode(N0)
    Print("Inverse Node")
    PreOrderTraverse(N7)

    Arr := {9,1,5,8,3,7,4,6,2}
    SimpleSort(Arr)
    Arr = {9,1,5,8,3,7,4,6,2}
    BubbleSort(Arr)
    Arr = {9,1,5,8,3,7,4,6,2}
    QuickSort(Arr)

    Print("Filter Array")
    Arr = FilterList(Arr, {it->it > 4})
    Arr @ ea {
        Print(ea) 
    }

    Print("oop")
    App := <App>("test", "Windows")
    App.start()
    App.stop()
    Shutdown(App)
    Read()
}

PreOrderTraverse(node: ?Node) -> () {
    node ? Nil { 
        <- () 
    }
    Print(node.value)
    PreOrderTraverse(node.left)
    PreOrderTraverse(node.right)
}

PostOrderTraverse(node: ?Node) -> () {
    node ? Nil { 
        <- () 
    }
    PostOrderTraverse(node.left)
    PostOrderTraverse(node.right)
    Print(node.value)
}

MiddleOrderTraverse(node: ?Node) -> () {
    node ? Nil { 
        <- () 
    }
    MiddleOrderTraverse(node.left)
    Print(node.value)
    MiddleOrderTraverse(node.right)
}

InverseNode(node: ?Node) -> (node: ?Node) {
    node ? Nil { 
        <- (Nil) 
    }
    node.left = InverseNode(node.left)
    node.right = InverseNode(node.right)

    temp := <Node>(node.value)
    temp.left = node.right
    temp.right = node.left
    <- (temp)
}

Swap(list: []Int, i: Int, j: Int) -> () {
    (list[i], list[j]) = (list[j], list[i])
}

SimpleSort(list: []Int) -> () {
    Print("SimpleSort")
    [0 < list.len] @ i {
        [i+1 < list.len] @ j {
            ? list[i] > list[j] {
                Swap(list, i , j)
            }
        }
    }
    list @ ea { 
        Print(ea) 
    }
}

BubbleSort(list: []Int) -> () {
    Print("BubbleSort")
    [0 < list.len] @ i {
        [list.len-2 >= i] @ j {
            ? list[j] > list[j+1] {
                Swap(list, j , j+1)
            }
        }
    }
    list @ ea { 
        Print(ea) 
    }
}

QuickSort(list: []Int) -> () {
    Print("QuickSort")
    QuickSortImpl(list, 0, list.len-1)
    list @ ea { 
        Print(ea) 
    }
}

QuickSortImpl(list: []Int, low: Int, high: Int) -> () {
    Pivot := 0
    ? low < high {
        Pivot = Partition(list, low, high)

        QuickSortImpl(list, low, Pivot-1)
        QuickSortImpl(list, Pivot+1, high)
    }
}

Partition(list: []Int, low: Int, high: Int) -> (position: Int) {
    PivotKey := list[low]
    
    @ low < high {
        @ low < high & list[high] >= PivotKey {
            high -= 1
        }
        Swap(list, low , high)
        @ low < high & list[low] <= PivotKey {
            low += 1
        }
        Swap(list, low , high)
    }

    <- (low)
}

FilterList(list: []Int, fn: (Int) -> (Bool)) -> (l: []Int) {
    Filter := []Int{}

    list @ ea {
        ? fn(ea) {
            Filter += ea
        }
    }
    <- (Filter)
}

Shutdown(ctrl: Control) -> () {
    ctrl.shutdown()
}

Node -> {
    value: Int
    left: ?Node
    right: ?Node
}
(me:Node) <>(value: Int) {
    me.value = value
}

Control <- {
    shutdown() -> ()
}

Program -> {
    :Control
    name: Str
    _running := False
} 
(me:Program) <>(name: Str) {
    me.name = name
}

(me:Program) -> {
    start() -> () {
        Print("Start")
        me._running = True
    }
    stop() -> () {
        Print("Stop")
        me._running = False
    }
    shutdown() -> () {
        Print("shutdown")
        me._running = False
    }
}

App -> {
    :Program
    platform: Str
}
(me: App) <> (name: Str, platform: Str)(name) {
    me.platform = platform
}
