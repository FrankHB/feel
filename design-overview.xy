//包
pkg A
//导入
imp
{
    A,
    B
}

//变量、常量
//当存在初始化赋值时，:type 可以省略。例如 var a = "10" 
//变量
var a:str = "10"      
var c:flt = 1.2 is flt //强制识别
var d:bl = true    
//常量
cst b:int = 6         
//函数变量
var e:(int) -> (int)

//集合
//数组
var arr:[int] = [1,2,3,4,5] //空数组创建 [int]()
arr[0]
//字典
var map:[str:bl] = ["1":false, "2":true]   //空字典创建 [str:bl]()
map["1"]

//判断结构
if 1 + 1 != 2 
{
    A
    B
} 
else 
{
    A
    B
}

//选择结构，每个cs内代码自动break
swt num 
{
    cs 0..6:
        A
    cs 14:
        B
        continue //手动继续执行
    def:
        C //缺省执行
}

//遍历循环
for item in array 
{
    A
    B
}

//范围循环，stp可以指定间隔，不需要可以省略
for i in 0..num stp 2 
{
    A
    B
}

//条件循环
while a < b 
{
    A
    B
}

//函数，第二个参数为匿名参数；箭头后的为返回值，返回值如参数一样，会自动初始化
func a2b (x:int, _ y:string) -> (a:int, b:string) 
{
    a = x
    b = y
    return //如果不需要做指定的退出，return可以省略。
}
a2b(x:3, "test")

//strc，ext，prot中，变量和方法首字母大写表示public，小写表示private
//结构，变量集合
strc Animal //strc只支持变量
{     
    type:string //自动识别为变量
    age:int
    name:string
}
//扩展，结构支持的方法
ext Animal //扩展只支持方法,不允许同级重名
{  
    cry() //自动识别为func
    {  
        A
        B
    }
    sleep()
    {
        A
        B
    }
}
strc Pet 
{
    name:string 
}
ext Pet 
{  
    sleep()
    {
        A
        B
    }
}
//组合结构，通过引入功能来继承复数基结构的属性和方法
strc Dog 
{
    ~Animal //引入基结构
    type:string //重名自动覆盖，这会代替基结构原本的属性
    ~Pet    //当基结构的属性名称唯一时，编译器自动继承。否则不能通过同名直接使用，要么通过子属性访问，要么手动指定名称。
    name~Pet.name //手动重新指定继承
    ~Run //引入协议常量，如果不需要让结构的所有方法都能使用协议的常量，那么可以选择不引入。
}
ext Dog 
{ 
    cry()  //若基结构有重名，自动覆盖
    { 
        self.Animal.cry() //手动重载方法，self用来指定自身
    }
    sleep~Pet.sleep //手动重新指定继承
    //实现Run协议
    ~Run 
    { 
        move(s: (int) -> (string) )
        {
            var t = 5000/SPEED //协议方法可以直接使用协议常量
            var str = s.down(time: t)
            print(str)
        }

        breath() -> string
        {
            return "ha"
        }
    }
}
//协议，由拓展实现
prot Run 
{
    SPEED = 5   //自动编译为常量，且必须在接口中初始化
    breath() -> string  //在拓展中实现
    move(s: (int) -> (string))
}

var d1 = Dog()
d1.name = "Tiny"
d1.cry() 
//使用匿名变量舍弃返回值
_ = d1.breath() 
//使用匿名函数
d1.move(s: _ (time:int) -> (str:string) 
{ 
    var t = time
    str = String(t) + "ok"
})