demo
{
    .. System,
    XyLang\Library

    Main ()
    {
        n0 := Node.{0}
        n1 := Node.{1}
        n2 := Node.{2}
        n3 := Node.{3}
        n4 := Node.{4}
        n5 := Node.{5}
        n6 := Node.{6}

        n0.Left = n1
        n0.Right = n2

        n1.Left = n3
        n1.Right = n4

        n2.Left = n5
        n2.Right = n6

        Console.WriteLine.("Pre Order Traverse")
        PreorderTraverse.(n0)
        Console.WriteLine.("Middle Order Traverse")
        MiddleorderTraverse.(n0)
        Console.WriteLine.("Post Order Traverse")
        PostorderTraverse.(n0)

        n0 = InverseNode.(n0)
        Console.WriteLine.("Inverse Node")
        PreorderTraverse.(n0)

        arr := [9,1,5,8,3,7,4,6,2]
        SimpleSort.(arr)
        arr = [9,1,5,8,3,7,4,6,2]
        BubbleSort.(arr)
        arr = [9,1,5,8,3,7,4,6,2]
        QuickSort.(arr)

        Console.WriteLine.("Filter Array")
        arr = FilterList.(arr, it <- it > 4)
        arr.@ { Console.WriteLine.(it) }

        Console.WriteLine.("oop")
        app := App.{"test", "Windows"}
        app.Start.()
        app.Stop.()
        Shutdown.(app)
        Console.ReadKey.()
    }

    Node {..Value :I32}->
    {
        Left :Node?
        Right :Node?
    }

    PreorderTraverse (node:Node?)->()
    {
        node.? null { <- () }
        Console.WriteLine.(node.Value)
        PreorderTraverse.(node.Left)
        PreorderTraverse.(node.Right)
    }

    PostorderTraverse (node:Node?)->()
    {
        node.? null { <- () }
        PreorderTraverse.(node.Left)
        PreorderTraverse.(node.Right)
        Console.WriteLine.(node.Value)
    }

    MiddleorderTraverse (node:Node?)->()
    {
        node.? null { <- () }
        PreorderTraverse.(node.Left)
        Console.WriteLine.(node.Value)
        PreorderTraverse.(node.Right)
    }

    InverseNode (node:Node?)->(node:Node?)
    {
        node.? null { <- (null); }
        node.Left = InverseNode.(node.Left)
        node.Right = InverseNode.(node.Right)

        temp := Node.{
            node.Value
            ...
            Left = node.Right,
            Right = node.Left
        }
        <- (temp)
    }

    Swap (list:[]I32, i, j:I32)->()
    {
        (list.[i], list.[j]) = (list.[j], list.[i])
    }

    SimpleSort (list:[]I32)->()
    {
        Console.WriteLine.("Simple Sort")
        [0 << list.Count-1].@ i
        {
            [i+1 << list.Count-1].@ j
            {
                ? list.[i] > list.[j]
                {
                    Swap.(list, i , j)
                }
            }
        }
        list.@ { Console.WriteLine.(it) }
    }

    BubbleSort (list:[]I32)->()
    {
        Console.WriteLine.("Bubble Sort")
        [0 << list.Count-1].@ i
        {
            [list.Count-2 >> i].@ j
            {
                ? list.[j] > list.[j+1]
                {
                    Swap.(list, j , j+1)
                }
            }
        }
        list.@ { Console.WriteLine.(it) }
    }

    QuickSort (list:[]I32)->()
    {
        Console.WriteLine.("Quick Sort")
        QSort.(list,0,list.Count-1)
        list.@ { Console.WriteLine.(it) }
    }

    QSort (list:[]I32, low, high:I32)->()
    {
        pivot := 0
        ? low < high
        {
            pivot = Partition.(list,low,high)

            QSort.(list, low, pivot-1)
            QSort.(list, pivot+1, high)
        }
    }

    Partition (list:[]I32, low, high:I32)->(position:I32)
    {
        pivotkey := list.[low]
        
        @ low < high
        {
            @ low<high & list.[high] >= pivotkey
            {
                high -= 1
            }
            Swap.(list, low , high)
            @ low<high & list.[low] <= pivotkey
            {
                low += 1
            }
            Swap.(list, low , high)
        }

        <- (low)
    }

    FilterList (list:[]I32, fn:(take:I32)->(act:Bool))->(l:[]I32)
    {
        filter := [:I32]

        list.@ 
        {
            ? fn.(it)
            {
                filter += it
            }
        }
        <- (filter)
    }

    Shutdown (ctrl:Control)->()
    {
        ctrl.Shutdown.()
    }

    Program {..Name:Str}->
    {
        _running := false
    }

    Program +=
    {
        Start ()->()
        {
            Console.WriteLine.("Start")
            .._running = true
        }

        Stop ()->()
        {
            Console.WriteLine.("Stop")
            .._running = false
        }
    }
    
    Control ->
    {
        Shutdown ()->(){}
    }

    Program += Control
    {
        Shutdown ()->()
        {
            Console.WriteLine.("Shutdown")
            .._running = false
        }
    }

    App {name, ..Platform:Str}-> Program{name}{}
}