1. 标识符只支持英文字母开头，后续英文字母和数字，不允许其它字符。
2. 以标识符的首字母大小写确定公开或私有属性。
3. 语法尽可能明确简单，减少省略和多种等价语法的情况，保持克制够用。
4. 类型支持自动推导。
5. 只要语义是明确的、容易理解的，应该尽量减少符号和关键字混合牵套的情况。
6. 具有相似属性的特性，应该有相似的表示方法。
例如匿名相关特性都使用'_'表达，集合相关特性都使用括号表达。
7. 具有较大差异的特性，应该有明显不同的表示方法。
例如不应该出现var表示变量，val表示常量这种相似度较高，容易引起疏忽的表达。
8. 语法和关键字都应该有高度统一的风格，
不要某些使用自然语言，某些使用编程语言。
例如不应该出现 var a = 0 ，let a = 0 这种混合的表达。
9. 关键字应该尽可能使用缩写，省略出更多命名空间，
也使得语言可以自发地高度简练。但不应该出现小于2个字符的关键字。
10. 关键字尽可能缩写的情况下，
代码标识符变量以外的命名习惯就不推荐使用缩写，这样更易于理解。
11. 关键字以外，语言的原始类型和标准类库，尽量都不使用缩写。
12. 声明式语法，关键字语法应该更偏向声明而不是自然语言，
使用定义词作为关键词，而不是动词，尽量保持关键字在前，执行语句在后的结构。
13. 语言原始内容保持最简单可靠的特征，避免指针和底层操作，使用自动内存管理。
对于底层领域，通过领域标记部分来实现控制，或者使用标准库。
14. 语法设计尽量保持对称性。
15. 原始类型只使用最常用的文本、数字、布尔。其它更细的数据类型使用标准库提供。
16. 直观，可靠，简单
能在语言级别提高编程工作体验的，应该尽量在语言内部实现，不依赖IDE。
17. 结构、行为、协议分离，不像类一样混在一起。
18. 概念上符合自然语言思维。